"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Struct = void 0;
const assert = require("assert");
const runtime_1 = require("../runtime");
const util_1 = require("../util");
const go_type_1 = require("./go-type");
const type_member_1 = require("./type-member");
/*
 * Struct wraps a JSII datatype interface aka, structs
 */
class Struct extends go_type_1.GoType {
    constructor(parent, type) {
        super(parent, type);
        assert(type.isDataType(), `The provided interface ${type.fqn} is not a struct!`);
        this.properties = type.allProperties.map((prop) => new type_member_1.GoProperty(this, prop));
    }
    get dependencies() {
        return (0, util_1.getMemberDependencies)(this.properties);
    }
    get specialDependencies() {
        return {
            runtime: false,
            init: false,
            internal: false,
            time: this.properties.some((prop) => prop.specialDependencies.time),
        };
    }
    emit(context) {
        const { code, documenter } = context;
        documenter.emit(this.type.docs, this.apiLocation);
        code.openBlock(`type ${this.name} struct`);
        for (const property of this.properties) {
            property.emitStructMember(context);
        }
        code.closeBlock();
        code.line();
    }
    emitRegistration(code) {
        code.open(`${runtime_1.JSII_RT_ALIAS}.RegisterStruct(`);
        code.line(`"${this.fqn}",`);
        code.line(`reflect.TypeOf((*${this.name})(nil)).Elem(),`);
        code.close(')');
    }
}
exports.Struct = Struct;
//# sourceMappingURL=struct.js.map