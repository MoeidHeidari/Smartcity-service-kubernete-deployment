"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const child_process_1 = require("child_process");
const lib_1 = require("../lib");
const provider_generator_1 = require("@cdktf/provider-generator");
const providerRequirements = ["kreuzwerker/docker@ ~>2.15.0"];
const createFiles = (cwd, files) => {
    files.forEach(([p, content]) => {
        fs.writeFileSync(path.resolve(cwd, p), content, "utf8");
    });
};
const createTSCdkProject = (cwd) => createFiles(cwd, [
    [
        "cdktf.json",
        `{
"language": "typescript",
"app": "npm run --silent compile && node main.js",
"terraformProviders": [],
"terraformModules": [],
"context": {}}`,
    ],
    [
        "main.ts",
        `import { Construct } from "constructs";
import { App, TerraformStack } from "cdktf";


class MyStack extends TerraformStack {
    constructor(scope: Construct, name: string) {
    super(scope, name);

    // define resources here
    }
}

const app = new App();
new MyStack(app, "converted");
app.synth();`,
    ],
    [
        "package.json",
        `{
        "name": "converted",
        "version": "1.0.0",
        "main": "main.js",
        "types": "main.ts",
        "license": "MPL-2.0",
        "private": true,
        "scripts": {
          "get": "cdktf get",
          "build": "tsc",
          "synth": "cdktf synth",
          "compile": "tsc --pretty",
          "watch": "tsc -w",
          "test": "echo ok",
          "upgrade": "npm i cdktf@latest cdktf-cli@latest",
          "upgrade:next": "npm i cdktf@next cdktf-cli@next"
        },
        "engines": {
          "node": ">=14.0"
        },
        "dependencies": {
          "cdktf": "0.11.0-pre.53",
          "constructs": "^10.0.5"
        },
        "devDependencies": {
          "@types/node": "^14.0.26",
          "typescript": "^3.9.7",
          "cdktf-cli": "0.11.0-pre.53"
        }
      }`,
    ],
    [
        "tsconfig.json",
        `{
        "compilerOptions": {
          "alwaysStrict": true,
          "charset": "utf8",
          "declaration": true,
          "experimentalDecorators": true,
          "inlineSourceMap": true,
          "inlineSources": true,
          "lib": [
            "es2018"
          ],
          "module": "CommonJS",
          "noEmitOnError": true,
          "noFallthroughCasesInSwitch": true,
          "noImplicitAny": true,
          "noImplicitReturns": true,
          "noImplicitThis": true,
          "noUnusedLocals": true,
          "noUnusedParameters": true,
          "resolveJsonModule": true,
          "strict": true,
          "strictNullChecks": true,
          "strictPropertyInitialization": true,
          "stripInternal": true,
          "target": "ES2018"
        },
        "include": [
          "**/*.ts"
        ],
        "exclude": [
          "node_modules"
        ]
      }`,
    ],
]);
const terraformProject = (files) => {
    const dir = fs.mkdtempSync(path.join(os.tmpdir(), "cdktf-convert."));
    createFiles(dir, files);
    return {
        importPath: dir,
        targetPath: fs.mkdtempSync(path.join(os.tmpdir(), "cdktf-converted.")),
    };
};
const exec = (command, cwd) => child_process_1.execSync(command, {
    cwd,
    ...(process.env.VERBOSE === "true" ? { stdio: "inherit" } : {}),
});
const getTerraformPlan = (cwd) => {
    exec(`terraform init`, cwd);
    exec(`terraform plan -out planfile`, cwd);
    exec(`terraform show -json planfile > plan.json`, cwd);
    return JSON.parse(fs.readFileSync(path.resolve(cwd, "plan.json"), "utf8"));
};
const getCdkPlan = (cwd) => {
    exec(`npm install`, cwd);
    exec(`npm run get`, cwd);
    exec(`npm run synth`, cwd);
    return getTerraformPlan(path.resolve(cwd, "cdktf.out/stacks/converted/"));
};
function resources(plan) {
    return plan.planned_values.root_module.resources.map((item) => ({
        type: item.type,
        provider_name: item.provider_name,
        values: item.values,
    }));
}
let cachedProviderSchema;
describe("convertProject", () => {
    beforeAll(async () => {
        // Get all the provider schemas
        const { providerSchema } = await provider_generator_1.readSchema(providerRequirements.map((spec) => provider_generator_1.ConstructsMakerProviderTarget.from(new provider_generator_1.config.TerraformProviderConstraint(spec), provider_generator_1.LANGUAGES[0])));
        cachedProviderSchema = providerSchema;
    });
    it("has a similar plan", async () => {
        const { importPath, targetPath } = terraformProject([
            [
                "main.tf",
                `terraform {
        required_providers {
          docker = {
            source  = "kreuzwerker/docker"
            version = "2.14.0"
          }
        }
      }
      
      provider "docker" {
        host = "unix:///var/run/docker.sock"
      }`,
            ],
            [
                "container.tf",
                `resource "docker_image" "ubuntu" {
            name = "ubuntu:latest"
          }
          
          resource "docker_container" "foo" {
            image = docker_image.ubuntu.latest
            name  = "foo"
          }`,
            ],
            [
                "cluster.tf",
                `module "k3s" {
        source  = "camptocamp/k3s/docker"
        version = "0.11.0"
        
        cluster_endpoint = ""
        cluster_name = "cdktf"
        network_name = ""
      }`,
            ],
        ]);
        const previousPlan = getTerraformPlan(importPath);
        createTSCdkProject(targetPath);
        const mainTs = fs.readFileSync(path.resolve(targetPath, "main.ts"), "utf8");
        const { code, cdktfJson } = await lib_1.convertProject(lib_1.getTerraformConfigFromDir(importPath), {
            language: "typescript",
            providerSchema: cachedProviderSchema,
        });
        fs.writeFileSync(path.resolve(targetPath, "main.ts"), code(mainTs), "utf8");
        fs.writeFileSync(path.resolve(targetPath, "cdktf.json"), JSON.stringify(cdktfJson(require(path.resolve(targetPath, "cdktf.json")))), "utf8");
        const currentPlan = getCdkPlan(targetPath);
        expect(resources(currentPlan)).toEqual(resources(previousPlan));
    });
});
//# sourceMappingURL=data:application/json;base64,