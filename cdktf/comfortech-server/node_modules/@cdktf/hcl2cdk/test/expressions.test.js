"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generator_1 = __importDefault(require("@babel/generator"));
const t = __importStar(require("@babel/types"));
const expressions_1 = require("../lib/expressions");
const expressions_2 = require("../lib/expressions");
const nodeIds = [
    "var.input",
    "module.vpc",
    "data.aws_s3_bucket.examplebucket",
    "aws_s3_bucket.examplebucket",
    "aws_s3_bucket.otherbucket",
    "var.users",
    "aws_kms_key.key",
    "local.service_name",
];
describe("expressions", () => {
    describe("#extractReferencesFromExpression", () => {
        it("finds no references in literals", () => {
            expect(expressions_2.extractReferencesFromExpression("nothingtobeseen", nodeIds)).resolves.toEqual([]);
        });
        it("finds no references in literals with functions", () => {
            expect(expressions_2.extractReferencesFromExpression("${foo(nothingtobeseen)}", nodeIds)).resolves.toEqual([]);
        });
        it("finds no references in literals with functions and artihmetics", () => {
            expect(expressions_2.extractReferencesFromExpression("${foo(nothingtobeseen - 2) + 3}", nodeIds)).resolves.toEqual([]);
        });
        it("finds plain var reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${var.input}", nodeIds)).resolves.toEqual([
                {
                    referencee: { id: "var.input", full: "var.input" },
                    useFqn: false,
                    isVariable: true,
                    start: 2,
                    end: 11,
                },
            ]);
        });
        it("finds plain module reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${module.vpc.public_subnets}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "module.vpc",
                        full: "module.vpc.public_subnets",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 27,
                },
            ]);
        });
        it("finds plain data reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${data.aws_s3_bucket.examplebucket.arn}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "data.aws_s3_bucket.examplebucket",
                        full: "data.aws_s3_bucket.examplebucket.arn",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 38,
                },
            ]);
        });
        it("finds plain local reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${local.service_name}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "local.service_name",
                        full: "local.service_name",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 20,
                },
            ]);
        });
        it("finds plain resource reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.id}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.id",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 32,
                },
            ]);
        });
        it("finds plain resource references in artihmetics", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.count + aws_s3_bucket.otherbucket.count }", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.count",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 35,
                },
                {
                    referencee: {
                        id: "aws_s3_bucket.otherbucket",
                        full: "aws_s3_bucket.otherbucket.count",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 38,
                    end: 69,
                },
            ]);
        });
        it("use fqn for splat reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.*.id}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 2,
                    end: 29,
                },
            ]);
        });
        it("use no fqn if property is present on numeric access", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.network_interface.0.access_config.0.assigned_nat_ip}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.network_interface",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 47,
                },
            ]);
        });
        it("detect splat reference within function", () => {
            expect(expressions_2.extractReferencesFromExpression("${toset(aws_s3_bucket.examplebucket.*)}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 8,
                    end: 35,
                },
            ]);
        });
        it("finds all resources in conditional", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_kms_key.key.deletion_window_in_days > 3 ? aws_s3_bucket.examplebucket.id : []}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_kms_key.key",
                        full: "aws_kms_key.key.deletion_window_in_days",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 41,
                },
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.id",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 48,
                    end: 78,
                },
            ]);
        });
        it("finds all resources in functions", () => {
            expect(expressions_2.extractReferencesFromExpression("${element(aws_s3_bucket.examplebucket, 0).id}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 10,
                    end: 37,
                },
            ]);
        });
        it("finds all resources in functions with splat", () => {
            expect(expressions_2.extractReferencesFromExpression("${element(aws_s3_bucket.examplebucket.*.id, 0)}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 10,
                    end: 37,
                },
            ]);
        });
        it("finds all resources in for loops", () => {
            expect(expressions_2.extractReferencesFromExpression("${{ for name, user in var.users : user.role => name...}}", nodeIds)).resolves.toEqual([
                {
                    referencee: { id: "var.users", full: "var.users" },
                    useFqn: false,
                    isVariable: true,
                    start: 22,
                    end: 31,
                },
            ]);
        });
        it("finds resources with property access", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket[0].id}", nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 2,
                    end: 29,
                },
            ]);
        });
        it("finds references within functions that use arrays and comments", () => {
            expect(expressions_2.extractReferencesFromExpression(`\${compact([
            # The example "bucket"
            aws_s3_bucket.examplebucket,
        
            # The "Learn" single page application. This is not configured in all environments.
            var.input,
          ])}`, nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 59,
                    end: 86,
                },
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 204,
                    end: 213,
                },
            ]);
        });
        it("finds references for same referencees", () => {
            expect(expressions_2.extractReferencesFromExpression(`\${var.input == "test" ? "azure-ad-int" : "azure-ad-\${var.input}"}`, nodeIds)).resolves.toEqual([
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 2,
                    end: 11,
                },
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 53,
                    end: 62,
                },
            ]);
        });
    });
    describe("#referenceToAst", () => {
        it("property access", () => {
            const scope = {
                providerSchema: { format_version: "0.1" },
                providerGenerator: {},
                constructs: new Set(),
                variables: {},
            };
            expect(generator_1.default(t.program([
                t.expressionStatement(expressions_2.referenceToAst(scope, {
                    start: 0,
                    end: 0,
                    useFqn: false,
                    isVariable: false,
                    referencee: {
                        id: "aws_kms_key.key",
                        full: "aws_kms_key.key.deletion_window_in_days",
                    },
                })),
            ])).code).toMatchInlineSnapshot(`"awsKmsKeyKey.deletionWindowInDays;"`);
        });
    });
    describe("#referencesToAst", () => {
        it("nested terraform expressions without space", async () => {
            const scope = {
                providerSchema: { format_version: "0.1" },
                providerGenerator: {},
                constructs: new Set(),
                variables: {},
            };
            const expr = `\${"\${each.value}\${var.azure_ad_domain_name}"}`;
            const references = await expressions_2.extractReferencesFromExpression(expr, [
                "var.azure_ad_domain_name",
            ]);
            expect(generator_1.default(t.program([
                t.expressionStatement(expressions_1.referencesToAst(scope, expr, references, [])),
            ])).code).toMatchInlineSnapshot(`"\`\\\\\${\\"\\\\\${each.value}\\\\\${\${azureAdDomainName.value}}\\"}\`;"`);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbnMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cHJlc3Npb25zLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQXdDO0FBQ3hDLGdEQUFrQztBQUNsQyxvREFBcUQ7QUFFckQsb0RBRzRCO0FBRTVCLE1BQU0sT0FBTyxHQUFHO0lBQ2QsV0FBVztJQUNYLFlBQVk7SUFDWixrQ0FBa0M7SUFDbEMsNkJBQTZCO0lBQzdCLDJCQUEyQjtJQUMzQixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLG9CQUFvQjtDQUNyQixDQUFDO0FBRUYsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLE1BQU0sQ0FDSiw2Q0FBK0IsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FDNUQsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtZQUN4RCxNQUFNLENBQ0osNkNBQStCLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLENBQ3BFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7WUFDeEUsTUFBTSxDQUNKLDZDQUErQixDQUM3QixpQ0FBaUMsRUFDakMsT0FBTyxDQUNSLENBQ0YsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtZQUNuQyxNQUFN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QUFzQyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzFELE1BQU0sS0FBSyxHQUFVO2dCQUNuQixjQUFjLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFO2dCQUN6QyxpQkFBaUIsRUFBRSxFQUFFO2dCQUNyQixVQUFVLEVBQUUsSUFBSSxHQUFHLEVBQVU7Z0JBQzdCLFNBQVMsRUFBRSxFQUFFO2FBQ2QsQ0FBQztZQUNGLE1BQU0sSUFBSSxHQUFHLGtEQUFrRCxDQUFDO1lBQ2hFLE1BQU0sVUFBVSxHQUFHLE1BQU0sNkNBQStCLENBQUMsSUFBSSxFQUFFO2dCQUM3RCwwQkFBMEI7YUFDM0IsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUNKLG1CQUFRLENBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDUixDQUFDLENBQUMsbUJBQW1CLENBQUMsNkJBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUNwRSxDQUFRLENBQ1YsQ0FBQyxJQUFJLENBQ1AsQ0FBQyxxQkFBcUIsQ0FDckIsNEVBQTRFLENBQzdFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2VuZXJhdGUgZnJvbSBcIkBiYWJlbC9nZW5lcmF0b3JcIjtcbmltcG9ydCAqIGFzIHQgZnJvbSBcIkBiYWJlbC90eXBlc1wiO1xuaW1wb3J0IHsgcmVmZXJlbmNlc1RvQXN0IH0gZnJvbSBcIi4uL2xpYi9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiLi4vbGliL3R5cGVzXCI7XG5pbXBvcnQge1xuICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uLFxuICByZWZlcmVuY2VUb0FzdCxcbn0gZnJvbSBcIi4uL2xpYi9leHByZXNzaW9uc1wiO1xuXG5jb25zdCBub2RlSWRzID0gW1xuICBcInZhci5pbnB1dFwiLFxuICBcIm1vZHVsZS52cGNcIixcbiAgXCJkYXRhLmF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICBcImF3c19zM19idWNrZXQub3RoZXJidWNrZXRcIixcbiAgXCJ2YXIudXNlcnNcIixcbiAgXCJhd3Nfa21zX2tleS5rZXlcIixcbiAgXCJsb2NhbC5zZXJ2aWNlX25hbWVcIixcbl07XG5cbmRlc2NyaWJlKFwiZXhwcmVzc2lvbnNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcIiNleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uXCIsICgpID0+IHtcbiAgICBpdChcImZpbmRzIG5vIHJlZmVyZW5jZXMgaW4gbGl0ZXJhbHNcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFwibm90aGluZ3RvYmVzZWVuXCIsIG5vZGVJZHMpXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBubyByZWZlcmVuY2VzIGluIGxpdGVyYWxzIHdpdGggZnVuY3Rpb25zXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgZXh0cmFjdFJlZmVyZW5jZXNGcm9tRXhwcmVzc2lvbihcIiR7Zm9vKG5vdGhpbmd0b2Jlc2Vlbil9XCIsIG5vZGVJZHMpXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBubyByZWZlcmVuY2VzIGluIGxpdGVyYWxzIHdpdGggZnVuY3Rpb25zIGFuZCBhcnRpaG1ldGljc1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke2Zvbyhub3RoaW5ndG9iZXNlZW4gLSAyKSArIDN9XCIsXG4gICAgICAgICAgbm9kZUlkc1xuICAgICAgICApXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBwbGFpbiB2YXIgcmVmZXJlbmNlXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgZXh0cmFjdFJlZmVyZW5jZXNGcm9tRXhwcmVzc2lvbihcIiR7dmFyLmlucHV0fVwiLCBub2RlSWRzKVxuICAgICAgKS5yZXNvbHZlcy50b0VxdWFsKFtcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHsgaWQ6IFwidmFyLmlucHV0XCIsIGZ1bGw6IFwidmFyLmlucHV0XCIgfSxcbiAgICAgICAgICB1c2VGcW46IGZhbHNlLFxuICAgICAgICAgIGlzVmFyaWFibGU6IHRydWUsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBwbGFpbiBtb2R1bGUgcmVmZXJlbmNlXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgZXh0cmFjdFJlZmVyZW5jZXNGcm9tRXhwcmVzc2lvbihcIiR7bW9kdWxlLnZwYy5wdWJsaWNfc3VibmV0c31cIiwgbm9kZUlkcylcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJtb2R1bGUudnBjXCIsXG4gICAgICAgICAgICBmdWxsOiBcIm1vZHVsZS52cGMucHVibGljX3N1Ym5ldHNcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAyNyxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBwbGFpbiBkYXRhIHJlZmVyZW5jZVwiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke2RhdGEuYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0LmFybn1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJkYXRhLmF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgICAgZnVsbDogXCJkYXRhLmF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC5hcm5cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAzOCxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBwbGFpbiBsb2NhbCByZWZlcmVuY2VcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFwiJHtsb2NhbC5zZXJ2aWNlX25hbWV9XCIsIG5vZGVJZHMpXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgaWQ6IFwibG9jYWwuc2VydmljZV9uYW1lXCIsXG4gICAgICAgICAgICBmdWxsOiBcImxvY2FsLnNlcnZpY2VfbmFtZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiBmYWxzZSxcbiAgICAgICAgICBpc1ZhcmlhYmxlOiBmYWxzZSxcbiAgICAgICAgICBzdGFydDogMixcbiAgICAgICAgICBlbmQ6IDIwLFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdChcImZpbmRzIHBsYWluIHJlc291cmNlIHJlZmVyZW5jZVwiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke2F3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC5pZH1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0LmlkXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IGZhbHNlLFxuICAgICAgICAgIGlzVmFyaWFibGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiAyLFxuICAgICAgICAgIGVuZDogMzIsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmluZHMgcGxhaW4gcmVzb3VyY2UgcmVmZXJlbmNlcyBpbiBhcnRpaG1ldGljc1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke2F3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC5jb3VudCArIGF3c19zM19idWNrZXQub3RoZXJidWNrZXQuY291bnQgfVwiLFxuICAgICAgICAgIG5vZGVJZHNcbiAgICAgICAgKVxuICAgICAgKS5yZXNvbHZlcy50b0VxdWFsKFtcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHtcbiAgICAgICAgICAgIGlkOiBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgICAgZnVsbDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXQuY291bnRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAzNSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHtcbiAgICAgICAgICAgIGlkOiBcImF3c19zM19idWNrZXQub3RoZXJidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5vdGhlcmJ1Y2tldC5jb3VudFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiBmYWxzZSxcbiAgICAgICAgICBpc1ZhcmlhYmxlOiBmYWxzZSxcbiAgICAgICAgICBzdGFydDogMzgsXG4gICAgICAgICAgZW5kOiA2OSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ1c2UgZnFuIGZvciBzcGxhdCByZWZlcmVuY2VcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFxuICAgICAgICAgIFwiJHthd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXQuKi5pZH1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IHRydWUsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAyOSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ1c2Ugbm8gZnFuIGlmIHByb3BlcnR5IGlzIHByZXNlbnQgb24gbnVtZXJpYyBhY2Nlc3NcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFxuICAgICAgICAgIFwiJHthd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXQubmV0d29ya19pbnRlcmZhY2UuMC5hY2Nlc3NfY29uZmlnLjAuYXNzaWduZWRfbmF0X2lwfVwiLFxuICAgICAgICAgIG5vZGVJZHNcbiAgICAgICAgKVxuICAgICAgKS5yZXNvbHZlcy50b0VxdWFsKFtcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHtcbiAgICAgICAgICAgIGlkOiBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgICAgZnVsbDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXQubmV0d29ya19pbnRlcmZhY2VcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiA0NyxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJkZXRlY3Qgc3BsYXQgcmVmZXJlbmNlIHdpdGhpbiBmdW5jdGlvblwiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke3Rvc2V0KGF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC4qKX1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IHRydWUsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDgsXG4gICAgICAgICAgZW5kOiAzNSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyBhbGwgcmVzb3VyY2VzIGluIGNvbmRpdGlvbmFsXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgZXh0cmFjdFJlZmVyZW5jZXNGcm9tRXhwcmVzc2lvbihcbiAgICAgICAgICBcIiR7YXdzX2ttc19rZXkua2V5LmRlbGV0aW9uX3dpbmRvd19pbl9kYXlzID4gMyA/IGF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC5pZCA6IFtdfVwiLFxuICAgICAgICAgIG5vZGVJZHNcbiAgICAgICAgKVxuICAgICAgKS5yZXNvbHZlcy50b0VxdWFsKFtcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHtcbiAgICAgICAgICAgIGlkOiBcImF3c19rbXNfa2V5LmtleVwiLFxuICAgICAgICAgICAgZnVsbDogXCJhd3Nfa21zX2tleS5rZXkuZGVsZXRpb25fd2luZG93X2luX2RheXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiA0MSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJlZmVyZW5jZWU6IHtcbiAgICAgICAgICAgIGlkOiBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgICAgZnVsbDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXQuaWRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDQ4LFxuICAgICAgICAgIGVuZDogNzgsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmluZHMgYWxsIHJlc291cmNlcyBpbiBmdW5jdGlvbnNcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFxuICAgICAgICAgIFwiJHtlbGVtZW50KGF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldCwgMCkuaWR9XCIsXG4gICAgICAgICAgbm9kZUlkc1xuICAgICAgICApXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgaWQ6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgICBmdWxsOiBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiB0cnVlLFxuICAgICAgICAgIGlzVmFyaWFibGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiAxMCxcbiAgICAgICAgICBlbmQ6IDM3LFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdChcImZpbmRzIGFsbCByZXNvdXJjZXMgaW4gZnVuY3Rpb25zIHdpdGggc3BsYXRcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFxuICAgICAgICAgIFwiJHtlbGVtZW50KGF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldC4qLmlkLCAwKX1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IHRydWUsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDEwLFxuICAgICAgICAgIGVuZDogMzcsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmluZHMgYWxsIHJlc291cmNlcyBpbiBmb3IgbG9vcHNcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKFxuICAgICAgICAgIFwiJHt7IGZvciBuYW1lLCB1c2VyIGluIHZhci51c2VycyA6IHVzZXIucm9sZSA9PiBuYW1lLi4ufX1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7IGlkOiBcInZhci51c2Vyc1wiLCBmdWxsOiBcInZhci51c2Vyc1wiIH0sXG4gICAgICAgICAgdXNlRnFuOiBmYWxzZSxcbiAgICAgICAgICBpc1ZhcmlhYmxlOiB0cnVlLFxuICAgICAgICAgIHN0YXJ0OiAyMixcbiAgICAgICAgICBlbmQ6IDMxLFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdChcImZpbmRzIHJlc291cmNlcyB3aXRoIHByb3BlcnR5IGFjY2Vzc1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgXCIke2F3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFswXS5pZH1cIixcbiAgICAgICAgICBub2RlSWRzXG4gICAgICAgIClcbiAgICAgICkucmVzb2x2ZXMudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJhd3NfczNfYnVja2V0LmV4YW1wbGVidWNrZXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IHRydWUsXG4gICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgZW5kOiAyOSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJmaW5kcyByZWZlcmVuY2VzIHdpdGhpbiBmdW5jdGlvbnMgdGhhdCB1c2UgYXJyYXlzIGFuZCBjb21tZW50c1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgYFxcJHtjb21wYWN0KFtcbiAgICAgICAgICAgICMgVGhlIGV4YW1wbGUgXCJidWNrZXRcIlxuICAgICAgICAgICAgYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0LFxuICAgICAgICBcbiAgICAgICAgICAgICMgVGhlIFwiTGVhcm5cIiBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBub3QgY29uZmlndXJlZCBpbiBhbGwgZW52aXJvbm1lbnRzLlxuICAgICAgICAgICAgdmFyLmlucHV0LFxuICAgICAgICAgIF0pfWAsXG4gICAgICAgICAgbm9kZUlkc1xuICAgICAgICApXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgaWQ6IFwiYXdzX3MzX2J1Y2tldC5leGFtcGxlYnVja2V0XCIsXG4gICAgICAgICAgICBmdWxsOiBcImF3c19zM19idWNrZXQuZXhhbXBsZWJ1Y2tldFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiB0cnVlLFxuICAgICAgICAgIGlzVmFyaWFibGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiA1OSxcbiAgICAgICAgICBlbmQ6IDg2LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgaWQ6IFwidmFyLmlucHV0XCIsXG4gICAgICAgICAgICBmdWxsOiBcInZhci5pbnB1dFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiBmYWxzZSxcbiAgICAgICAgICBpc1ZhcmlhYmxlOiB0cnVlLFxuICAgICAgICAgIHN0YXJ0OiAyMDQsXG4gICAgICAgICAgZW5kOiAyMTMsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmluZHMgcmVmZXJlbmNlcyBmb3Igc2FtZSByZWZlcmVuY2Vlc1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzRnJvbUV4cHJlc3Npb24oXG4gICAgICAgICAgYFxcJHt2YXIuaW5wdXQgPT0gXCJ0ZXN0XCIgPyBcImF6dXJlLWFkLWludFwiIDogXCJhenVyZS1hZC1cXCR7dmFyLmlucHV0fVwifWAsXG4gICAgICAgICAgbm9kZUlkc1xuICAgICAgICApXG4gICAgICApLnJlc29sdmVzLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgaWQ6IFwidmFyLmlucHV0XCIsXG4gICAgICAgICAgICBmdWxsOiBcInZhci5pbnB1dFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlRnFuOiBmYWxzZSxcbiAgICAgICAgICBpc1ZhcmlhYmxlOiB0cnVlLFxuICAgICAgICAgIHN0YXJ0OiAyLFxuICAgICAgICAgIGVuZDogMTEsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VlOiB7XG4gICAgICAgICAgICBpZDogXCJ2YXIuaW5wdXRcIixcbiAgICAgICAgICAgIGZ1bGw6IFwidmFyLmlucHV0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VGcW46IGZhbHNlLFxuICAgICAgICAgIGlzVmFyaWFibGU6IHRydWUsXG4gICAgICAgICAgc3RhcnQ6IDUzLFxuICAgICAgICAgIGVuZDogNjIsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCIjcmVmZXJlbmNlVG9Bc3RcIiwgKCkgPT4ge1xuICAgIGl0KFwicHJvcGVydHkgYWNjZXNzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNjb3BlOiBTY29wZSA9IHtcbiAgICAgICAgcHJvdmlkZXJTY2hlbWE6IHsgZm9ybWF0X3ZlcnNpb246IFwiMC4xXCIgfSxcbiAgICAgICAgcHJvdmlkZXJHZW5lcmF0b3I6IHt9LFxuICAgICAgICBjb25zdHJ1Y3RzOiBuZXcgU2V0PHN0cmluZz4oKSxcbiAgICAgICAgdmFyaWFibGVzOiB7fSxcbiAgICAgIH07XG4gICAgICBleHBlY3QoXG4gICAgICAgIGdlbmVyYXRlKFxuICAgICAgICAgIHQucHJvZ3JhbShbXG4gICAgICAgICAgICB0LmV4cHJlc3Npb25TdGF0ZW1lbnQoXG4gICAgICAgICAgICAgIHJlZmVyZW5jZVRvQXN0KHNjb3BlLCB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgICAgICAgICAgZW5kOiAwLFxuICAgICAgICAgICAgICAgIHVzZUZxbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNWYXJpYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlZToge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiYXdzX2ttc19rZXkua2V5XCIsXG4gICAgICAgICAgICAgICAgICBmdWxsOiBcImF3c19rbXNfa2V5LmtleS5kZWxldGlvbl93aW5kb3dfaW5fZGF5c1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF0pIGFzIGFueVxuICAgICAgICApLmNvZGVcbiAgICAgICkudG9NYXRjaElubGluZVNuYXBzaG90KGBcImF3c0ttc0tleUtleS5kZWxldGlvbldpbmRvd0luRGF5cztcImApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIiNyZWZlcmVuY2VzVG9Bc3RcIiwgKCkgPT4ge1xuICAgIGl0KFwibmVzdGVkIHRlcnJhZm9ybSBleHByZXNzaW9ucyB3aXRob3V0IHNwYWNlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNjb3BlOiBTY29wZSA9IHtcbiAgICAgICAgcHJvdmlkZXJTY2hlbWE6IHsgZm9ybWF0X3ZlcnNpb246IFwiMC4xXCIgfSxcbiAgICAgICAgcHJvdmlkZXJHZW5lcmF0b3I6IHt9LFxuICAgICAgICBjb25zdHJ1Y3RzOiBuZXcgU2V0PHN0cmluZz4oKSxcbiAgICAgICAgdmFyaWFibGVzOiB7fSxcbiAgICAgIH07XG4gICAgICBjb25zdCBleHByID0gYFxcJHtcIlxcJHtlYWNoLnZhbHVlfVxcJHt2YXIuYXp1cmVfYWRfZG9tYWluX25hbWV9XCJ9YDtcbiAgICAgIGNvbnN0IHJlZmVyZW5jZXMgPSBhd2FpdCBleHRyYWN0UmVmZXJlbmNlc0Zyb21FeHByZXNzaW9uKGV4cHIsIFtcbiAgICAgICAgXCJ2YXIuYXp1cmVfYWRfZG9tYWluX25hbWVcIixcbiAgICAgIF0pO1xuICAgICAgZXhwZWN0KFxuICAgICAgICBnZW5lcmF0ZShcbiAgICAgICAgICB0LnByb2dyYW0oW1xuICAgICAgICAgICAgdC5leHByZXNzaW9uU3RhdGVtZW50KHJlZmVyZW5jZXNUb0FzdChzY29wZSwgZXhwciwgcmVmZXJlbmNlcywgW10pKSxcbiAgICAgICAgICBdKSBhcyBhbnlcbiAgICAgICAgKS5jb2RlXG4gICAgICApLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChcbiAgICAgICAgYFwiXFxgXFxcXFxcXFxcXCR7XFxcXFwiXFxcXFxcXFxcXCR7ZWFjaC52YWx1ZX1cXFxcXFxcXFxcJHtcXCR7YXp1cmVBZERvbWFpbk5hbWUudmFsdWV9fVxcXFxcIn1cXGA7XCJgXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19