"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isListExpression = exports.findUsedReferences = exports.extractDynamicBlocks = exports.referencesToAst = exports.referenceToAst = exports.constructAst = exports.variableName = exports.referenceToVariableName = exports.extractReferencesFromExpression = void 0;
const t = __importStar(require("@babel/types"));
const reserved_words_1 = __importDefault(require("reserved-words"));
const utils_1 = require("./utils");
const provider_generator_1 = require("@cdktf/provider-generator");
const hcl2json_1 = require("@cdktf/hcl2json");
const provider_1 = require("./provider");
const DOLLAR_REGEX = /\$/g;
async function extractReferencesFromExpression(input, nodeIds, scopedIds = [] // dynamics introduce new scoped variables that are not the globally accessible ids
) {
    utils_1.logger.debug(`extractReferencesFromExpression(${input})`);
    const possibleVariableSpots = await hcl2json_1.getReferencesInExpression("main.tf", input);
    utils_1.logger.debug(`found possible variable spots: ${JSON.stringify(possibleVariableSpots)}`);
    return possibleVariableSpots.reduce((carry, spot) => {
        const { value, startPosition, endPosition } = spot;
        // no reference
        if (!value.includes(".") || // just a literal
            value.startsWith(".") || // dangling property access
            value.endsWith("...") || // spread (likely in for loop)
            value.startsWith("count.") || // count variable
            value.startsWith("each.") || // each variable
            // https://www.terraform.io/docs/language/expressions/references.html#filesystem-and-workspace-info
            value.startsWith("path.module") ||
            value.startsWith("path.root") ||
            value.startsWith("path.cwd") ||
            value.startsWith("terraform.workspace") ||
            value.startsWith("self.") // block local value
        ) {
            utils_1.logger.debug(`skipping ${value}`);
            return carry;
        }
        const referenceParts = value.split(".");
        utils_1.logger.debug(`Searching for node id '${value}' in ${JSON.stringify(nodeIds)}`);
        const corespondingNodeId = [...nodeIds, ...scopedIds].find((id) => {
            const parts = id.split(".");
            const matchesFirst = parts[0] === referenceParts[0];
            const matchesFirstTwo = matchesFirst &&
                (parts[1] === referenceParts[1] || referenceParts.length === 1);
            return (matchesFirstTwo &&
                (parts[0] === "data" ? parts[2] === referenceParts[2] : true));
        });
        if (!corespondingNodeId) {
            // This is most likely a false positive, so we just ignore it
            // We include the log below to help debugging
            utils_1.logger.error(`Found a reference that is unknown: ${input} has reference "${value}". The id was not found in ${JSON.stringify(nodeIds)} with temporary values ${JSON.stringify(scopedIds)}.
        Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.`);
            return carry;
        }
        if (scopedIds.includes(corespondingNodeId)) {
            utils_1.logger.debug(`skipping '${value}' since it's a scoped variable`);
            return carry;
        }
        utils_1.logger.debug(`Found node id '${corespondingNodeId}'`);
        const spotParts = value.split(".");
        let isThereANumericAccessor = false;
        const referenceSpotParts = spotParts.filter((part) => {
            if (!Number.isNaN(parseInt(part, 10))) {
                isThereANumericAccessor = true;
                return false;
            }
            return !isThereANumericAccessor;
        });
        const fullReference = isThereANumericAccessor
            ? referenceSpotParts.slice(0, 2).join(".")
            : value;
        const isVariable = value.startsWith("var.");
        const useFqn = 
        // Can not use FQN on vars
        !isVariable &&
            // Can not use FQN on locals
            !value.startsWith("local.") &&
            // If the following character is
            (input.substr(endPosition + 1, 1) === "*" || // a * (splat) we need to use the FQN
                input.substr(endPosition, 1) === "[" || // a property access
                isThereANumericAccessor || // a numeric access
                fullReference.split(".").length < 3);
        const ref = {
            start: startPosition,
            end: endPosition,
            referencee: {
                id: corespondingNodeId,
                full: fullReference,
            },
            useFqn,
            isVariable,
        };
        utils_1.logger.debug(`Found reference ${JSON.stringify(ref)}`);
        return [...carry, ref];
    }, []);
}
exports.extractReferencesFromExpression = extractReferencesFromExpression;
function referenceToVariableName(scope, ref) {
    const parts = ref.referencee.id.split(".");
    const resource = parts[0] === "data" ? `${parts[0]}.${parts[1]}` : parts[0];
    const name = parts[0] === "data" ? parts[2] : parts[1];
    return variableName(scope, resource, name);
}
exports.referenceToVariableName = referenceToVariableName;
function validVarName(name) {
    if (reserved_words_1.default.check(name)) {
        return `${name}Var`;
    }
    if (!Number.isNaN(parseInt(name[0], 10))) {
        return `d${name}`;
    }
    return name;
}
function variableName(scope, resource, name) {
    // name collision, we need to prefix the name
    if (scope.variables[name]) {
        if (resource === scope.variables[name].resource) {
            return scope.variables[name].variableName;
        }
        // we only cache one per name
        return validVarName(utils_1.camelCase([resource, name].join("_")));
    }
    const variableName = validVarName(utils_1.camelCase(["var", "local", "module"].includes(resource)
        ? name
        : [resource, name].join("_")));
    scope.variables[name] = { variableName, resource };
    return variableName;
}
exports.variableName = variableName;
function constructAst(scope, type, isModuleImport) {
    if (isModuleImport) {
        return t.memberExpression(t.identifier(type), t.identifier(type));
    }
    function getUniqueName(provider, type) {
        var _a;
        // early abort on cdktf
        if (provider === "cdktf") {
            return utils_1.pascalCase(type.replace("cdktf_", ""));
        }
        if (provider === "NullProvider") {
            return utils_1.pascalCase(type.replace("NullProvider_", ""));
        }
        // Special handling for provider blocks, e.g. aws_AwsProvider
        if (type === `${utils_1.pascalCase(provider)}Provider`) {
            return type;
        }
        const fullProviderName = provider_1.getFullProviderName(scope.providerSchema, provider);
        if (fullProviderName && scope.providerGenerator[fullProviderName]) {
            return (_a = scope.providerGenerator[fullProviderName]) === null || _a === void 0 ? void 0 : _a.getClassNameForResource(type);
        }
        else {
            // If we can not find the class name for a resource the caller needs to find a sensible default
            return null;
        }
    }
    // resources or data sources
    if (!type.includes("./") && type.includes(".")) {
        const parts = type.split(".");
        if (parts[0] === "data") {
            const [, provider, resource] = parts;
            const namespace = provider_generator_1.getResourceNamespace(provider, resource);
            const resourceName = getUniqueName(provider, parts.join("_")) ||
                utils_1.pascalCase(`data_${provider}_${resource}`);
            if (namespace) {
                return t.memberExpression(t.memberExpression(t.identifier(provider), // e.g. aws
                t.identifier(namespace.name) // e.g. EC2
                ), t.identifier(resourceName) // e.g. DataAwsInstance
                );
            }
            return t.memberExpression(t.identifier(provider), // e.g. aws
            t.identifier(resourceName) // e.g. DataAwsNatGateway
            );
        }
        const [provider, resource] = parts;
        const namespace = provider_generator_1.getResourceNamespace(provider, resource);
        const resourceName = getUniqueName(provider, parts.join("_")) || utils_1.pascalCase(resource);
        if (namespace) {
            return t.memberExpression(t.memberExpression(t.identifier(provider), // e.g. aws
            t.identifier(namespace.name) // e.g. EC2
            ), t.identifier(resourceName) // e.g. Instance
            );
        }
        return t.memberExpression(t.identifier(provider), // e.g. google
        t.identifier(resourceName) // e.g. BigQueryTable
        );
    }
    return t.identifier(utils_1.pascalCase(type));
}
exports.constructAst = constructAst;
function referenceToAst(scope, ref) {
    const [resource, , ...selector] = ref.referencee.full.split(".");
    const variableReference = t.identifier(utils_1.camelCase(referenceToVariableName(scope, ref)));
    if (resource === "data") {
        selector.shift(); // remove the data part so that the name is not used in the selector
    }
    const accessor = selector.reduce((carry, member, index) => t.memberExpression(carry, t.identifier(index === 0 && resource === "module"
        ? utils_1.camelCase(member + "Output")
        : utils_1.camelCase(member))), variableReference);
    if (ref.useFqn) {
        return t.memberExpression(accessor, t.identifier("fqn"));
    }
    if (ref.isVariable) {
        return t.memberExpression(accessor, t.identifier("value"));
    }
    return accessor;
}
exports.referenceToAst = referenceToAst;
function referencesToAst(scope, input, refs, scopedIds = [] // dynamics introduce new scoped variables that are not the globally accessible ids
) {
    utils_1.logger.debug(`Transforming string '${input}' with references ${JSON.stringify(refs)} to AST`);
    if (refs.length === 0) {
        return t.stringLiteral(input);
    }
    const refAsts = refs
        .sort((a, b) => a.start - b.start)
        .filter((ref) => !scopedIds.includes(ref.referencee.id))
        .map((ref) => ({ ref, ast: referenceToAst(scope, ref) }));
    if (refAsts.length === 1 &&
        refAsts[0].ref.start === "${".length &&
        refAsts[0].ref.end === input.length - "}".length &&
        !refAsts[0].ref.useFqn) {
        return refAsts[0].ast;
    }
    // string parts in the template string
    const quasis = [];
    // dynamic values in the template string
    const expressions = [];
    let lastEnd = 0;
    refAsts.forEach(({ ref, ast }) => {
        // leading quasi
        if (ref.start !== lastEnd) {
            quasis.push(t.templateElement({
                raw: input.substring(lastEnd, ref.start).replace(DOLLAR_REGEX, "\\$"),
            }));
        }
        expressions.push(ast);
        lastEnd = ref.end;
    });
    // trailing quasi
    quasis.push(t.templateElement({
        raw: input
            .substring(lastEnd, input.length)
            .replace(DOLLAR_REGEX, "\\$"),
    }, true));
    return t.templateLiteral(quasis, expressions);
}
exports.referencesToAst = referencesToAst;
exports.extractDynamicBlocks = (config, path = "") => {
    if (typeof config !== "object") {
        return [];
    }
    if (!config) {
        return [];
    }
    if (Array.isArray(config)) {
        return config.reduce((carry, item, index) => [
            ...carry,
            ...exports.extractDynamicBlocks(item, `${path}.${index}`),
        ], []);
    }
    if ("dynamic" in config) {
        const dynamic = config.dynamic;
        const scopedVar = Object.keys(dynamic)[0];
        const { for_each, content } = dynamic[scopedVar][0];
        return [
            {
                path: `${path}.${scopedVar}`,
                for_each,
                content,
                scopedVar,
            },
        ];
    }
    return Object.entries(config).reduce((carry, [key, value]) => {
        return [...carry, ...exports.extractDynamicBlocks(value, `${path}.${key}`)];
    }, []);
};
async function findUsedReferences(nodeIds, item) {
    utils_1.logger.debug(`findUsedReferences(${nodeIds}, ${item})`);
    if (typeof item === "string") {
        return await extractReferencesFromExpression(item, nodeIds, []);
    }
    if (typeof item !== "object" || item === null || item === undefined) {
        return [];
    }
    if (Array.isArray(item)) {
        return (await Promise.all(item.map((i) => findUsedReferences(nodeIds, i)))).flat();
    }
    if (item && "dynamic" in item) {
        const dyn = item["dynamic"];
        const { for_each, ...others } = dyn;
        const dynamicRef = Object.keys(others)[0];
        return await findUsedReferences([...nodeIds, dynamicRef], dyn);
    }
    return (await Promise.all(Object.values(item).map((i) => findUsedReferences(nodeIds, i)))).flat();
}
exports.findUsedReferences = findUsedReferences;
// This only guesses if the type of an expression is list, it should be replaced by something that understands
// the type of the expression, solved by https://github.com/hashicorp/terraform-cdk/issues/842
function isListExpression(item) {
    const hasListExtension = item.includes("[") &&
        item.includes("for ") &&
        item.includes(" in ") &&
        item.includes("]");
    if (!hasListExtension) {
        return false;
    }
    // We might have wrapped it in a function that collapses the list
    return !["element", "index", "length", "lookup", "one", "join"].some((collapsingTfFunction) => item.includes(`${collapsingTfFunction}(`) &&
        item.indexOf(`${collapsingTfFunction}(`) < item.indexOf("for"));
}
exports.isListExpression = isListExpression;
//# sourceMappingURL=data:application/json;base64,