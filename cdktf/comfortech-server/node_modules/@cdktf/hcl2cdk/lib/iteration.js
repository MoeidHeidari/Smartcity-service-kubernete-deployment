"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceStats = exports.forEachNamespaced = exports.forEachProvider = exports.forEachGlobal = void 0;
const telemetryAllowList_json_1 = require("./telemetryAllowList.json");
// locals, variables, and outputs are global key value maps
function forEachGlobal(scope, prefix, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, item]) => {
        const id = `${prefix}.${key}`;
        return {
            ...carry,
            [id]: async (graph) => await iterator(scope, key, id, item, graph),
        };
    }, {});
}
exports.forEachGlobal = forEachGlobal;
function forEachProvider(scope, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, items]) => {
        return {
            ...carry,
            ...items.reduce((innerCarry, item) => {
                const id = item.alias ? `${key}.${item.alias}` : `${key}`;
                return {
                    ...innerCarry,
                    [id]: async (graph) => await iterator(scope, key, id, item, graph),
                };
            }, {}),
        };
    }, {});
}
exports.forEachProvider = forEachProvider;
// data and resource are namespaced key value maps
function forEachNamespaced(scope, record, iterator, prefix) {
    return Object.entries(record || {}).reduce((outerCarry, [type, items]) => ({
        ...outerCarry,
        ...Object.entries(items).reduce((innerCarry, [key, item]) => {
            const prefixedType = prefix ? `${prefix}.${type}` : type;
            const id = prefix ? `${prefix}.${type}.${key}` : `${type}.${key}`;
            return {
                ...innerCarry,
                [id]: async (graph) => await iterator(scope, prefixedType, key, id, item, graph),
            };
        }, {}),
    }), {});
}
exports.forEachNamespaced = forEachNamespaced;
function resourceStats(obj) {
    return Object.entries(obj).reduce((carry, [key, value]) => {
        const [provider, ...resourceParts] = key.split("_");
        const shouldBeTracked = telemetryAllowList_json_1.providers.includes(provider);
        const providerKey = shouldBeTracked ? provider : "other";
        const resourceName = shouldBeTracked ? resourceParts.join("_") : "other";
        return {
            ...carry,
            [providerKey]: {
                ...(carry[providerKey] || {}),
                [resourceName]: Object.keys(value).length,
            },
        };
    }, {});
}
exports.resourceStats = resourceStats;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVFQUFtRjtBQUduRiwyREFBMkQ7QUFDM0QsU0FBZ0IsYUFBYSxDQUMzQixLQUFZLEVBQ1osTUFBYyxFQUNkLE1BQXFDLEVBQ3JDLFFBTWU7SUFFZixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzlCLE9BQU87WUFDTCxHQUFHLEtBQUs7WUFDUixDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFvQixFQUFFLEVBQUUsQ0FDbkMsTUFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztTQUM5QyxDQUFDO0lBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQXBCRCxzQ0FvQkM7QUFFRCxTQUFnQixlQUFlLENBQzdCLEtBQVksRUFDWixNQUF1QyxFQUN2QyxRQU1lO0lBRWYsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNqRSxPQUFPO1lBQ0wsR0FBRyxLQUFLO1lBQ1IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQTRCLEVBQUUsRUFBRTtnQkFDM0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUss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cm9tIFwiZ3JhcGhvbG9neVwiO1xuaW1wb3J0IHsgcHJvdmlkZXJzIGFzIHRlbGVtZXRyeUFsbG93ZWRQcm92aWRlcnMgfSBmcm9tIFwiLi90ZWxlbWV0cnlBbGxvd0xpc3QuanNvblwiO1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vLyBsb2NhbHMsIHZhcmlhYmxlcywgYW5kIG91dHB1dHMgYXJlIGdsb2JhbCBrZXkgdmFsdWUgbWFwc1xuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hHbG9iYWw8VCwgUj4oXG4gIHNjb3BlOiBTY29wZSxcbiAgcHJlZml4OiBzdHJpbmcsXG4gIHJlY29yZDogUmVjb3JkPHN0cmluZywgVD4gfCB1bmRlZmluZWQsXG4gIGl0ZXJhdG9yOiAoXG4gICAgc2NvcGU6IFNjb3BlLFxuICAgIGtleTogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG4gICAgdmFsdWU6IFQsXG4gICAgZ3JhcGg6IERpcmVjdGVkR3JhcGhcbiAgKSA9PiBQcm9taXNlPFI+XG4pOiBSZWNvcmQ8c3RyaW5nLCAoZ3JhcGg6IERpcmVjdGVkR3JhcGgpID0+IFByb21pc2U8Uj4+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJlY29yZCB8fCB7fSkucmVkdWNlKChjYXJyeSwgW2tleSwgaXRlbV0pID0+IHtcbiAgICBjb25zdCBpZCA9IGAke3ByZWZpeH0uJHtrZXl9YDtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY2FycnksXG4gICAgICBbaWRdOiBhc3luYyAoZ3JhcGg6IERpcmVjdGVkR3JhcGgpID0+XG4gICAgICAgIGF3YWl0IGl0ZXJhdG9yKHNjb3BlLCBrZXksIGlkLCBpdGVtLCBncmFwaCksXG4gICAgfTtcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFByb3ZpZGVyPFQsIFI+KFxuICBzY29wZTogU2NvcGUsXG4gIHJlY29yZDogUmVjb3JkPHN0cmluZywgVFtdPiB8IHVuZGVmaW5lZCxcbiAgaXRlcmF0b3I6IChcbiAgICBzY29wZTogU2NvcGUsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgaWQ6IHN0cmluZyxcbiAgICB2YWx1ZTogVCxcbiAgICBncmFwaDogRGlyZWN0ZWRHcmFwaFxuICApID0+IFByb21pc2U8Uj5cbik6IFJlY29yZDxzdHJpbmcsIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gUHJvbWlzZTxSPj4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVjb3JkIHx8IHt9KS5yZWR1Y2UoKGNhcnJ5LCBba2V5LCBpdGVtc10pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY2FycnksXG4gICAgICAuLi5pdGVtcy5yZWR1Y2UoKGlubmVyQ2FycnksIGl0ZW06IFQgJiB7IGFsaWFzPzogc3RyaW5nIH0pID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmFsaWFzID8gYCR7a2V5fS4ke2l0ZW0uYWxpYXN9YCA6IGAke2tleX1gO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmlubmVyQ2FycnksXG4gICAgICAgICAgW2lkXTogYXN5bmMgKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSA9PlxuICAgICAgICAgICAgYXdhaXQgaXRlcmF0b3Ioc2NvcGUsIGtleSwgaWQsIGl0ZW0sIGdyYXBoKSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9KSxcbiAgICB9O1xuICB9LCB7fSk7XG59XG5cbi8vIGRhdGEgYW5kIHJlc291cmNlIGFyZSBuYW1lc3BhY2VkIGtleSB2YWx1ZSBtYXBzXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaE5hbWVzcGFjZWQ8VCwgUj4oXG4gIHNjb3BlOiBTY29wZSxcbiAgcmVjb3JkOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBUPj4gfCB1bmRlZmluZWQsXG4gIGl0ZXJhdG9yOiAoXG4gICAgc2NvcGU6IFNjb3BlLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBpZDogc3RyaW5nLFxuICAgIHZhbHVlOiBULFxuICAgIGdyYXBoOiBEaXJlY3RlZEdyYXBoXG4gICkgPT4gUHJvbWlzZTxSPixcbiAgcHJlZml4Pzogc3RyaW5nXG4pOiBSZWNvcmQ8c3RyaW5nLCAoZ3JhcGg6IERpcmVjdGVkR3JhcGgpID0+IFByb21pc2U8Uj4+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJlY29yZCB8fCB7fSkucmVkdWNlKFxuICAgIChvdXRlckNhcnJ5LCBbdHlwZSwgaXRlbXNdKSA9PiAoe1xuICAgICAgLi4ub3V0ZXJDYXJyeSxcbiAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGl0ZW1zKS5yZWR1Y2UoKGlubmVyQ2FycnksIFtrZXksIGl0ZW1dKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZWZpeGVkVHlwZSA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHt0eXBlfWAgOiB0eXBlO1xuICAgICAgICBjb25zdCBpZCA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHt0eXBlfS4ke2tleX1gIDogYCR7dHlwZX0uJHtrZXl9YDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pbm5lckNhcnJ5LFxuICAgICAgICAgIFtpZF06IGFzeW5jIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT5cbiAgICAgICAgICAgIGF3YWl0IGl0ZXJhdG9yKHNjb3BlLCBwcmVmaXhlZFR5cGUsIGtleSwgaWQsIGl0ZW0sIGdyYXBoKSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gUHJvbWlzZTxSPj4pLFxuICAgIH0pLFxuICAgIHt9IGFzIFJlY29yZDxzdHJpbmcsIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gUHJvbWlzZTxSPj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc291cmNlU3RhdHMob2JqOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4pIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChjYXJyeSwgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgY29uc3QgW3Byb3ZpZGVyLCAuLi5yZXNvdXJjZVBhcnRzXSA9IGtleS5zcGxpdChcIl9cIik7XG4gICAgY29uc3Qgc2hvdWxkQmVUcmFja2VkID0gdGVsZW1ldHJ5QWxsb3dlZFByb3ZpZGVycy5pbmNsdWRlcyhwcm92aWRlcik7XG4gICAgY29uc3QgcHJvdmlkZXJLZXkgPSBzaG91bGRCZVRyYWNrZWQgPyBwcm92aWRlciA6IFwib3RoZXJcIjtcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBzaG91bGRCZVRyYWNrZWQgPyByZXNvdXJjZVBhcnRzLmpvaW4oXCJfXCIpIDogXCJvdGhlclwiO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNhcnJ5LFxuICAgICAgW3Byb3ZpZGVyS2V5XToge1xuICAgICAgICAuLi4oY2FycnlbcHJvdmlkZXJLZXldIHx8IHt9KSxcbiAgICAgICAgW3Jlc291cmNlTmFtZV06IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgsXG4gICAgICB9LFxuICAgIH07XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KTtcbn1cbiJdfQ==