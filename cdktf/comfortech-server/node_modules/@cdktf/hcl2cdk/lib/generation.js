"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gen = exports.moduleImports = exports.providerImports = exports.cdktfImport = exports.provider = exports.modules = exports.local = exports.variable = exports.output = exports.resource = exports.backendToExpression = exports.valueToTs = void 0;
const generator_1 = __importDefault(require("@babel/generator"));
const template_1 = __importDefault(require("@babel/template"));
const t = __importStar(require("@babel/types"));
const prettier_1 = __importDefault(require("prettier"));
const utils_1 = require("./utils");
const expressions_1 = require("./expressions");
const provider_generator_1 = require("@cdktf/provider-generator");
const provider_1 = require("./provider");
function getReference(graph, id) {
    utils_1.logger.debug(`Finding reference for ${id}`);
    const neighbors = graph.outNeighbors(id);
    if (neighbors.length > 0) {
        utils_1.logger.debug(`Found neighbors ${neighbors} for ${id}`);
        const edge = graph.directedEdge(id, neighbors[0]);
        if (edge) {
            utils_1.logger.debug(`Found first edge ${edge} for ${id}`);
            utils_1.logger.debug(`Returning reference ${graph.getEdgeAttribute(edge, "ref")}`);
            return graph.getEdgeAttribute(edge, "ref");
        }
        else {
            utils_1.logger.debug(`Found no edge for ${id}`);
            return undefined;
        }
    }
    else {
        return undefined;
    }
}
exports.valueToTs = async (scope, item, path, nodeIds, scopedIds = [], isModule = false) => {
    var _a;
    switch (typeof item) {
        case "string":
            const wrapInArray = expressions_1.isListExpression(item);
            const ast = expressions_1.referencesToAst(scope, item, await expressions_1.extractReferencesFromExpression(item, nodeIds, scopedIds), scopedIds);
            return wrapInArray ? t.arrayExpression([ast]) : ast;
        case "boolean":
            return t.booleanLiteral(item);
        case "number":
            return t.numericLiteral(item);
        case "object":
            if (item === undefined || item === null) {
                return t.nullLiteral();
            }
            const unwrappedItem = ((_a = provider_1.getBlockTypeAtPath(scope.providerSchema, path)) === null || _a === void 0 ? void 0 : _a.max_items) === 1 &&
                Array.isArray(item)
                ? item[0]
                : item;
            if (Array.isArray(unwrappedItem)) {
                return t.arrayExpression(await Promise.all(unwrappedItem.map((i) => exports.valueToTs(scope, i, path, nodeIds, scopedIds))));
            }
            return t.objectExpression((await Promise.all(Object.entries(unwrappedItem).map(async ([key, value]) => {
                var _a;
                if (key === "lifecycle" || value === undefined) {
                    return undefined;
                }
                if (key === "dynamic") {
                    const { for_each, ...others } = value;
                    const dynamicRef = Object.keys(others)[0];
                    return t.objectProperty(t.identifier(dynamicRef), t.arrayExpression());
                }
                const itemPath = `${path}.${key}`;
                const attribute = provider_1.getAttributeTypeAtPath(scope.providerSchema, itemPath);
                // Map type attributes must not be wrapped in arrays
                const isMapAttribute = Array.isArray(attribute === null || attribute === void 0 ? void 0 : attribute.type)
                    ? ((_a = attribute === null || attribute === void 0 ? void 0 : attribute.type) === null || _a === void 0 ? void 0 : _a[0]) === "map"
                    : false;
                const typeMetadata = provider_1.getTypeAtPath(scope.providerSchema, itemPath);
                const isSingleItemBlock = typeMetadata &&
                    typeof typeMetadata === "object" &&
                    typeMetadata.hasOwnProperty("max_items")
                    ? typeMetadata.max_items === 1
                    : false;
                const shouldBeArray = typeof value === "object" &&
                    !Array.isArray(value) &&
                    !isSingleItemBlock &&
                    !isMapAttribute &&
                    key !== "tags";
                const keepKeyName = !isModule && (key === "for_each" || !typeMetadata);
                return t.objectProperty(t.stringLiteral(keepKeyName ? key : provider_generator_1.escapeAttributeName(utils_1.camelCase(key))), shouldBeArray
                    ? t.arrayExpression([
                        await exports.valueToTs(scope, value, itemPath, nodeIds, scopedIds),
                    ])
                    : await exports.valueToTs(scope, value, itemPath, nodeIds, scopedIds));
            }))).filter((expr) => expr !== undefined));
    }
    throw new Error("Unsupported type " + item);
};
async function backendToExpression(scope, tf, nodeIds) {
    return (await Promise.all(Object.entries(tf || {}).map(async ([type, [config]]) => t.expressionStatement(t.newExpression(t.memberExpression(t.identifier("cdktf"), t.identifier(utils_1.pascalCase(`${type}Backend`))), [
        t.thisExpression(),
        t.objectExpression((await Promise.all(Object.entries(config).map(async ([property, value]) => t.objectProperty(t.identifier(utils_1.camelCase(property)), await exports.valueToTs(scope, value, "path-for-backends-can-be-ignored", nodeIds))))).reduce((carry, item) => [...carry, item], [])),
    ]))))).reduce((carry, item) => [...carry, item], []);
}
exports.backendToExpression = backendToExpression;
function addOverrideExpression(variable, path, value, explanatoryComment) {
    const ast = t.expressionStatement(t.callExpression(t.memberExpression(t.identifier(variable), t.identifier("addOverride")), [t.stringLiteral(path), value]));
    if (explanatoryComment) {
        t.addComment(ast, "leading", explanatoryComment);
    }
    return ast;
}
function addOverrideLogicalIdExpression(variable, logicalId) {
    const ast = t.expressionStatement(t.callExpression(t.memberExpression(t.identifier(variable), t.identifier("overrideLogicalId")), [t.stringLiteral(logicalId)]));
    t.addComment(ast, "leading", "This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.");
    return ast;
}
function getRemoteStateType(item) {
    const backendRecord = item.find((val) => val.backend);
    if (backendRecord) {
        const backend = backendRecord.backend;
        switch (backend) {
            case "remote":
                return "";
            case "etcdv3":
                return "_etcd_v3";
            default:
                return `_${backend}`;
        }
    }
    else {
        return "";
    }
}
function resourceType(provider, name, item) {
    switch (provider) {
        case "data.terraform":
            return `cdktf.data_terraform_${name.join("_")}${getRemoteStateType(item)}`;
        case "null":
            return `NullProvider.${name.join("_")}`;
        default:
            return `${provider}.${name.join("_")}`;
    }
}
function mapConfigPerResourceType(resource, item) {
    // Backends have a slightly different API
    if (resource.startsWith("cdktf.data_terraform_")) {
        return item.config;
    }
    return item;
}
async function resource(scope, type, key, id, item, graph) {
    const [provider, ...name] = type.split("_");
    const nodeIds = graph.nodes();
    const resource = resourceType(provider, name, item);
    if (!provider) {
        throw new Error(`Could not parse resource type '${type}'`);
    }
    const { for_each, count, ...config } = item[0];
    const mappedConfig = mapConfigPerResourceType(resource, config);
    const dynBlocks = expressions_1.extractDynamicBlocks(mappedConfig);
    const overrideReference = dynBlocks.length || count || for_each
        ? {
            start: 0,
            end: 0,
            referencee: {
                id: `${type}.${key}`,
                full: `${type}.${key}`,
            },
        }
        : undefined;
    const expressions = await asExpression(scope, resource, key, mappedConfig, nodeIds, false, false, getReference(graph, id) || overrideReference);
    const varName = expressions_1.variableName(scope, resource, key);
    const loopComment = `In most cases loops should be handled in the programming language context and 
not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
you need to keep this like it is.`;
    if (for_each) {
        const references = await expressions_1.extractReferencesFromExpression(for_each, nodeIds, ["each"]);
        expressions.push(addOverrideExpression(varName, "for_each", expressions_1.referencesToAst(scope, for_each, references), loopComment));
    }
    if (count) {
        if (typeof count === "number") {
            expressions.push(addOverrideExpression(varName, "count", await exports.valueToTs(scope, count, "path-for-counts-can-be-ignored", nodeIds), loopComment));
        }
        else {
            const references = await expressions_1.extractReferencesFromExpression(count, nodeIds, [
                "count",
            ]);
            expressions.push(addOverrideExpression(varName, "count", expressions_1.referencesToAst(scope, count, references), loopComment));
        }
    }
    // Check for dynamic blocks
    return [
        ...expressions,
        ...(await Promise.all(dynBlocks.map(async ({ path, for_each, content, scopedVar }) => {
            return addOverrideExpression(varName, path.substring(1), // The path starts with a dot that we don't want
            await exports.valueToTs(scope, {
                for_each,
                content,
            }, "path-for-dynamic-blocks-can-be-ignored", nodeIds, [scopedVar]), loopComment);
        }))),
    ];
}
exports.resource = resource;
async function asExpression(scope, type, name, config, nodeIds, isModuleImport, isProvider, reference) {
    const { lifecycle, providers, ...otherOptions } = config;
    const constructId = utils_1.uniqueId(scope.constructs, name);
    const overrideId = !isProvider && constructId !== name;
    const expression = t.newExpression(expressions_1.constructAst(scope, type, isModuleImport), [
        t.thisExpression(),
        t.stringLiteral(constructId),
        await exports.valueToTs(scope, {
            ...otherOptions,
            providers: providers && Object.keys(providers).length
                ? Object.entries(providers).map(([key, value]) => ({
                    moduleAlias: key,
                    provider: value,
                }))
                : undefined,
        }, `${type}`, nodeIds, [], isModuleImport),
    ]);
    const statements = [];
    const varName = reference
        ? expressions_1.referenceToVariableName(scope, reference)
        : expressions_1.variableName(scope, type, name);
    if (reference || lifecycle || overrideId) {
        statements.push(t.variableDeclaration("const", [
            t.variableDeclarator(t.identifier(varName), expression),
        ]));
    }
    else {
        statements.push(t.expressionStatement(expression));
    }
    if (lifecycle) {
        statements.push(addOverrideExpression(varName, "lifecycle", await exports.valueToTs(scope, lifecycle, "path-for-lifecycle-blocks-can-be-ignored", nodeIds)));
    }
    if (overrideId) {
        statements.push(addOverrideLogicalIdExpression(varName, name));
    }
    return statements;
}
async function output(scope, key, _id, item, graph) {
    const nodeIds = graph.nodes();
    const [{ value, description, sensitive }] = item;
    return asExpression(scope, "cdktf.TerraformOutput", key, {
        value,
        description,
        sensitive,
    }, nodeIds, false, false);
}
exports.output = output;
async function variable(scope, key, id, item, graph) {
    // We don't handle type information right now
    const [{ type, ...props }] = item;
    const nodeIds = graph.nodes();
    if (!getReference(graph, id)) {
        return [];
    }
    return asExpression(scope, "cdktf.TerraformVariable", key, props, nodeIds, false, false, getReference(graph, id));
}
exports.variable = variable;
async function local(scope, key, id, item, graph) {
    utils_1.logger.debug(`Initializing local resource ${key} with id ${id}`);
    const nodeIds = graph.nodes();
    if (!getReference(graph, id)) {
        utils_1.logger.debug(`No reference found for ${key}`);
        return [];
    }
    return [
        t.variableDeclaration("const", [
            t.variableDeclarator(t.identifier(expressions_1.variableName(scope, "local", key)), await exports.valueToTs(scope, item, "path-for-local-blocks-can-be-ignored", nodeIds)),
        ]),
    ];
}
exports.local = local;
async function modules(scope, key, id, item, graph) {
    const [{ source, version, ...props }] = item;
    const nodeIds = graph.nodes();
    const moduleConstraint = new provider_generator_1.TerraformModuleConstraint(source);
    return asExpression(scope, moduleConstraint.className, key, props, nodeIds, true, false, getReference(graph, id));
}
exports.modules = modules;
async function provider(scope, key, id, item, graph) {
    const nodeIds = graph.nodes();
    const { version, ...props } = item;
    const importKey = key === "null" ? "NullProvider" : key;
    return asExpression(scope, `${importKey}.${utils_1.pascalCase(key)}Provider`, key, props, nodeIds, false, true, getReference(graph, id));
}
exports.provider = provider;
exports.cdktfImport = template_1.default(`import * as cdktf from "cdktf"`)();
exports.providerImports = (providers) => providers.map((providerName) => {
    const parts = providerName.split("/");
    const name = parts.length > 1 ? parts[1] : parts[0];
    const importName = name === "null" ? "NullProvider" : name;
    return template_1.default(`import * as ${importName} from "./.gen/providers/${name.replace("./", "")}"`)();
});
exports.moduleImports = (modules) => {
    const uniqueModules = new Set();
    Object.values(modules || {}).map(([module]) => uniqueModules.add(module.source));
    const imports = [];
    uniqueModules.forEach((m) => {
        const moduleConstraint = new provider_generator_1.TerraformModuleConstraint(m);
        imports.push(template_1.default.ast(`import * as ${moduleConstraint.className} from "./.gen/modules/${moduleConstraint.fileName}"`));
    });
    return imports;
};
async function gen(statements) {
    utils_1.logger.debug(`Generating code for ${JSON.stringify(statements, null, 2)}`);
    const code = prettier_1.default.format(generator_1.default(t.program(statements)).code, {
        parser: "babel",
    });
    utils_1.logger.debug(`Generated code:\n${code}`);
    return code;
}
exports.gen = gen;
//# sourceMappingURL=data:application/json;base64,