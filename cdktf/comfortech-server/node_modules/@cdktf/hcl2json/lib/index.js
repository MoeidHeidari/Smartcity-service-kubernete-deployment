"use strict";
// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference lib="dom" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReferencesInExpression = exports.convertFiles = exports.parse = void 0;
// Inspired by
// https://github.com/ts-terraform/ts-terraform
// https://github.com/aaronpowell/webpack-golang-wasm-async-loader
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const deepmerge_1 = require("./deepmerge");
const zlib_1 = require("zlib");
// eslint-disable-next-line @typescript-eslint/ban-types
const jsRoot = {};
function sleep() {
    return new Promise((resolve) => {
        setTimeout(resolve, 0);
    });
}
function goBridge(getBytes) {
    let ready = false;
    async function init() {
        await Promise.resolve().then(() => __importStar(require(`../wasm/wasm_exec.js`)));
        const go = new global.Go();
        const bytes = await getBytes;
        const result = await WebAssembly.instantiate(bytes, go.importObject);
        global.__parse_terraform_config_wasm__ = jsRoot;
        void go.run(result.instance);
        ready = true;
    }
    init().catch((error) => {
        throw error;
    });
    const proxy = new Proxy({}, {
        get: (_, key) => {
            return async (...args) => {
                while (!ready) {
                    await sleep();
                }
                if (!(key in jsRoot)) {
                    throw new Error(`There is nothing defined with the name "${key.toString()}"`);
                }
                if (typeof jsRoot[key] !== "function") {
                    return jsRoot[key];
                }
                return new Promise((resolve, reject) => {
                    const cb = (err, ...msg) => 
                    // @ts-ignore
                    err ? reject(new Error(err)) : resolve(...msg);
                    const run = () => {
                        jsRoot[key].apply(undefined, [...args, cb]);
                    };
                    run();
                });
            };
        },
    });
    return proxy;
}
const loadWasm = async () => {
    return zlib_1.gunzipSync(await fs_extra_1.default.readFile(path_1.default.join(__dirname, "..", "main.wasm.gz")));
};
const wasm = goBridge(loadWasm());
async function parse(filename, contents) {
    const res = await wasm.parse(filename, contents);
    return JSON.parse(res);
}
exports.parse = parse;
async function convertFiles(workingDirectory) {
    let tfFileContents = "";
    const tfJSONFileContents = [];
    for (const file of fs_extra_1.default.readdirSync(workingDirectory)) {
        const filePath = path_1.default.resolve(workingDirectory, file);
        if (!fs_extra_1.default.lstatSync(filePath).isDirectory()) {
            if (file.match(/\.tf$/)) {
                tfFileContents += fs_extra_1.default.readFileSync(filePath, "utf-8");
                tfFileContents += "\n";
            }
            else if (file.match(/\.tf\.json$/)) {
                tfJSONFileContents.push(JSON.parse(fs_extra_1.default.readFileSync(filePath, "utf-8")));
            }
        }
    }
    if (tfFileContents === "" && tfJSONFileContents === []) {
        console.error(`No '.tf' or '.tf.json' files found in ${workingDirectory}`);
        return;
    }
    return deepmerge_1.deepMerge(await parse("hcl2json.tf", tfFileContents), ...tfJSONFileContents);
}
exports.convertFiles = convertFiles;
function traversalToReference(input, traversal) {
    const lines = input.split("\n");
    const lineLength = lines.map((line) => line.length);
    function position(marker) {
        const newlineChar = 1;
        return (lineLength
            .slice(0, marker.Line)
            .reduce((a, b) => a + b + newlineChar, lines.length === 1 ? 0 : -1) +
            marker.Column);
    }
    // We do not want to include property access through brackets here
    // although it is technically a traversal / reference
    function onlyTakeTraversalPartsUntilFirstBracketPropertyAccess(traversals) {
        let filtered = [];
        for (const traversal of traversals) {
            if ("Name" in traversal) {
                filtered.push(traversal);
            }
            else {
                // We reached a bracket, stop
                return filtered;
            }
        }
        return filtered;
    }
    const filteredParts = onlyTakeTraversalPartsUntilFirstBracketPropertyAccess(traversal.Traversal);
    const startPosition = position(filteredParts[0].SrcRange.Start);
    const endPosition = position(filteredParts[filteredParts.length - 1].SrcRange.End);
    return {
        value: input.slice(startPosition, endPosition),
        startPosition,
        endPosition,
    };
}
function findAllReferencesInAst(input, entry) {
    if (!entry) {
        return [];
    }
    // This traversal is accessing a function call e.g. element(var.foo, 0).id
    // Or this is a splat operation var.foo.*
    if ("Source" in entry) {
        return findAllReferencesInAst(input, entry.Source);
    }
    // a.b.c.d is a traversal
    if ("Traversal" in entry) {
        return [traversalToReference(input, entry)];
    }
    // Multiple terraform parts in an expression
    if ("Parts" in entry) {
        return entry.Parts.flatMap((part) => findAllReferencesInAst(input, part));
    }
    // ${} is an embedded expression
    if ("Wrapped" in entry) {
        return findAllReferencesInAst(input, entry.Wrapped);
    }
    // element(var.foo, 0) is a function call
    if ("Args" in entry) {
        return entry.Args.flatMap((arg) => findAllReferencesInAst(input, arg));
    }
    // var.foo + var.bar is an arithmetic expression
    if ("LHS" in entry) {
        return [
            ...findAllReferencesInAst(input, entry.LHS),
            ...findAllReferencesInAst(input, entry.RHS),
        ];
    }
    // var.foo > 3 ? var.bar : var.baz is a condition expression
    if ("Condition" in entry) {
        return [
            ...findAllReferencesInAst(input, entry.Condition),
            ...findAllReferencesInAst(input, entry.TrueResult),
            ...findAllReferencesInAst(input, entry.FalseResult),
        ];
    }
    // for name, user in var.users : user.role => name... is a for expression
    if ("CondExpr" in entry) {
        return [
            ...findAllReferencesInAst(input, entry.CollExpr),
            ...findAllReferencesInAst(input, entry.CondExpr),
        ];
    }
    // var.foo["bar"] is a bracket property access expression
    if ("Key" in entry) {
        return [
            ...findAllReferencesInAst(input, entry.Collection),
            ...findAllReferencesInAst(input, entry.Key),
        ];
    }
    // [var.foo, var.bar] is a list expression
    if ("Exprs" in entry) {
        return (entry.Exprs || []).flatMap((expr) => findAllReferencesInAst(input, expr));
    }
    return [];
}
async function getReferencesInExpression(filename, expression) {
    const res = await wasm.getReferencesInExpression(filename, JSON.stringify(expression));
    const ast = JSON.parse(res);
    if (!ast) {
        return [];
    }
    return findAllReferencesInAst(expression, ast);
}
exports.getReferencesInExpression = getReferencesInExpression;
//# sourceMappingURL=data:application/json;base64,