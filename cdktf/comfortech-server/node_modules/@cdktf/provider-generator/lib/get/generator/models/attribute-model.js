"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeModel = exports.escapeAttributeName = void 0;
const config_1 = require("../../../config");
function escapeAttributeName(name) {
    // `self` and `build` doesn't work in as property name in Python
    if (name === "self" || name === "build")
        return `${name}Attribute`;
    // jsii can't handle `getFoo` properties, since it's incompatible with Java
    if (name.match(/^get[A-Za-z]+/))
        return name.replace("get", "fetch");
    // `equals` is a prohibited name in jsii
    if (name === "equals")
        return "equalTo";
    // `node` is already used by the Constructs base class
    if (name === "node")
        return "nodeAttribute";
    // `System` shadows built-in types in CSharp (see #1420)
    if (name === "system")
        return "systemAttribute";
    // `tfResourceType` is already used by resources to distinguish between different resource types
    if (name === "tfResourceType")
        return `${name}Attribute`;
    return name;
}
exports.escapeAttributeName = escapeAttributeName;
class AttributeModel {
    constructor(options) {
        this.storageName = options.storageName;
        this._name = options.name;
        this.type = options.type;
        this.optional = options.optional;
        this.computed = options.computed;
        this.terraformName = options.terraformName;
        this.terraformFullName = options.terraformFullName;
        this._description = options.description;
        this.provider = options.provider;
        this.required = options.required;
    }
    get typeDefinition() {
        const optional = this.optional ? "?" : "";
        return `${this.name}${optional}: ${this.type.name}`;
    }
    get isAssignable() {
        return this.required || this.optional;
    }
    get isOptional() {
        return this.optional;
    }
    get isRequired() {
        return this.required;
    }
    get isTokenizable() {
        return this.type.isTokenizable;
    }
    get isProvider() {
        return this.provider;
    }
    get getterType() {
        let getterType = { _type: "plain" };
        if (this.isProvider) {
            return getterType;
        }
        if (
        // Complex Computed List Map
        !this.isAssignable &&
            this.type.isComputedComplex &&
            this.type.isList &&
            this.type.isMap) {
            getterType = {
                _type: "stored_class",
            };
        }
        else if (
        // Complex List/Set
        this.type.isComplex &&
            (this.type.isList || this.type.isSet)) {
            getterType = {
                _type: "stored_class",
            };
        }
        else if (
        // Complex Map
        this.type.isComplex &&
            this.type.isMap) {
            getterType = {
                _type: "stored_class",
            };
        }
        else if (
        // Computed Map
        this.type.isComputed &&
            !this.isAssignable &&
            this.type.isMap) {
            getterType = {
                _type: "stored_class",
            };
        }
        if (this.type.isSingleItem) {
            getterType = { _type: "stored_class" };
        }
        if (this.type.isNested) {
            getterType = { _type: "stored_class" };
        }
        return getterType;
    }
    get mapType() {
        const type = this.type;
        if (type.isStringMap) {
            return `string`;
        }
        if (type.isNumberMap) {
            return `number`;
        }
        if (type.isBooleanMap) {
            return `boolean`;
        }
        if (type.isAnyMap) {
            return `any`;
        }
        config_1.logger.debug(`The attribute isn't implemented yet: ${JSON.stringify(this)}`);
        return `any`;
    }
    get mapReturnType() {
        const mapDataType = this.mapType;
        if (!this.isTokenizable) {
            return `${mapDataType} | cdktf.IResolvable`;
        }
        return mapDataType;
    }
    get isStored() {
        return this.isAssignable;
    }
    get setterType() {
        if (!this.isStored) {
            return { _type: "none" };
        }
        if (this.getterType._type === "stored_class") {
            return {
                _type: "stored_class",
                type: this.type.name,
            };
        }
        return {
            _type: "set",
            type: `${this.type.name}${this.isProvider ? " | undefined" : ""}`,
        };
    }
    get name() {
        return AttributeModel.escapeName(this._name);
    }
    static escapeName(name) {
        return escapeAttributeName(name);
    }
    get description() {
        var _a;
        return (_a = this._description) === null || _a === void 0 ? void 0 : _a.replace(/(\*\/)/gi, `*\\/`).replace(/'''/gi, "```");
    }
    getReferencedTypes(isConfigStruct) {
        const attTypeStruct = this.type.struct;
        if (!attTypeStruct) {
            return undefined;
        }
        const types = [];
        if (this.isAssignable) {
            types.push(this.type.typeName);
            types.push(attTypeStruct.mapperName);
        }
        if (!attTypeStruct.isSingleItem &&
            (attTypeStruct.nestingMode === "list" ||
                attTypeStruct.nestingMode === "set")) {
            types.push(attTypeStruct.listName);
        }
        else if (attTypeStruct.nestingMode === "map") {
            types.push(attTypeStruct.mapName);
        }
        else if (!isConfigStruct) {
            types.push(attTypeStruct.outputReferenceName);
        }
        return types;
    }
}
exports.AttributeModel = AttributeModel;
//# sourceMappingURL=data:application/json;base64,