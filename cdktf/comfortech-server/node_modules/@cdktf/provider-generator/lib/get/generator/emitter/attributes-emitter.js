"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributesEmitter = void 0;
const models_1 = require("../models");
const util_1 = require("../../../util");
const custom_defaults_1 = require("../custom-defaults");
const config_1 = require("../../../config");
function titleCase(value) {
    return value[0].toUpperCase() + value.slice(1);
}
class AttributesEmitter {
    constructor(code) {
        this.code = code;
    }
    emit(att, escapeReset, escapeInput) {
        this.code.line();
        this.code.line(`// ${att.terraformName} - computed: ${att.computed}, optional: ${att.isOptional}, required: ${att.isRequired}`);
        const isStored = att.isStored;
        const hasResetMethod = isStored && !att.isRequired && att.setterType._type !== "none";
        const hasInputMethod = isStored && att.setterType._type !== "none";
        const getterType = att.getterType;
        if (getterType._type === "stored_class") {
            this.code.line(`private ${att.storageName} = ${this.storedClassInit(att)};`);
        }
        else if (isStored) {
            this.code.line(`private ${att.storageName}?: ${att.type.name}; `);
        }
        switch (getterType._type) {
            case "plain":
                this.code.openBlock(`public get ${att.name}()`);
                this.code.line(`return ${this.determineGetAttCall(att)};`);
                this.code.closeBlock();
                break;
            case "args":
                this.code.openBlock(`public ${att.name}(${getterType.args})${getterType.returnType ? ": " + getterType.returnType : ""}`);
                this.code.line(`return ${getterType.returnStatement};`);
                this.code.closeBlock();
                break;
            case "stored_class":
                this.code.openBlock(`public get ${att.name}()`);
                this.code.line(`return this.${att.storageName};`);
                this.code.closeBlock();
                break;
        }
        const setterType = att.setterType;
        switch (setterType._type) {
            case "set":
                this.code.openBlock(`public set ${att.name}(value: ${setterType.type})`);
                this.code.line(`this.${att.storageName} = value;`);
                this.code.closeBlock();
                break;
            case "put":
                this.code.openBlock(`public put${titleCase(att.name)}(value: ${setterType.type})`);
                this.code.line(`this.${att.storageName} = value;`);
                this.code.closeBlock();
                break;
            case "stored_class":
                this.code.openBlock(`public put${titleCase(att.name)}(value: ${setterType.type})`);
                this.code.line(`this.${att.storageName}.internalValue = value;`);
                this.code.closeBlock();
                break;
        }
        if (hasResetMethod) {
            this.code.openBlock(`public ${this.getResetName(att.name, escapeReset)}()`);
            if (setterType._type === "stored_class") {
                this.code.line(`this.${att.storageName}.internalValue = undefined;`);
            }
            else {
                this.code.line(`this.${att.storageName} = undefined;`);
            }
            this.code.closeBlock();
        }
        if (hasInputMethod) {
            this.code.line(`// Temporarily expose input value. Use with caution.`);
            this.code.openBlock(`public get ${this.getInputName(att, escapeInput)}()`);
            if (setterType._type === "stored_class") {
                this.code.line(`return this.${att.storageName}.internalValue;`);
            }
            else {
                this.code.line(`return this.${att.storageName};`);
            }
            this.code.closeBlock();
        }
    }
    // returns an invocation of a stored class, e.g. 'new DeplotmentMetadataOutputReference(this, "metadata")'
    storedClassInit(att) {
        if ((att.type.isList || att.type.isSet) && !att.type.isSingleItem) {
            // list/set
            if (att.type.struct) {
                return `new ${att.type.struct.name}List(this, "${att.terraformName}", ${att.type.isSet})`;
            }
            else {
                return `new ${att.type.name}List(this, "${att.terraformName}", ${att.type.isSet})`;
            }
        }
        else if (att.type.isMap) {
            if (att.type.struct) {
                return `new ${att.type.struct.name}Map(this, "${att.terraformName}")`;
            }
            else {
                return `new ${att.type.name}(this, "${att.terraformName}")`;
            }
        }
        else {
            if (att.type.name.includes("IResolvable")) {
                return `new ${att.type.innerType}OutputReference(this, "${att.terraformName}")`;
            }
            else {
                return `new ${att.type.name}OutputReference(this, "${att.terraformName}")`;
            }
        }
    }
    determineGetAttCall(att) {
        if (att.isProvider) {
            return `this.${att.storageName}`;
        }
        const type = att.type;
        if (type.isString) {
            return `this.getStringAttribute('${att.terraformName}')`;
        }
        if (type.isStringList) {
            return `this.getListAttribute('${att.terraformName}')`;
        }
        if (type.isNumberList) {
            return `this.getNumberListAttribute('${att.terraformName}')`;
        }
        if (type.isStringSet) {
            return `cdktf.Fn.tolist(this.getListAttribute('${att.terraformName}'))`;
        }
        if (type.isNumberSet) {
            return `cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('${att.terraformName}')))`;
        }
        if (type.isNumber) {
            return `this.getNumberAttribute('${att.terraformName}')`;
        }
        if (type.isBoolean) {
            return `this.getBooleanAttribute('${att.terraformName}')`;
        }
        if (type.isMap) {
            return `this.get${util_1.uppercaseFirst(att.mapType)}MapAttribute('${att.terraformName}')`;
        }
        config_1.logger.debug(`The attribute isn't implemented yet: ${JSON.stringify(att)}`);
        this.code.line(`// Getting the computed value is not yet implemented`);
        if (type.isSet) {
            // Token.asAny is required because tolist returns an Array encoded token which the listMapper
            // would try to map over when this is passed to another resource. With Token.asAny() it is left
            // as is by the listMapper and is later properly resolved to a reference
            // (this only works in TypeScript currently, same as for referencing lists
            // [see "interpolationForAttribute(...)" further below])
            return `cdktf.Token.asAny(cdktf.Fn.tolist(this.interpolationForAttribute('${att.terraformName}')))`;
        }
        return `this.interpolationForAttribute('${att.terraformName}')`;
    }
    needsInputEscape(att, attributes) {
        return (attributes.find((a) => a.terraformName.match(`^${att.terraformName}_input$`)) instanceof models_1.AttributeModel);
    }
    getInputName(att, escape) {
        if (escape) {
            return `${att.name}TfInput`;
        }
        else {
            return `${att.name}Input`;
        }
    }
    needsResetEscape(att, attributes) {
        return (attributes.find((a) => a.terraformName.match(`^reset_${att.terraformName}$`)) instanceof models_1.AttributeModel);
    }
    getResetName(name, escape) {
        if (!name)
            return name;
        if (escape) {
            return `resetTf${titleCase(name)}`;
        }
        else {
            return `reset${titleCase(name)}`;
        }
    }
    emitToTerraform(att, isStruct) {
        var _a, _b;
        const type = att.type;
        const context = isStruct ? "struct!" : "this";
        const name = isStruct ? att.name : att.storageName;
        const customDefault = custom_defaults_1.CUSTOM_DEFAULTS[att.terraformFullName];
        const varReference = `${context}.${name}${!isStruct &&
            type.isComplex &&
            !att.isProvider &&
            (((_a = type.struct) === null || _a === void 0 ? void 0 : _a.isClass) || att.getterType._type === "stored_class")
            ? ".internalValue"
            : ""}`;
        const defaultCheck = customDefault !== undefined
            ? `${varReference} === undefined ? ${customDefault} : `
            : "";
        const isBlockType = att.type.isBlock;
        switch (true) {
            case type.isSet && type.isMap:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(cdktf.hashMapper(cdktf.${att.mapType}ToTerraform), ${isBlockType})(${varReference}),`);
                break;
            case type.isList && type.isMap:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(cdktf.hashMapper(cdktf.${att.mapType}ToTerraform), ${isBlockType})(${varReference}),`);
                break;
            case type.isStringSet || type.isNumberSet || type.isBooleanSet:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(cdktf.${util_1.downcaseFirst(type.innerType)}ToTerraform, ${isBlockType})(${varReference}),`);
                break;
            case type.isStringList || type.isNumberList || type.isBooleanList:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(cdktf.${util_1.downcaseFirst(type.innerType)}ToTerraform, ${isBlockType})(${varReference}),`);
                break;
            case type.isSet && !type.isSingleItem:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(${util_1.downcaseFirst(type.innerType)}ToTerraform, ${isBlockType})(${varReference}),`);
                break;
            case type.isList && !type.isSingleItem:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.listMapper(${util_1.downcaseFirst(type.innerType)}ToTerraform, ${isBlockType})(${varReference}),`);
                break;
            case type.isMap:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.hashMapper(cdktf.${att.mapType}ToTerraform)(${varReference}),`);
                break;
            case type.isString:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.stringToTerraform(${varReference}),`);
                break;
            case type.isNumber:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.numberToTerraform(${varReference}),`);
                break;
            case type.isBoolean:
                this.code.line(`${att.terraformName}: ${defaultCheck}cdktf.booleanToTerraform(${varReference}),`);
                break;
            case type.isComplex && !((_b = type.struct) === null || _b === void 0 ? void 0 : _b.isClass) && !type.isSingleItem:
                this.code.line(`${att.terraformName}: ${defaultCheck}${util_1.downcaseFirst(type.struct.name)}ToTerraform(${varReference}),`);
                break;
            default:
                this.code.line(`${att.terraformName}: ${defaultCheck}${util_1.downcaseFirst(type.name)}ToTerraform(${varReference}),`);
                break;
        }
    }
}
exports.AttributesEmitter = AttributesEmitter;
//# sourceMappingURL=data:application/json;base64,