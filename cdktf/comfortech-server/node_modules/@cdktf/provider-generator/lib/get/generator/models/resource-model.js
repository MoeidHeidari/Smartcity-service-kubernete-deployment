"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceModel = exports.STRUCT_SHARDING_THRESHOLD = void 0;
const codemaker_1 = require("codemaker");
const path_1 = __importDefault(require("path"));
const provider_namespaces_1 = require("../constants/provider-namespaces");
const struct_1 = require("./struct");
// Limit is 1200 to prevent stack size error.
// Could increase now that calculation is more accurate;
// however, probably better to have smaller
exports.STRUCT_SHARDING_THRESHOLD = 400;
class ResourceModel {
    constructor(options) {
        this.recursiveAttributePaths = {};
        this.className = options.className;
        this.filePath = options.filePath;
        this.terraformType = options.terraformType;
        this.baseName = options.baseName;
        this.attributes = options.attributes;
        this.schema = options.schema;
        this.provider = options.provider;
        this.fileName = options.fileName;
        this._structs = options.structs;
        this.terraformSchemaType = options.terraformSchemaType;
        this.configStructName = options.configStructName;
        this.dependencies = [
            `import { Construct } from 'constructs';`,
            `import * as cdktf from 'cdktf';`,
        ];
        this.structsRequireSharding =
            this._structs.reduce((partialSum, s) => partialSum + s.exportCount, 0) >
                exports.STRUCT_SHARDING_THRESHOLD;
    }
    get structs() {
        return [this.configStruct, ...this._structs];
    }
    get configStruct() {
        return new struct_1.ConfigStruct(this.configStructName, this.attributes);
    }
    get synthesizableAttributes() {
        return this.configStruct.assignableAttributes;
    }
    get importStatements() {
        return this.dependencies;
    }
    get schemaAsJson() {
        return this.escapeSchema(JSON.stringify(this.schema, undefined, 2));
    }
    get linkToDocs() {
        if (this.isProvider)
            return `https://www.terraform.io/docs/providers/${this.provider}`;
        return `https://www.terraform.io/docs/providers/${this.provider}/${this.isDataSource ? "d" : "r"}/${this.terraformDocName}`;
    }
    get isProvider() {
        return this.terraformSchemaType === "provider";
    }
    get namespace() {
        return provider_namespaces_1.getResourceNamespace(this.provider, this.baseName);
    }
    get isDataSource() {
        return this.terraformSchemaType === "data_source";
    }
    get parentClassName() {
        return this.isProvider
            ? "TerraformProvider"
            : this.isDataSource
                ? "TerraformDataSource"
                : "TerraformResource";
    }
    get terraformResourceType() {
        return this.isProvider
            ? this.provider
            : this.isDataSource
                ? this.terraformType.replace(/^data_/, "")
                : this.terraformType;
    }
    get terraformDocName() {
        return codemaker_1.toSnakeCase(this.terraformResourceType.replace(new RegExp(`^${this.provider}_`, "i"), ""));
    }
    get referencedTypes() {
        return this.configStruct.referencedTypes;
    }
    get structsFolderName() {
        return `${path_1.default.basename(this.fileName, ".ts")}-structs`;
    }
    get structsFolderPath() {
        const basePath = this.filePath.split("/").slice(0, -1).join("/");
        if (this.namespace) {
            return path_1.default.join(basePath, this.namespace.name, this.structsFolderName);
        }
        else {
            return path_1.default.join(basePath, this.structsFolderName);
        }
    }
    escapeSchema(schema) {
        return schema.replace(/(\*\/)/gi, `*\\/`);
    }
}
exports.ResourceModel = ResourceModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNvdXJjZS1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx5Q0FBd0M7QUFDeEMsZ0RBQXdCO0FBQ3hCLDBFQUcwQztBQUcxQyxxQ0FBZ0Q7QUFFaEQsNkNBQTZDO0FBQzdDLHdEQUF3RDtBQUN4RCwyQ0FBMkM7QUFDOUIsUUFBQSx5QkFBeUIsR0FBRyxHQUFHLENBQUM7QUFpQjdDLE1BQWEsYUFBYTtJQW1CeEIsWUFBWSxPQUE2QjtRQUZsQyw0QkFBdUIsR0FBNEMsRUFBRSxDQUFDO1FBRzNFLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUM7UUFDdkQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsWUFBWSxHQUFHO1lBQ2xCLHlDQUF5QztZQUN6QyxpQ0FBaUM7U0FDbEMsQ0FBQztRQUVGLElBQUksQ0FBQyxzQkFB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QUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE9BQU8sY0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDMUU7YUFBTTtZQUNMLE9BQU8sY0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRU8sWUFBWSxDQUFDLE1BQWM7UUFDakMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0Y7QUEvSEQsc0NBK0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9TbmFrZUNhc2UgfSBmcm9tIFwiY29kZW1ha2VyXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHtcbiAgUmVzb3VyY2VOYW1lc3BhY2UsXG4gIGdldFJlc291cmNlTmFtZXNwYWNlLFxufSBmcm9tIFwiLi4vY29uc3RhbnRzL3Byb3ZpZGVyLW5hbWVzcGFjZXNcIjtcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuLi9wcm92aWRlci1zY2hlbWFcIjtcbmltcG9ydCB7IEF0dHJpYnV0ZU1vZGVsIH0gZnJvbSBcIi4vYXR0cmlidXRlLW1vZGVsXCI7XG5pbXBvcnQgeyBTdHJ1Y3QsIENvbmZpZ1N0cnVjdCB9IGZyb20gXCIuL3N0cnVjdFwiO1xuXG4vLyBMaW1pdCBpcyAxMjAwIHRvIHByZXZlbnQgc3RhY2sgc2l6ZSBlcnJvci5cbi8vIENvdWxkIGluY3JlYXNlIG5vdyB0aGF0IGNhbGN1bGF0aW9uIGlzIG1vcmUgYWNjdXJhdGU7XG4vLyBob3dldmVyLCBwcm9iYWJseSBiZXR0ZXIgdG8gaGF2ZSBzbWFsbGVyXG5leHBvcnQgY29uc3QgU1RSVUNUX1NIQVJESU5HX1RIUkVTSE9MRCA9IDQwMDtcblxuaW50ZXJmYWNlIFJlc291cmNlTW9kZWxPcHRpb25zIHtcbiAgdGVycmFmb3JtVHlwZTogc3RyaW5nO1xuICBjbGFzc05hbWU6IHN0cmluZztcbiAgYmFzZU5hbWU6IHN0cmluZztcbiAgZmlsZU5hbWU6IHN0cmluZztcbiAgZmlsZVBhdGg6IHN0cmluZztcbiAgYXR0cmlidXRlczogQXR0cmlidXRlTW9kZWxbXTtcbiAgc3RydWN0czogU3RydWN0W107XG4gIHByb3ZpZGVyOiBzdHJpbmc7XG4gIHNjaGVtYTogU2NoZW1hO1xuICB0ZXJyYWZvcm1TY2hlbWFUeXBlOiBzdHJpbmc7XG4gIGNvbmZpZ1N0cnVjdE5hbWU6IHN0cmluZztcbn1cblxudHlwZSBEZWZpbml0aW9uUGF0aCA9IHN0cmluZztcbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1vZGVsIHtcbiAgcHVibGljIGNsYXNzTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgZmlsZVBhdGg6IHN0cmluZztcbiAgcHVibGljIHRlcnJhZm9ybVR5cGU6IHN0cmluZztcbiAgcHVibGljIGJhc2VOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBwcm92aWRlcjogc3RyaW5nO1xuICBwdWJsaWMgcHJvdmlkZXJWZXJzaW9uQ29uc3RyYWludD86IHN0cmluZztcbiAgcHVibGljIHByb3ZpZGVyVmVyc2lvbj86IHN0cmluZztcbiAgcHVibGljIHRlcnJhZm9ybVByb3ZpZGVyU291cmNlPzogc3RyaW5nO1xuICBwdWJsaWMgZmlsZU5hbWU6IHN0cmluZztcbiAgcHVibGljIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZU1vZGVsW107XG4gIHB1YmxpYyBzY2hlbWE6IFNjaGVtYTtcbiAgcHJpdmF0ZSBfc3RydWN0czogU3RydWN0W107XG4gIHByaXZhdGUgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSB0ZXJyYWZvcm1TY2hlbWFUeXBlOiBzdHJpbmc7XG4gIHByaXZhdGUgY29uZmlnU3RydWN0TmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgc3RydWN0c1JlcXVpcmVTaGFyZGluZzogYm9vbGVhbjtcbiAgcHVibGljIHJlY3Vyc2l2ZUF0dHJpYnV0ZVBhdGhzOiB7IFt1c2FnZVBhdGg6IHN0cmluZ106IERlZmluaXRpb25QYXRoIH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBSZXNvdXJjZU1vZGVsT3B0aW9ucykge1xuICAgIHRoaXMuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgdGhpcy5maWxlUGF0aCA9IG9wdGlvbnMuZmlsZVBhdGg7XG4gICAgdGhpcy50ZXJyYWZvcm1UeXBlID0gb3B0aW9ucy50ZXJyYWZvcm1UeXBlO1xuICAgIHRoaXMuYmFzZU5hbWUgPSBvcHRpb25zLmJhc2VOYW1lO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcztcbiAgICB0aGlzLnNjaGVtYSA9IG9wdGlvbnMuc2NoZW1hO1xuICAgIHRoaXMucHJvdmlkZXIgPSBvcHRpb25zLnByb3ZpZGVyO1xuICAgIHRoaXMuZmlsZU5hbWUgPSBvcHRpb25zLmZpbGVOYW1lO1xuICAgIHRoaXMuX3N0cnVjdHMgPSBvcHRpb25zLnN0cnVjdHM7XG4gICAgdGhpcy50ZXJyYWZvcm1TY2hlbWFUeXBlID0gb3B0aW9ucy50ZXJyYWZvcm1TY2hlbWFUeXBlO1xuICAgIHRoaXMuY29uZmlnU3RydWN0TmFtZSA9IG9wdGlvbnMuY29uZmlnU3RydWN0TmFtZTtcbiAgICB0aGlzLmRlcGVuZGVuY2llcyA9IFtcbiAgICAgIGBpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztgLFxuICAgICAgYGltcG9ydCAqIGFzIGNka3RmIGZyb20gJ2Nka3RmJztgLFxuICAgIF07XG5cbiAgICB0aGlzLnN0cnVjdHNSZXF1aXJlU2hhcmRpbmcgPVxuICAgICAgdGhpcy5fc3RydWN0cy5yZWR1Y2UoKHBhcnRpYWxTdW0sIHMpID0+IHBhcnRpYWxTdW0gKyBzLmV4cG9ydENvdW50LCAwKSA+XG4gICAgICBTVFJVQ1RfU0hBUkRJTkdfVEhSRVNIT0xEO1xuICB9XG5cbiAgcHVibGljIGdldCBzdHJ1Y3RzKCk6IFN0cnVjdFtdIHtcbiAgICByZXR1cm4gW3RoaXMuY29uZmlnU3RydWN0LCAuLi50aGlzLl9zdHJ1Y3RzXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29uZmlnU3RydWN0KCkge1xuICAgIHJldHVybiBuZXcgQ29uZmlnU3RydWN0KHRoaXMuY29uZmlnU3RydWN0TmFtZSwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3ludGhlc2l6YWJsZUF0dHJpYnV0ZXMoKTogQXR0cmlidXRlTW9kZWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnU3RydWN0LmFzc2lnbmFibGVBdHRyaWJ1dGVzO1xuICB9XG5cbiAgcHVibGljIGdldCBpbXBvcnRTdGF0ZW1lbnRzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5kZXBlbmRlbmNpZXM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNjaGVtYUFzSnNvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVzY2FwZVNjaGVtYShKU09OLnN0cmluZ2lmeSh0aGlzLnNjaGVtYSwgdW5kZWZpbmVkLCAyKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGxpbmtUb0RvY3MoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5pc1Byb3ZpZGVyKVxuICAgICAgcmV0dXJuIGBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvJHt0aGlzLnByb3ZpZGVyfWA7XG4gICAgcmV0dXJuIGBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vZG9jcy9wcm92aWRlcnMvJHt0aGlzLnByb3ZpZGVyfS8ke1xuICAgICAgdGhpcy5pc0RhdGFTb3VyY2UgPyBcImRcIiA6IFwiclwiXG4gICAgfS8ke3RoaXMudGVycmFmb3JtRG9jTmFtZX1gO1xuICB9XG5cbiAgcHVibGljIGdldCBpc1Byb3ZpZGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRlcnJhZm9ybVNjaGVtYVR5cGUgPT09IFwicHJvdmlkZXJcIjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbmFtZXNwYWNlKCk6IFJlc291cmNlTmFtZXNwYWNlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gZ2V0UmVzb3VyY2VOYW1lc3BhY2UodGhpcy5wcm92aWRlciwgdGhpcy5iYXNlTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzRGF0YVNvdXJjZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZXJyYWZvcm1TY2hlbWFUeXBlID09PSBcImRhdGFfc291cmNlXCI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBhcmVudENsYXNzTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzUHJvdmlkZXJcbiAgICAgID8gXCJUZXJyYWZvcm1Qcm92aWRlclwiXG4gICAgICA6IHRoaXMuaXNEYXRhU291cmNlXG4gICAgICA/IFwiVGVycmFmb3JtRGF0YVNvdXJjZVwiXG4gICAgICA6IFwiVGVycmFmb3JtUmVzb3VyY2VcIjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdGVycmFmb3JtUmVzb3VyY2VUeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaXNQcm92aWRlclxuICAgICAgPyB0aGlzLnByb3ZpZGVyXG4gICAgICA6IHRoaXMuaXNEYXRhU291cmNlXG4gICAgICA/IHRoaXMudGVycmFmb3JtVHlwZS5yZXBsYWNlKC9eZGF0YV8vLCBcIlwiKVxuICAgICAgOiB0aGlzLnRlcnJhZm9ybVR5cGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHRlcnJhZm9ybURvY05hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdG9TbmFrZUNhc2UoXG4gICAgICB0aGlzLnRlcnJhZm9ybVJlc291cmNlVHlwZS5yZXBsYWNlKFxuICAgICAgICBuZXcgUmVnRXhwKGBeJHt0aGlzLnByb3ZpZGVyfV9gLCBcImlcIiksXG4gICAgICAgIFwiXCJcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldCByZWZlcmVuY2VkVHlwZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ1N0cnVjdC5yZWZlcmVuY2VkVHlwZXM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHN0cnVjdHNGb2xkZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3BhdGguYmFzZW5hbWUodGhpcy5maWxlTmFtZSwgXCIudHNcIil9LXN0cnVjdHNgO1xuICB9XG5cbiAgcHVibGljIGdldCBzdHJ1Y3RzRm9sZGVyUGF0aCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJhc2VQYXRoID0gdGhpcy5maWxlUGF0aC5zcGxpdChcIi9cIikuc2xpY2UoMCwgLTEpLmpvaW4oXCIvXCIpO1xuXG4gICAgaWYgKHRoaXMubmFtZXNwYWNlKSB7XG4gICAgICByZXR1cm4gcGF0aC5qb2luKGJhc2VQYXRoLCB0aGlzLm5hbWVzcGFjZSEubmFtZSwgdGhpcy5zdHJ1Y3RzRm9sZGVyTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oYmFzZVBhdGgsIHRoaXMuc3RydWN0c0ZvbGRlck5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZXNjYXBlU2NoZW1hKHNjaGVtYTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc2NoZW1hLnJlcGxhY2UoLyhcXCpcXC8pL2dpLCBgKlxcXFwvYCk7XG4gIH1cbn1cbiJdfQ==