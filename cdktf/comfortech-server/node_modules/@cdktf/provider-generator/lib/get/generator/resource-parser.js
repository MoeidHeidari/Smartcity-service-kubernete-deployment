"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceParser = void 0;
const codemaker_1 = require("codemaker");
const provider_schema_1 = require("./provider-schema");
const models_1 = require("./models");
const loop_detection_1 = require("./loop-detection");
const isReservedClassName = (className) => {
    return ["string"].includes(className.toLowerCase());
};
class Parser {
    constructor(classNames) {
        this.classNames = classNames;
        this.structs = new Array();
    }
    uniqueClassName(className) {
        if (this.classNames.includes(className)) {
            className = `${className}A`;
        }
        this.classNames.push(className);
        return className;
    }
    resourceFrom(provider, type, schema, terraformSchemaType) {
        let baseName = type;
        if (baseName.startsWith(`${provider}_`)) {
            baseName = baseName.substr(provider.length + 1);
        }
        const isProvider = terraformSchemaType === "provider";
        if (isProvider) {
            baseName = `${provider}_${baseName}`;
            if (!("attributes" in schema.block)) {
                schema.block = { attributes: {}, block_types: {} };
            }
            // somehow missing from provider schema
            schema.block.attributes["alias"] = {
                type: "string",
                description: "Alias name",
                optional: true,
                computed: false,
            };
        }
        if (isReservedClassName(baseName)) {
            baseName = `${baseName}_resource`;
        }
        const className = this.uniqueClassName(codemaker_1.toPascalCase(baseName));
        // avoid naming collision - see https://github.com/hashicorp/terraform-cdk/issues/299
        const configStructName = this.uniqueClassName(`${className}Config`);
        const fileName = baseName === "index"
            ? "index-resource.ts"
            : `${codemaker_1.toSnakeCase(baseName).replace(/_/g, "-")}.ts`;
        const filePath = `providers/${codemaker_1.toSnakeCase(provider)}/${fileName}`;
        const attributes = this.renderAttributesForBlock(new models_1.Scope({
            name: baseName,
            isProvider,
            parent: isProvider
                ? undefined
                : new models_1.Scope({ name: provider, isProvider: true }),
        }), schema.block);
        function getStructAttribute(attributes, path) {
            var _a;
            const [first, ...rest] = path.split(".");
            const attribute = attributes.find((att) => {
                return att.terraformName === first;
            });
            if (!attribute)
                throw new Error(`Expected to find recursive attribute at path: ${path}`);
            if (!attribute.type.struct)
                throw new Error(`Expected to find struct type attribute at path: ${path} but got ${attribute.type.typeName}`);
            if (rest.length === 0)
                return attribute;
            return getStructAttribute((_a = attribute.type.struct) === null || _a === void 0 ? void 0 : _a.attributes, rest.join("."));
        }
        // Introduce recursion for some attributes
        const recursiveAttributePaths = loop_detection_1.detectAttributeLoops(attributes);
        Object.entries(recursiveAttributePaths).forEach(([attributePath, structPath]) => {
            // TODO: build this to be a bit more defensive (e.g. remove ! operator)
            const recursionTargetStructAttribute = getStructAttribute(attributes, structPath);
            const parts = attributePath.split(".");
            const attributeName = parts.pop();
            const parentAttribute = getStructAttribute(attributes, parts.join("."));
            const indexToReplace = parentAttribute.type.struct.attributes.findIndex((att) => att.terraformName === attributeName);
            if (indexToReplace === -1)
                throw new Error("Can't find attribute at path " + attributePath);
            const previousAttribute = parentAttribute.type.struct.attributes[indexToReplace];
            parentAttribute.type.struct.attributes[indexToReplace] =
                recursionTargetStructAttribute; // introduce recursion
            // ugly, pls c̶a̶l̶l̶ refactor me maybe
            // we store all structs in this.structs – now we need to dispose all structs that are part of previousAttribute
            const disposeStructs = (attr) => {
                if (attr.type.struct) {
                    attr.type.struct.attributes.forEach(disposeStructs);
                    this.structs = this.structs.filter((s) => s !== attr.type.struct);
                }
            };
            disposeStructs(previousAttribute);
        });
        const resourceModel = new models_1.ResourceModel({
            terraformType: type,
            baseName,
            fileName,
            filePath,
            className,
            schema,
            provider,
            attributes,
            terraformSchemaType,
            structs: this.structs,
            configStructName,
        });
        return resourceModel;
    }
    renderAttributeType(scope, attributeType, parentKind) {
        const parent = scope[scope.length - 1];
        const level = scope.length;
        const isComputed = !!scope.find((e) => e.isComputed === true);
        const isOptional = parent.isOptional;
        const isRequired = parent.isRequired;
        if (typeof attributeType === "string") {
            switch (attributeType) {
                case "bool":
                    return new models_1.AttributeTypeModel("boolean", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "string":
                    return new models_1.AttributeTypeModel("string", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "number":
                    return new models_1.AttributeTypeModel("number", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "dynamic":
                    return new models_1.AttributeTypeModel("any", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                        isMap: true,
                    });
                default:
                    throw new Error(`invalid primitive type ${attributeType}`);
            }
        }
        if (Array.isArray(attributeType)) {
            if (attributeType.length !== 2) {
                throw new Error(`unexpected array`);
            }
            const [kind, type] = attributeType;
            if (kind === "set" || kind === "list") {
                const attrType = this.renderAttributeType(scope, type, kind);
                attrType.isList = kind === "list";
                attrType.isSet = kind === "set";
                attrType.isComputed = isComputed;
                attrType.isOptional = isOptional;
                attrType.isRequired = isRequired;
                attrType.level = level;
                return attrType;
            }
            if (kind === "map") {
                const valueType = this.renderAttributeType(scope, type, kind);
                valueType.isMap = true;
                valueType.isComputed = isComputed;
                valueType.isOptional = isOptional;
                valueType.isRequired = isRequired;
                valueType.level = level;
                return valueType;
            }
            if (kind === "object") {
                const objAttributes = type;
                const attributes = {};
                for (const [name, type] of Object.entries(objAttributes)) {
                    attributes[name] = { type };
                }
                const struct = this.addAnonymousStruct(scope, attributes, parentKind !== null && parentKind !== void 0 ? parentKind : kind);
                const model = new models_1.AttributeTypeModel(struct.name, {
                    struct,
                    isComputed,
                    isOptional,
                    isRequired,
                    level,
                });
                return model;
            }
        }
        if (provider_schema_1.isAttributeNestedType(attributeType)) {
            let isList = undefined;
            let isSet = undefined;
            let isMap = undefined;
            switch (attributeType.nesting_mode) {
                case "list":
                    isList = true;
                    break;
                case "set":
                    isSet = true;
                    break;
                case "map":
                    isMap = true;
                    break;
                case "single":
                    break;
                default: {
                    throw new Error(`nested_type with nesting_mode "${attributeType.nesting_mode}" not supported (attribute scope: ${scope
                        .map((s) => s.fullName)
                        .join(",")}`);
                }
            }
            const struct = this.addAnonymousStruct(scope, attributeType.attributes, attributeType.nesting_mode);
            const model = new models_1.AttributeTypeModel(struct.name, {
                struct,
                isComputed,
                isOptional,
                isRequired,
                level,
                isList,
                isSet,
                isMap,
                isNested: true,
            });
            return model;
        }
        throw new Error(`unknown type ${JSON.stringify(attributeType)}`);
    }
    renderAttributesForBlock(parentType, block) {
        const attributes = new Array();
        for (const [terraformAttributeName, att] of Object.entries(block.attributes || {})) {
            const type = this.renderAttributeType([
                parentType,
                new models_1.Scope({
                    name: terraformAttributeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                    isComputed: !!att.computed,
                    isOptional: !!att.optional,
                    isRequired: !!att.required,
                    isNestedType: provider_schema_1.isNestedTypeAttribute(att),
                }),
            ], att.type || att.nested_type);
            const name = codemaker_1.toCamelCase(terraformAttributeName);
            attributes.push(new models_1.AttributeModel({
                terraformFullName: parentType.fullName(terraformAttributeName),
                description: att.description,
                name,
                storageName: `_${name}`,
                computed: !!att.computed,
                optional: !!att.optional,
                terraformName: terraformAttributeName,
                type,
                provider: parentType.isProvider,
                required: !!att.required,
            }));
        }
        for (const [blockTypeName, blockType] of Object.entries(block.block_types || {})) {
            // create a struct for this block
            const blockAttributes = this.renderAttributesForBlock(new models_1.Scope({
                name: `${parentType.name}_${blockTypeName}`,
                parent: parentType,
                isProvider: parentType.isProvider,
                inBlockType: true,
            }), blockType.block);
            const blockStruct = this.addStruct([
                parentType,
                new models_1.Scope({
                    name: blockTypeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                }),
            ], blockAttributes, blockType.nesting_mode, (blockType.nesting_mode === "list" ||
                blockType.nesting_mode === "set") &&
                blockType.max_items === 1);
            // define the attribute
            attributes.push(attributeForBlockType(blockTypeName, blockType, blockStruct, parentType.isProvider, parentType));
        }
        return attributes;
        function attributeForBlockType(terraformName, blockType, struct, isProvider, parent) {
            const name = codemaker_1.toCamelCase(terraformName);
            let optional;
            let required;
            switch (blockType.nesting_mode) {
                case "single":
                    optional = !struct.attributes.some((x) => !x.optional);
                    required = !struct.attributes.some((x) => !x.required);
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, {
                            struct,
                            isOptional: optional,
                            isRequired: required,
                            isSingleItem: true,
                            isBlock: true,
                        }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
                case "map":
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, {
                            struct,
                            isMap: true,
                            isBlock: true,
                        }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional: false,
                        computed: false,
                        provider: isProvider,
                        required: false,
                    });
                case "list":
                case "set":
                    optional =
                        blockType.min_items === undefined ? true : blockType.min_items < 1;
                    required =
                        blockType.min_items === undefined ? false : blockType.min_items > 0;
                    return new models_1.AttributeModel({
                        name,
                        terraformName: terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, {
                            struct,
                            isList: blockType.nesting_mode === "list",
                            isSet: blockType.nesting_mode === "set",
                            isOptional: optional,
                            isRequired: required,
                            isSingleItem: blockType.max_items === 1,
                            isBlock: true,
                        }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
            }
        }
    }
    addAnonymousStruct(scope, attrs, nesting_mode) {
        const attributes = new Array();
        const parent = scope[scope.length - 1];
        for (const [terraformName, att] of Object.entries(attrs)) {
            // nested types support computed, optional and required on attribute level
            // if parent is computed, child always is computed as well
            const computed = !!parent.isComputed || (parent.isNestedType && !!att.computed);
            const optional = parent.isNestedType
                ? !!att.optional
                : !!parent.isOptional;
            const required = parent.isNestedType
                ? !!att.required
                : !!parent.isRequired;
            const name = codemaker_1.toCamelCase(terraformName);
            attributes.push(new models_1.AttributeModel({
                name,
                storageName: `_${name}`,
                computed: computed,
                description: att.description,
                optional: optional,
                terraformName,
                terraformFullName: parent.fullName(terraformName),
                type: this.renderAttributeType([
                    ...scope,
                    new models_1.Scope({
                        name: terraformName,
                        parent,
                        isProvider: parent.isProvider,
                        isComputed: computed,
                        isOptional: optional,
                        isRequired: required,
                        isNestedType: parent.isNestedType,
                    }),
                ], att.type || att.nested_type),
                provider: parent.isProvider,
                required: required,
            }));
        }
        return this.addStruct(scope, attributes, nesting_mode);
    }
    addStruct(scope, attributes, nesting_mode, isSingleItem = false) {
        const name = this.uniqueClassName(codemaker_1.toPascalCase(scope.map((x) => codemaker_1.toSnakeCase(x.name)).join("_")));
        const parent = scope[scope.length - 1];
        // blockType.nesting_mode => list/set & blockType.max_items === 1,
        const isClass = (parent.isComputed && !parent.isOptional) || isSingleItem;
        const isAnonymous = true;
        const s = new models_1.Struct(name, attributes, isClass, isAnonymous, isSingleItem, nesting_mode);
        this.structs.push(s);
        return s;
    }
}
class ResourceParser {
    constructor() {
        this.uniqueClassnames = [];
        this.resources = {};
    }
    parse(provider, type, schema, terraformType) {
        if (this.resources[type]) {
            return this.resources[type];
        }
        const parser = new Parser(this.uniqueClassnames);
        const resource = parser.resourceFrom(provider, type, schema, terraformType);
        this.resources[type] = resource;
        return resource;
    }
    // Used by convert to determine the right name for a class
    getClassNameForResource(terraformType) {
        const resource = this.resources[terraformType];
        return resource ? resource.className : "";
    }
}
exports.ResourceParser = ResourceParser;
//# sourceMappingURL=data:application/json;base64,