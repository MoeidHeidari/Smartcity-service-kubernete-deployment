"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSchema = exports.isNestedTypeAttribute = exports.isAttributeNestedType = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const util_1 = require("../../util");
const hcl2json_1 = require("@cdktf/hcl2json");
const terraformBinaryName = process.env.TERRAFORM_BINARY_NAME || "terraform";
function isAttributeNestedType(type) {
    return (typeof type === "object" &&
        !Array.isArray(type) &&
        typeof type.nesting_mode === "string" &&
        typeof type.attributes === "object");
}
exports.isAttributeNestedType = isAttributeNestedType;
function isNestedTypeAttribute(att) {
    return (typeof att.nested_type !== "undefined" &&
        isAttributeNestedType(att.nested_type));
}
exports.isNestedTypeAttribute = isNestedTypeAttribute;
const transformVariables = (variables) => {
    var _a;
    const result = [];
    if (!variables)
        return result;
    for (const name of Object.keys(variables)) {
        const variable = variables[name][0];
        let variableType;
        if (
        // eslint-disable-next-line no-prototype-builtins
        variable.hasOwnProperty("type") == false &&
            // eslint-disable-next-line no-prototype-builtins
            variable.hasOwnProperty("default") == true) {
            switch (typeof variable["default"]) {
                case "boolean":
                    variableType = "bool";
                    break;
                case "number":
                    variableType = "number";
                    break;
                default:
                    variableType = "any";
            }
        }
        else {
            const matched = (_a = variable["type"]) === null || _a === void 0 ? void 0 : _a.match(/\$\{(.*)\}/);
            variableType = matched ? matched[1] : "any";
        }
        const item = {
            name,
            type: variableType,
            description: variable["description"],
            // eslint-disable-next-line no-prototype-builtins
            required: variable.hasOwnProperty("default") == false,
        };
        if (!item.required) {
            item["default"] = variable["default"];
        }
        result.push(item);
    }
    return result;
};
const transformOutputs = (outputs) => {
    const result = [];
    if (outputs) {
        for (const name of Object.keys(outputs)) {
            const output = outputs[name][0];
            const item = {
                name,
                description: output["description"],
            };
            result.push(item);
        }
    }
    return result;
};
const harvestModuleSchema = async (workingDirectory, modules) => {
    const fileName = path.join(workingDirectory, ".terraform", "modules", "modules.json");
    const result = {};
    if (!fs.existsSync(fileName)) {
        throw new Error(`Modules were not generated properly - couldn't find ${fileName}`);
    }
    const moduleIndex = JSON.parse(fs.readFileSync(fileName, "utf-8"));
    for (const mod of modules) {
        const m = moduleIndex.Modules.find((other) => mod === other.Key);
        if (!m) {
            throw new Error(`Couldn't find ${m}`);
        }
        const parsed = await hcl2json_1.convertFiles(path.join(workingDirectory, m.Dir));
        if (!parsed) {
            throw new Error(`Modules were not generated properly - couldn't parse ${m.Dir}`);
        }
        const schema = {
            inputs: transformVariables(parsed.variable),
            outputs: transformOutputs(parsed.output),
            name: mod,
        };
        result[mod] = schema;
    }
    return result;
};
async function readSchema(targets) {
    const config = {
        terraform: {},
    };
    if (targets.length === 0) {
        return {
            providerSchema: {
                format_version: "0.1",
                provider_schemas: {},
            },
            moduleSchema: {},
        };
    }
    for (const target of targets) {
        if (target.isModule) {
            if (!config.module)
                config.module = {};
            const source = target.constraint.localSource || target.source;
            config.module[target.moduleKey] = { source: source };
            if (target.version) {
                config.module[target.moduleKey]["version"] = target.version;
            }
        }
        else {
            if (!config.provider)
                config.provider = {};
            if (!config.terraform.required_providers) {
                config.terraform.required_providers = {};
            }
            config.provider[target.name] = {};
            config.terraform.required_providers[target.name] = {
                version: target.version,
                source: target.source,
            };
        }
    }
    let providerSchema = { format_version: "0.1" };
    let moduleSchema = {};
    await util_1.withTempDir("fetchSchema", async () => {
        const outdir = process.cwd();
        const filePath = path.join(outdir, "main.tf.json");
        await fs.writeFile(filePath, JSON.stringify(config));
        await util_1.exec(terraformBinaryName, ["init"], { cwd: outdir });
        if (config.provider) {
            providerSchema = JSON.parse(await util_1.exec(terraformBinaryName, ["providers", "schema", "-json"], {
                cwd: outdir,
            }));
            const versionSchema = JSON.parse(await util_1.exec(terraformBinaryName, ["version", "-json"], {
                cwd: outdir,
            }));
            providerSchema.provider_versions = versionSchema.provider_selections;
        }
        if (config.module) {
            moduleSchema = await harvestModuleSchema(outdir, Object.keys(config.module));
        }
    });
    return {
        providerSchema,
        moduleSchema,
    };
}
exports.readSchema = readSchema;
//# sourceMappingURL=data:application/json;base64,