"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeTypeModel = exports.TokenizableTypes = void 0;
var TokenizableTypes;
(function (TokenizableTypes) {
    TokenizableTypes["STRING"] = "string";
    TokenizableTypes["STRING_LIST"] = "string[]";
    TokenizableTypes["NUMBER"] = "number";
    TokenizableTypes["NUMBER_LIST"] = "number[]";
    TokenizableTypes["BOOLEAN"] = "boolean";
})(TokenizableTypes = exports.TokenizableTypes || (exports.TokenizableTypes = {}));
class AttributeTypeModel {
    constructor(_type, options) {
        this._type = _type;
        this.typeName = _type;
        this.isBlock = !!options.isBlock;
        this.isList = !!options.isList;
        this.isSet = !!options.isSet;
        this.isMap = !!options.isMap;
        this.isComputed = !!options.isComputed;
        this.isOptional = !!options.isOptional;
        this.isRequired = !!options.isRequired;
        this.isSingleItem = !!options.isSingleItem;
        this.level = options.level;
        this.struct = options.struct;
        this.isNested = !!options.isNested;
        if (options.struct) {
            options.struct.isSingleItem = this.isSingleItem || false;
        }
    }
    get name() {
        var _a, _b;
        // computed map wrappers
        if (this.isComputedStringMap)
            return `cdktf.StringMap`;
        if (this.isComputedNumberMap)
            return `cdktf.NumberMap`;
        if (this.isComputedBooleanMap)
            return `cdktf.BooleanMap`;
        if (this.isComputedAnyMap)
            return `cdktf.AnyMap`;
        // map of booleans has token support, but booleans don't
        if (this.isBooleanMap)
            return `{ [key: string]: (${this._type} | cdktf.IResolvable) }`;
        // other maps with token support
        if (this.isTokenizableMap)
            return `{ [key: string]: ${this._type} }`;
        // maps without token support
        if (this.isMap)
            return `{ [key: string]: ${this._type} } | cdktf.IResolvable`;
        const hasListRepresentation = this.isList || this.isSet;
        // single item list
        if (hasListRepresentation && !this.isComputed && this.isSingleItem)
            return `${this._type}`;
        // neither boolean nor boolean[] is tokenizable, so both parts need IResolvable
        if (hasListRepresentation && this._type === TokenizableTypes.BOOLEAN)
            return "Array<boolean | cdktf.IResolvable> | cdktf.IResolvable";
        // non-computed list of primitives
        if (hasListRepresentation && !this.isComputed && this.isPrimitive)
            return `${this._type}[]`;
        // non-computed list of non-primitives
        if (hasListRepresentation && !this.isComputed && !this.isPrimitive)
            return `${this._type}[] | cdktf.IResolvable`;
        // computed lists of primitive types
        if (hasListRepresentation && this.isComputed && this.isPrimitive)
            return `${this._type}[]`;
        // computed lists of simple types
        if (hasListRepresentation && this.isComputed && !((_a = this.struct) === null || _a === void 0 ? void 0 : _a.isClass))
            return `${this._type}[] | cdktf.IResolvable`;
        // complex computed list
        if (hasListRepresentation && this.isComputed && this.isComplex)
            return `${this._type}[]`;
        // boolean
        if (this._type === TokenizableTypes.BOOLEAN)
            return `boolean | cdktf.IResolvable`;
        // custom structs
        if (this.isComplex && !((_b = this.struct) === null || _b === void 0 ? void 0 : _b.isClass) && !this.isSingleItem) {
            return `${this._type} | cdktf.IResolvable`;
        }
        // all other types
        return this._type;
    }
    get storedName() {
        let name = this.name;
        return `${name}${this.isOptional ? " | undefined" : ""}`;
    }
    get isComplex() {
        return !!this.struct;
    }
    get isPrimitive() {
        return !this.isComplex;
    }
    get isString() {
        return this.name === TokenizableTypes.STRING;
    }
    get isNumber() {
        return this.name === TokenizableTypes.NUMBER;
    }
    get isStringSet() {
        return this.isSet && this.name === TokenizableTypes.STRING_LIST;
    }
    get isNumberSet() {
        return this.isSet && this._type === TokenizableTypes.NUMBER;
    }
    get isBooleanSet() {
        return this.isSet && this._type === TokenizableTypes.BOOLEAN;
    }
    get isStringList() {
        return this.isList && this.name === TokenizableTypes.STRING_LIST;
    }
    get isNumberList() {
        return this.isList && this._type === TokenizableTypes.NUMBER;
    }
    get isBooleanList() {
        return this.isList && this._type === TokenizableTypes.BOOLEAN;
    }
    get isBoolean() {
        return (this._type === TokenizableTypes.BOOLEAN && !this.isList && !this.isMap);
    }
    get isStringMap() {
        return this.isMap && this._type === TokenizableTypes.STRING;
    }
    get isComputedStringMap() {
        return this.isStringMap && this.isComputed && !this.isOptional;
    }
    get isNumberMap() {
        return this.isMap && this._type === TokenizableTypes.NUMBER;
    }
    get isComputedNumberMap() {
        return this.isNumberMap && this.isComputed && !this.isOptional;
    }
    get isBooleanMap() {
        return this.isMap && this._type === TokenizableTypes.BOOLEAN;
    }
    get isComputedBooleanMap() {
        return this.isBooleanMap && this.isComputed && !this.isOptional;
    }
    get isAnyMap() {
        return this.isMap && this._type === "any";
    }
    get isComputedAnyMap() {
        return this.isAnyMap && this.isComputed && !this.isOptional;
    }
    get isTokenizableMap() {
        return (this.isMap &&
            !this.isList &&
            (Object.values(TokenizableTypes).includes(this._type) ||
                this._type === "any"));
    }
    get isComputedComplex() {
        return this.isComputed && this.isComplex;
    }
    get isRootType() {
        return this.level === 2;
    }
    get isComputedPrimitive() {
        return this.isComputed && this.isPrimitive;
    }
    get isTokenizable() {
        return Object.values(TokenizableTypes).includes(this.name);
    }
    get innerType() {
        return this._type;
    }
}
exports.AttributeTypeModel = AttributeTypeModel;
//# sourceMappingURL=data:application/json;base64,