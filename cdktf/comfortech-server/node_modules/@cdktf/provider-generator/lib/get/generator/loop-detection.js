"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectAttributeLoops = void 0;
const equalAttributeIdentifiers = (x, y) => x[0] === y[0] &&
    x[1].size === y[1].size &&
    [...x[1]].every((x) => y[1].has(x));
function typeStructure(model) {
    var _a;
    if (model.type.isPrimitive) {
        return model.type.name;
    }
    return `<complex:{${(_a = model.type.struct) === null || _a === void 0 ? void 0 : _a.attributes.map((att) => att.name).sort()}}${model.type.isList ? "[]" : ""}>`;
}
function getAttributeIdentifier(model) {
    return [
        model.terraformName,
        new Set(model.type.struct.attributes.map((a) => `${a.name}:${typeStructure(a)}`)),
    ];
}
/**
 * Detects recursive attribute schemas and returns an Object
 * describing what property should be linking to which class
 */
function detectAttributeLoops(attributes) {
    // We aproximate a class as a set of attributes names
    // This is not a perfect approximation, but it's good enough for our purposes
    const redirects = {};
    function depthFirstSearch(attribute, path = [], knownStructs = {}) {
        const name = attribute.terraformName;
        const struct = attribute.type.struct;
        if (!struct) {
            return;
        }
        const structIdentifier = getAttributeIdentifier(attribute);
        // Detect if we visited this already
        const visited = Object.entries(knownStructs).find(([, attrIdentifier]) => equalAttributeIdentifiers(structIdentifier, attrIdentifier));
        if (visited) {
            // We have a loop, we don't need to search deeper
            const toBeReplacedWith = visited[0];
            const toReplace = [...path, name].join(".");
            redirects[toReplace] = toBeReplacedWith;
        }
        else {
            // Search deeper
            struct.attributes.forEach((a) => depthFirstSearch(a, [...path, name], {
                ...knownStructs,
                // We haven't visited this yet, add it to the list of known structs
                [[...path, name].join(".")]: structIdentifier,
            }));
        }
    }
    attributes.forEach((attr) => depthFirstSearch(attr));
    return redirects;
}
exports.detectAttributeLoops = detectAttributeLoops;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC1kZXRlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb29wLWRldGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxNQUFNLHlCQUF5QixHQUFHLENBQ2hDLENBQXNCLEVBQ3RCLENBQXNCLEVBQ3RCLEVBQUUsQ0FDRixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7SUFDdkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRDLFNBQVMsYUFBYSxDQUFDLEtBQXFCOztJQUMxQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQzFCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDeEI7SUFFRCxPQUFPLGFBQWEsTUFBQSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsVUFBVSxDQUM5QyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQ3JCLElBQUksRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ2hELENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLEtBQXFCO0lBQ25ELE9BQU87UUFDTCxLQUFLLENBQUMsYUFBYTtRQUNuQixJQUFJLEdBQUcsQ0FDTCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDMUU7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLG9CQUFvQixDQUFDLFVBQTRCO0lBRy9ELHFEQUFxRDtJQUNyRCw2RUFBNkU7SUFDN0UsTUFBTSxTQUFTLEdBQTJCLEVBQUUsQ0FBQztJQUU3QyxTQUFTLGdCQUFnQixDQUN2QixTQUF5QixFQUN6QixPQUFpQixFQUFFLEVBQ25CLGVBQWlFLEVBQUU7UUFFbkUsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUNyQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTztTQUNSO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRCxvQ0FBb0M7UUFDcEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUN2RSx5QkFBeUIsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FDNUQsQ0FBQztRQUVGLElBQUksT0FBTyxFQUFFO1lBQ1gsaURBQWlEO1lBQ2pELE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQztTQUN6QzthQUFNO1lBQ0wsZ0JBQWdCO1lBQ2hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDOUIsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ25DLEdBQUcsWUFBWTtnQkFDZixtRUFBbUU7Z0JBQ25FLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxnQkFBZ0I7YUFDOUMsQ0FBQyxDQUNILENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXJELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUE1Q0Qsb0RBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXR0cmlidXRlTW9kZWwgfSBmcm9tIFwiLi9tb2RlbHMvYXR0cmlidXRlLW1vZGVsXCI7XG5cbnR5cGUgQXR0cmlidXRlSWRlbnRpZmllciA9IFtzdHJpbmcsIFNldDxzdHJpbmc+XTtcbmNvbnN0IGVxdWFsQXR0cmlidXRlSWRlbnRpZmllcnMgPSAoXG4gIHg6IEF0dHJpYnV0ZUlkZW50aWZpZXIsXG4gIHk6IEF0dHJpYnV0ZUlkZW50aWZpZXJcbikgPT5cbiAgeFswXSA9PT0geVswXSAmJlxuICB4WzFdLnNpemUgPT09IHlbMV0uc2l6ZSAmJlxuICBbLi4ueFsxXV0uZXZlcnkoKHgpID0+IHlbMV0uaGFzKHgpKTtcblxuZnVuY3Rpb24gdHlwZVN0cnVjdHVyZShtb2RlbDogQXR0cmlidXRlTW9kZWwpIHtcbiAgaWYgKG1vZGVsLnR5cGUuaXNQcmltaXRpdmUpIHtcbiAgICByZXR1cm4gbW9kZWwudHlwZS5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIGA8Y29tcGxleDp7JHttb2RlbC50eXBlLnN0cnVjdD8uYXR0cmlidXRlc1xuICAgIC5tYXAoKGF0dCkgPT4gYXR0Lm5hbWUpXG4gICAgLnNvcnQoKX19JHttb2RlbC50eXBlLmlzTGlzdCA/IFwiW11cIiA6IFwiXCJ9PmA7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZUlkZW50aWZpZXIobW9kZWw6IEF0dHJpYnV0ZU1vZGVsKTogQXR0cmlidXRlSWRlbnRpZmllciB7XG4gIHJldHVybiBbXG4gICAgbW9kZWwudGVycmFmb3JtTmFtZSxcbiAgICBuZXcgU2V0KFxuICAgICAgbW9kZWwudHlwZS5zdHJ1Y3QhLmF0dHJpYnV0ZXMubWFwKChhKSA9PiBgJHthLm5hbWV9OiR7dHlwZVN0cnVjdHVyZShhKX1gKVxuICAgICksXG4gIF07XG59XG5cbi8qKlxuICogRGV0ZWN0cyByZWN1cnNpdmUgYXR0cmlidXRlIHNjaGVtYXMgYW5kIHJldHVybnMgYW4gT2JqZWN0XG4gKiBkZXNjcmliaW5nIHdoYXQgcHJvcGVydHkgc2hvdWxkIGJlIGxpbmtpbmcgdG8gd2hpY2ggY2xhc3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEF0dHJpYnV0ZUxvb3BzKGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZU1vZGVsW10pOiB7XG4gIFtsb29wRW50cnlwb2ludDogc3RyaW5nXTogc3RyaW5nOyAvLyBhdHRyaWJ1dGUgcGF0aCB0byBiZSByZXBsYWNlZCAtPiBhdHRyaWJ1dGUgcGF0aCBvZiB0aGUgdHlwZSB0byByZXBsYWNlIHdpdGhcbn0ge1xuICAvLyBXZSBhcHJveGltYXRlIGEgY2xhc3MgYXMgYSBzZXQgb2YgYXR0cmlidXRlcyBuYW1lc1xuICAvLyBUaGlzIGlzIG5vdCBhIHBlcmZlY3QgYXBwcm94aW1hdGlvbiwgYnV0IGl0J3MgZ29vZCBlbm91Z2ggZm9yIG91ciBwdXJwb3Nlc1xuICBjb25zdCByZWRpcmVjdHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICBmdW5jdGlvbiBkZXB0aEZpcnN0U2VhcmNoKFxuICAgIGF0dHJpYnV0ZTogQXR0cmlidXRlTW9kZWwsXG4gICAgcGF0aDogc3RyaW5nW10gPSBbXSxcbiAgICBrbm93blN0cnVjdHM6IHsgW2F0dHJpYnV0ZVBhdGg6IHN0cmluZ106IEF0dHJpYnV0ZUlkZW50aWZpZXIgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGUudGVycmFmb3JtTmFtZTtcbiAgICBjb25zdCBzdHJ1Y3QgPSBhdHRyaWJ1dGUudHlwZS5zdHJ1Y3Q7XG4gICAgaWYgKCFzdHJ1Y3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJ1Y3RJZGVudGlmaWVyID0gZ2V0QXR0cmlidXRlSWRlbnRpZmllcihhdHRyaWJ1dGUpO1xuICAgIC8vIERldGVjdCBpZiB3ZSB2aXNpdGVkIHRoaXMgYWxyZWFkeVxuICAgIGNvbnN0IHZpc2l0ZWQgPSBPYmplY3QuZW50cmllcyhrbm93blN0cnVjdHMpLmZpbmQoKFssIGF0dHJJZGVudGlmaWVyXSkgPT5cbiAgICAgIGVxdWFsQXR0cmlidXRlSWRlbnRpZmllcnMoc3RydWN0SWRlbnRpZmllciwgYXR0cklkZW50aWZpZXIpXG4gICAgKTtcblxuICAgIGlmICh2aXNpdGVkKSB7XG4gICAgICAvLyBXZSBoYXZlIGEgbG9vcCwgd2UgZG9uJ3QgbmVlZCB0byBzZWFyY2ggZGVlcGVyXG4gICAgICBjb25zdCB0b0JlUmVwbGFjZWRXaXRoID0gdmlzaXRlZFswXTtcbiAgICAgIGNvbnN0IHRvUmVwbGFjZSA9IFsuLi5wYXRoLCBuYW1lXS5qb2luKFwiLlwiKTtcbiAgICAgIHJlZGlyZWN0c1t0b1JlcGxhY2VdID0gdG9CZVJlcGxhY2VkV2l0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VhcmNoIGRlZXBlclxuICAgICAgc3RydWN0LmF0dHJpYnV0ZXMuZm9yRWFjaCgoYSkgPT5cbiAgICAgICAgZGVwdGhGaXJzdFNlYXJjaChhLCBbLi4ucGF0aCwgbmFtZV0sIHtcbiAgICAgICAgICAuLi5rbm93blN0cnVjdHMsXG4gICAgICAgICAgLy8gV2UgaGF2ZW4ndCB2aXNpdGVkIHRoaXMgeWV0LCBhZGQgaXQgdG8gdGhlIGxpc3Qgb2Yga25vd24gc3RydWN0c1xuICAgICAgICAgIFtbLi4ucGF0aCwgbmFtZV0uam9pbihcIi5cIildOiBzdHJ1Y3RJZGVudGlmaWVyLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhdHRyaWJ1dGVzLmZvckVhY2goKGF0dHIpID0+IGRlcHRoRmlyc3RTZWFyY2goYXR0cikpO1xuXG4gIHJldHVybiByZWRpcmVjdHM7XG59XG4iXX0=