"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceEmitter = void 0;
const attributes_emitter_1 = require("./attributes-emitter");
class ResourceEmitter {
    constructor(code) {
        this.code = code;
        this.attributesEmitter = new attributes_emitter_1.AttributesEmitter(this.code);
    }
    emit(resource) {
        this.code.line();
        this.code.line(`/**`);
        this.code.line(`* Represents a {@link ${resource.linkToDocs} ${resource.terraformResourceType}}`);
        this.code.line(`*/`);
        this.code.openBlock(`export class ${resource.className} extends cdktf.${resource.parentClassName}`);
        this.emitHeader("STATIC PROPERTIES");
        this.emitStaticProperties(resource);
        this.emitHeader("INITIALIZER");
        this.emitInitializer(resource);
        this.emitHeader("ATTRIBUTES");
        this.emitResourceAttributes(resource);
        // synthesis
        this.emitHeader("SYNTHESIS");
        this.emitResourceSynthesis(resource);
        this.code.closeBlock(); // construct
    }
    emitHeader(title) {
        this.code.line();
        this.code.line("// " + "=".repeat(title.length));
        this.code.line(`// ${title}`);
        this.code.line("// " + "=".repeat(title.length));
    }
    emitStaticProperties(resource) {
        this.code.line(`public static readonly tfResourceType = "${resource.terraformResourceType}";`);
    }
    emitResourceSynthesis(resource) {
        this.code.line();
        this.code.openBlock(`protected synthesizeAttributes(): { [name: string]: any }`);
        this.code.open(`return {`);
        for (const att of resource.synthesizableAttributes) {
            this.attributesEmitter.emitToTerraform(att, false);
        }
        this.code.close(`};`);
        this.code.closeBlock();
    }
    emitResourceAttributes(resource) {
        for (const att of resource.attributes) {
            this.attributesEmitter.emit(att, this.attributesEmitter.needsResetEscape(att, resource.attributes), this.attributesEmitter.needsInputEscape(att, resource.attributes));
        }
    }
    emitInitializer(resource) {
        this.code.line();
        this.code.line(`/**`);
        this.code.line(`* Create a new {@link ${resource.linkToDocs} ${resource.terraformResourceType}} ${resource.isDataSource ? "Data Source" : "Resource"}`);
        this.code.line(`*`);
        this.code.line(`* @param scope The scope in which to define this construct`);
        this.code.line(`* @param id The scoped construct ID. Must be unique amongst siblings in the same scope`);
        this.code.line(`* @param options ${resource.configStruct.attributeType}`);
        this.code.line(`*/`);
        this.code.openBlock(`public constructor(scope: Construct, id: string, config: ${resource.configStruct.attributeType})`);
        resource.isProvider
            ? this.emitProviderSuper(resource)
            : this.emitResourceSuper(resource);
        // initialize config properties
        for (const att of resource.configStruct.assignableAttributes) {
            if (att.setterType._type === "stored_class") {
                this.code.line(`this.${att.storageName}.internalValue = config.${att.name};`);
            }
            else {
                this.code.line(`this.${att.storageName} = config.${att.name};`);
            }
        }
        this.code.closeBlock();
    }
    emitResourceSuper(resource) {
        this.code.open(`super(scope, id, {`);
        this.code.line(`terraformResourceType: '${resource.terraformResourceType}',`);
        this.emitTerraformGeneratorMetadata(resource);
        this.code.line(`provider: config.provider,`);
        this.code.line(`dependsOn: config.dependsOn,`);
        this.code.line(`count: config.count,`);
        this.code.line(`lifecycle: config.lifecycle,`);
        this.code.line(`provisioners: config.provisioners,`);
        this.code.line(`connection: config.connection,`);
        this.code.line(`forEach: config.forEach`);
        this.code.close(`});`);
    }
    emitProviderSuper(resource) {
        this.code.open(`super(scope, id, {`);
        this.code.line(`terraformResourceType: '${resource.terraformResourceType}',`);
        this.emitTerraformGeneratorMetadata(resource);
        this.code.line(`terraformProviderSource: '${resource.terraformProviderSource}'`);
        this.code.close(`});`);
    }
    emitTerraformGeneratorMetadata(resource) {
        this.code.open(`terraformGeneratorMetadata: {`);
        this.code.line(`providerName: '${resource.provider}'${resource.providerVersion || resource.providerVersionConstraint
            ? ","
            : ""}`);
        if (resource.providerVersion) {
            this.code.line(`providerVersion: '${resource.providerVersion}'${resource.providerVersionConstraint ? "," : ""}`);
        }
        if (resource.providerVersionConstraint) {
            this.code.line(`providerVersionConstraint: '${resource.providerVersionConstraint}'`);
        }
        this.code.close(`},`);
    }
}
exports.ResourceEmitter = ResourceEmitter;
//# sourceMappingURL=data:application/json;base64,