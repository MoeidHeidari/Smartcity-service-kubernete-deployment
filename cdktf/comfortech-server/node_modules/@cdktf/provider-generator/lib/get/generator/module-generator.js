"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleGenerator = void 0;
const codemaker_1 = require("codemaker");
const models_1 = require("./models");
class ModuleGenerator {
    constructor(code, targets) {
        this.code = code;
        this.targets = targets;
        this.code.indentation = 2;
        for (const target of this.targets) {
            this.emitSubmodule(target);
        }
    }
    emitSubmodule(target) {
        const spec = target.spec;
        if (!spec) {
            throw new Error(`missing spec for ${target.fqn}`);
        }
        this.code.openFile(target.fileName);
        this.code.line(`// generated by cdktf get`);
        this.code.line(`// ${target.source}`);
        this.code.line(`import { TerraformModule, TerraformModuleUserOptions } from 'cdktf';`);
        this.code.line(`import { Construct } from 'constructs';`);
        const baseName = this.code.toPascalCase(target.name.replace(/[-/.]/g, "_"));
        const optionsType = `${baseName}Options`;
        this.code.openBlock(`export interface ${optionsType} extends TerraformModuleUserOptions`);
        for (const input of spec.inputs) {
            const optional = input.required && input.default === undefined ? "" : "?";
            this.code.line(`/**`);
            this.code.line(` * ${input.description}`);
            if (input.default) {
                this.code.line(` * @default ${input.default}`);
            }
            if (input.type.includes("map(")) {
                this.code.line(` * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}`);
            }
            this.code.line(` */`);
            this.code.line(`readonly ${models_1.AttributeModel.escapeName(codemaker_1.toCamelCase(input.name))}${optional}: ${parseType(input.type)};`);
        }
        this.code.closeBlock();
        this.code.openBlock(`export class ${baseName} extends TerraformModule`);
        this.code.line(`private readonly inputs: { [name: string]: any } = { }`);
        const allOptional = spec.inputs.find((x) => x.required) ? "" : " = {}";
        this.code.open(`public constructor(scope: Construct, id: string, options: ${optionsType}${allOptional}) {`);
        this.code.open(`super(scope, id, {`);
        this.code.line("...options,");
        this.code.line(`source: '${target.source}',`);
        if (target.version) {
            this.code.line(`version: '${target.version}',`);
        }
        this.code.close(`});`);
        for (const input of spec.inputs) {
            const inputName = models_1.AttributeModel.escapeName(codemaker_1.toCamelCase(input.name));
            this.code.line(`this.${inputName} = options.${inputName};`);
        }
        this.code.close(`}`); // ctor
        for (const input of spec.inputs) {
            const inputName = models_1.AttributeModel.escapeName(codemaker_1.toCamelCase(input.name));
            const inputType = parseType(input.type) +
                (input.required && input.default === undefined ? "" : " | undefined");
            this.code.openBlock(`public get ${inputName}(): ${inputType}`);
            this.code.line(`return this.inputs['${input.name}'] as ${inputType};`);
            this.code.closeBlock();
            this.code.openBlock(`public set ${inputName}(value: ${inputType})`);
            this.code.line(`this.inputs['${input.name}'] = value;`);
            this.code.closeBlock();
        }
        for (const output of spec.outputs) {
            const outputName = codemaker_1.toCamelCase(output.name);
            this.code.openBlock(`public get ${outputName}Output()`);
            this.code.line(`return this.getString('${output.name}')`);
            this.code.closeBlock();
        }
        this.code.openBlock(`protected synthesizeAttributes()`);
        this.code.line(`return this.inputs;`);
        this.code.closeBlock();
        this.code.closeBlock(); // class
        this.code.closeFile(target.fileName);
    }
}
exports.ModuleGenerator = ModuleGenerator;
function parseType(type) {
    if (type === "string") {
        return "string";
    }
    if (type === "number") {
        return "number";
    }
    if (type === "bool") {
        return "boolean";
    }
    if (type === "list") {
        return "string[]";
    }
    if (type === "map") {
        return "{ [key: string]: string }";
    }
    if (type === "any") {
        return "any";
    }
    const complexType = parseComplexType(type);
    if (complexType) {
        return complexType;
    }
    throw new Error(`unknown type ${type}`);
}
function parseComplexType(type) {
    const complex = /^(object|list|map|set)\(([\s\S]+)\)/;
    const match = complex.exec(type);
    if (!match) {
        return undefined;
    }
    const [, kind, innerType] = match;
    if (kind === "object") {
        return `any`;
    }
    if (kind === "list" || kind === "set") {
        return `${parseType(innerType)}[]`;
    }
    if (kind === "map") {
        return `{ [key: string]: ${parseType(innerType)} }`;
    }
    throw new Error(`unexpected kind ${kind}`);
}
//# sourceMappingURL=data:application/json;base64,