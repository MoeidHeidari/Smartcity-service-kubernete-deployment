"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigStruct = exports.Struct = void 0;
const util_1 = require("../../../util");
class Struct {
    constructor(name, attributes, isClass = false, isAnonymous = false, isSingleItem = false, nestingMode = "") {
        this.name = name;
        this.attributes = attributes;
        this.isClass = isClass;
        this.isAnonymous = isAnonymous;
        this.isSingleItem = isSingleItem;
        this.nestingMode = nestingMode;
    }
    get assignableAttributes() {
        return this.attributes.filter((attribute) => attribute.isAssignable);
    }
    get optionalAttributes() {
        return this.attributes.filter((attribute) => attribute.optional);
    }
    get allOptional() {
        return (this.attributes.filter((attribute) => !attribute.optional && !attribute.computed).length == 0);
    }
    get attributeType() {
        return `${this.name}${this.allOptional ? " = {}" : ""}`;
    }
    get assignable() {
        return !this.isClass || this.assignableAttributes.length > 0;
    }
    get extends() {
        return "";
    }
    get mapperName() {
        return `${util_1.downcaseFirst(this.name)}ToTerraform`;
    }
    get outputReferenceName() {
        return `${this.name}OutputReference`;
    }
    get listName() {
        return `${this.name}List`;
    }
    get mapName() {
        return `${this.name}Map`;
    }
    get isProvider() {
        return this.attributes.some((att) => att.isProvider);
    }
    get referencedTypes() {
        const types = [];
        this.attributes.forEach((att) => {
            const attReferences = att.getReferencedTypes(false); // This may be a config struct, but still need the references in this context
            if (attReferences) {
                types.push(...attReferences);
            }
        });
        return types;
    }
    get exportCount() {
        let count = 1; // self
        count += 1; // toTerraform function
        if (this.nestingMode === "list" ||
            this.nestingMode === "set" ||
            this.nestingMode === "map") {
            count += 1; // output reference
            if (!this.isSingleItem) {
                count += 1; // complex collection
            }
        }
        return count;
    }
}
exports.Struct = Struct;
class ConfigStruct extends Struct {
    get extends() {
        return ` extends cdktf.TerraformMetaArguments`;
    }
}
exports.ConfigStruct = ConfigStruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHdDQUE4QztBQUM5QyxNQUFhLE1BQU07SUFDakIsWUFDa0IsSUFBWSxFQUNaLFVBQTRCLEVBQzVCLFVBQVUsS0FBSyxFQUNmLGNBQWMsS0FBSyxFQUM1QixlQUFlLEtBQUssRUFDWCxjQUFzQixFQUFFO1FBTHhCLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUM1QixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDNUIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDWCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUN2QyxDQUFDO0lBRUosSUFBVyxvQkFBb0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxJQUFXLGtCQUFrQjtRQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixPQUFPLENBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQ3BCLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUMxRCxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sR0FBRyxvQkFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFXLG1CQUFtQjtRQUM1QixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBVyxlQUFlO1FBQ3hCLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztRQUUzQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzlCLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDZFQUE2RTtZQUNsSSxJQUFJLGFBQWEsRUFBRTtnQkFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO2FBQzlCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDcEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTztRQUN0QixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsdUJBQXVCO1FBRW5DLElBQ0UsSUFBSSxDQUFDLFdBQVcsS0FBSyxNQUFNO1lBQzNCLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSztZQUMxQixJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFDMUI7WUFDQSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsbUJBQW1CO1lBRS9CLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUN0QixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMscUJBQXFCO2FBQ2xDO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQXpGRCx3QkF5RkM7QUFFRCxNQUFhLFlBQWEsU0FBUSxNQUFNO0lBQ3RDLElBQVcsT0FBTztRQUNoQixPQUFPLHVDQUF1QyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQUpELG9DQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXR0cmlidXRlTW9kZWwgfSBmcm9tIFwiLi9hdHRyaWJ1dGUtbW9kZWxcIjtcbmltcG9ydCB7IGRvd25jYXNlRmlyc3QgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbFwiO1xuZXhwb3J0IGNsYXNzIFN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZU1vZGVsW10sXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQ2xhc3MgPSBmYWxzZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNBbm9ueW1vdXMgPSBmYWxzZSxcbiAgICBwdWJsaWMgaXNTaW5nbGVJdGVtID0gZmFsc2UsXG4gICAgcHVibGljIHJlYWRvbmx5IG5lc3RpbmdNb2RlOiBzdHJpbmcgPSBcIlwiXG4gICkge31cblxuICBwdWJsaWMgZ2V0IGFzc2lnbmFibGVBdHRyaWJ1dGVzKCk6IEF0dHJpYnV0ZU1vZGVsW10ge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5pc0Fzc2lnbmFibGUpO1xuICB9XG5cbiAgcHVibGljIGdldCBvcHRpb25hbEF0dHJpYnV0ZXMoKTogQXR0cmlidXRlTW9kZWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoKGF0dHJpYnV0ZSkgPT4gYXR0cmlidXRlLm9wdGlvbmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWxsT3B0aW9uYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoXG4gICAgICAgIChhdHRyaWJ1dGUpID0+ICFhdHRyaWJ1dGUub3B0aW9uYWwgJiYgIWF0dHJpYnV0ZS5jb21wdXRlZFxuICAgICAgKS5sZW5ndGggPT0gMFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGF0dHJpYnV0ZVR5cGUoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX0ke3RoaXMuYWxsT3B0aW9uYWwgPyBcIiA9IHt9XCIgOiBcIlwifWA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFzc2lnbmFibGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzQ2xhc3MgfHwgdGhpcy5hc3NpZ25hYmxlQXR0cmlidXRlcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgcHVibGljIGdldCBleHRlbmRzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hcHBlck5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7ZG93bmNhc2VGaXJzdCh0aGlzLm5hbWUpfVRvVGVycmFmb3JtYDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb3V0cHV0UmVmZXJlbmNlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLm5hbWV9T3V0cHV0UmVmZXJlbmNlYDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbGlzdE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfUxpc3RgO1xuICB9XG5cbiAgcHVibGljIGdldCBtYXBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX1NYXBgO1xuICB9XG5cbiAgcHVibGljIGdldCBpc1Byb3ZpZGVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc29tZSgoYXR0KSA9PiBhdHQuaXNQcm92aWRlcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlZmVyZW5jZWRUeXBlcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgdHlwZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICB0aGlzLmF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0KSA9PiB7XG4gICAgICBjb25zdCBhdHRSZWZlcmVuY2VzID0gYXR0LmdldFJlZmVyZW5jZWRUeXBlcyhmYWxzZSk7IC8vIFRoaXMgbWF5IGJlIGEgY29uZmlnIHN0cnVjdCwgYnV0IHN0aWxsIG5lZWQgdGhlIHJlZmVyZW5jZXMgaW4gdGhpcyBjb250ZXh0XG4gICAgICBpZiAoYXR0UmVmZXJlbmNlcykge1xuICAgICAgICB0eXBlcy5wdXNoKC4uLmF0dFJlZmVyZW5jZXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR5cGVzO1xuICB9XG5cbiAgcHVibGljIGdldCBleHBvcnRDb3VudCgpOiBudW1iZXIge1xuICAgIGxldCBjb3VudCA9IDE7IC8vIHNlbGZcbiAgICBjb3VudCArPSAxOyAvLyB0b1RlcnJhZm9ybSBmdW5jdGlvblxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5uZXN0aW5nTW9kZSA9PT0gXCJsaXN0XCIgfHxcbiAgICAgIHRoaXMubmVzdGluZ01vZGUgPT09IFwic2V0XCIgfHxcbiAgICAgIHRoaXMubmVzdGluZ01vZGUgPT09IFwibWFwXCJcbiAgICApIHtcbiAgICAgIGNvdW50ICs9IDE7IC8vIG91dHB1dCByZWZlcmVuY2VcblxuICAgICAgaWYgKCF0aGlzLmlzU2luZ2xlSXRlbSkge1xuICAgICAgICBjb3VudCArPSAxOyAvLyBjb21wbGV4IGNvbGxlY3Rpb25cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpZ1N0cnVjdCBleHRlbmRzIFN0cnVjdCB7XG4gIHB1YmxpYyBnZXQgZXh0ZW5kcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgIGV4dGVuZHMgY2RrdGYuVGVycmFmb3JtTWV0YUFyZ3VtZW50c2A7XG4gIH1cbn1cbiJdfQ==