"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const constructs_maker_1 = require("../../constructs-maker");
const config_1 = require("../../../config");
const util_1 = require("../util");
test("generate some modules", async () => {
    jest.setTimeout(120000);
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator.test"));
    const constraint = new config_1.TerraformModuleConstraint("terraform-aws-modules/eks/aws@7.0.1");
    const maker = new constructs_maker_1.ConstructsMaker({ codeMakerOutput: workdir, targetLanguage: constructs_maker_1.Language.TYPESCRIPT }, [constraint]);
    await maker.generate();
    const output = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/eks.ts"), "utf-8");
    expect(output).toMatchSnapshot();
});
util_1.expectModuleToMatchSnapshot("no module outputs", "generator", [
    "module-no-outputs.test.fixture.tf",
]);
util_1.expectModuleToMatchSnapshot("typeless variables", "generator", [
    "module-no-variable-type.test.fixture.tf",
]);
util_1.expectModuleToMatchSnapshot("no newline", "generator", [
    "module-no-newline-1.test.fixture.tf",
    "module-no-newline-2.test.fixture.tf",
]);
test("generate multiple aws modules", async () => {
    jest.setTimeout(120000);
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator-aws.test"));
    const constraints = [
        new config_1.TerraformModuleConstraint("terraform-aws-modules/vpc/aws@2.78.0"),
        new config_1.TerraformModuleConstraint("terraform-aws-modules/rds-aurora/aws@4.1.0"),
    ];
    const maker = new constructs_maker_1.ConstructsMaker({ codeMakerOutput: workdir, targetLanguage: constructs_maker_1.Language.TYPESCRIPT }, constraints);
    await maker.generate();
    const vpcOutput = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/vpc.ts"), "utf-8");
    expect(vpcOutput).toMatchSnapshot();
    const rdsOutput = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/rds-aurora.ts"), "utf-8");
    expect(rdsOutput).toMatchSnapshot();
});
util_1.expectModuleToMatchSnapshot("getX variables", "generator", [
    "module-get-x.test.fixture.tf",
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLWdlbmVyYXRvci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLWdlbmVyYXRvci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVDQUF5QjtBQUN6Qix1Q0FBeUI7QUFDekIsMkNBQTZCO0FBQzdCLDZEQUFtRTtBQUNuRSw0Q0FBNEQ7QUFDNUQsa0NBQXNEO0FBRXRELElBQUksQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLHVCQUF1QixDQUFDLENBQ2hELENBQUM7SUFDRixNQUFNLFVBQVUsR0FBRyxJQUFJLGtDQUF5QixDQUM5QyxxQ0FBcUMsQ0FDdEMsQ0FBQztJQUVGLE1BQU0sS0FBSyxHQUFHLElBQUksa0NBQWUsQ0FDL0IsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSwyQkFBUSxDQUFDLFVBQVUsRUFBRSxFQUNqRSxDQUFDLFVBQVUsQ0FBQyxDQUNiLENBQUM7SUFDRixNQUFNLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSwwQ0FBMEMsQ0FBQyxFQUM5RCxPQUFPLENBQ1IsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILGtDQUEyQixDQUFDLG1CQUFtQixFQUFFLFdBQVcsRUFBRTtJQUM1RCxtQ0FBbUM7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsa0NBQTJCLENBQUMsb0JBQW9CLEVBQUUsV0FBVyxFQUFFO0lBQzdELHlDQUF5QztDQUMxQyxDQUFDLENBQUM7QUFFSCxrQ0FBMkIsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFO0lBQ3JELHFDQUFxQztJQUNyQyxxQ0FBcUM7Q0FDdEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLCtCQUErQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQy9DLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFeEIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsMkJBQTJCLENBQUMsQ0FDcEQsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUFHO1FBQ2xCLElBQUksa0NBQXlCLENBQUMsc0NBQXNDLENBQUM7UUFDckUsSUFBSSxrQ0FBeUIsQ0FBQyw0Q0FBNEMsQ0FBQztLQUM1RSxDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxrQ0FBZSxDQUMvQixFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLDJCQUFRLENBQUMsVUFBVSxFQUFFLEVBQ2pFLFdBQVcsQ0FDWixDQUFDO0lBQ0YsTUFBTSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsMENBQTBDLENBQUMsRUFDOUQsT0FBTyxDQUNSLENBQUM7SUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFcEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaURBQWlELENBQUMsRUFDckUsT0FBTyxDQUNSLENBQUM7SUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQ0FBMkIsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLEVBQUU7SUFDekQsOEJBQThCO0NBQy9CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgb3MgZnJvbSBcIm9zXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3RzTWFrZXIsIExhbmd1YWdlIH0gZnJvbSBcIi4uLy4uL2NvbnN0cnVjdHMtbWFrZXJcIjtcbmltcG9ydCB7IFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQgfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XG5pbXBvcnQgeyBleHBlY3RNb2R1bGVUb01hdGNoU25hcHNob3QgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG50ZXN0KFwiZ2VuZXJhdGUgc29tZSBtb2R1bGVzXCIsIGFzeW5jICgpID0+IHtcbiAgamVzdC5zZXRUaW1lb3V0KDEyMDAwMCk7XG5cbiAgY29uc3Qgd29ya2RpciA9IGZzLm1rZHRlbXBTeW5jKFxuICAgIHBhdGguam9pbihvcy50bXBkaXIoKSwgXCJtb2R1bGUtZ2VuZXJhdG9yLnRlc3RcIilcbiAgKTtcbiAgY29uc3QgY29uc3RyYWludCA9IG5ldyBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50KFxuICAgIFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL2Vrcy9hd3NANy4wLjFcIlxuICApO1xuXG4gIGNvbnN0IG1ha2VyID0gbmV3IENvbnN0cnVjdHNNYWtlcihcbiAgICB7IGNvZGVNYWtlck91dHB1dDogd29ya2RpciwgdGFyZ2V0TGFuZ3VhZ2U6IExhbmd1YWdlLlRZUEVTQ1JJUFQgfSxcbiAgICBbY29uc3RyYWludF1cbiAgKTtcbiAgYXdhaXQgbWFrZXIuZ2VuZXJhdGUoKTtcblxuICBjb25zdCBvdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgcGF0aC5qb2luKHdvcmtkaXIsIFwibW9kdWxlcy90ZXJyYWZvcm0tYXdzLW1vZHVsZXMvYXdzL2Vrcy50c1wiKSxcbiAgICBcInV0Zi04XCJcbiAgKTtcbiAgZXhwZWN0KG91dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG59KTtcblxuZXhwZWN0TW9kdWxlVG9NYXRjaFNuYXBzaG90KFwibm8gbW9kdWxlIG91dHB1dHNcIiwgXCJnZW5lcmF0b3JcIiwgW1xuICBcIm1vZHVsZS1uby1vdXRwdXRzLnRlc3QuZml4dHVyZS50ZlwiLFxuXSk7XG5cbmV4cGVjdE1vZHVsZVRvTWF0Y2hTbmFwc2hvdChcInR5cGVsZXNzIHZhcmlhYmxlc1wiLCBcImdlbmVyYXRvclwiLCBbXG4gIFwibW9kdWxlLW5vLXZhcmlhYmxlLXR5cGUudGVzdC5maXh0dXJlLnRmXCIsXG5dKTtcblxuZXhwZWN0TW9kdWxlVG9NYXRjaFNuYXBzaG90KFwibm8gbmV3bGluZVwiLCBcImdlbmVyYXRvclwiLCBbXG4gIFwibW9kdWxlLW5vLW5ld2xpbmUtMS50ZXN0LmZpeHR1cmUudGZcIixcbiAgXCJtb2R1bGUtbm8tbmV3bGluZS0yLnRlc3QuZml4dHVyZS50ZlwiLFxuXSk7XG5cbnRlc3QoXCJnZW5lcmF0ZSBtdWx0aXBsZSBhd3MgbW9kdWxlc1wiLCBhc3luYyAoKSA9PiB7XG4gIGplc3Quc2V0VGltZW91dCgxMjAwMDApO1xuXG4gIGNvbnN0IHdvcmtkaXIgPSBmcy5ta2R0ZW1wU3luYyhcbiAgICBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFwibW9kdWxlLWdlbmVyYXRvci1hd3MudGVzdFwiKVxuICApO1xuICBjb25zdCBjb25zdHJhaW50cyA9IFtcbiAgICBuZXcgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludChcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy92cGMvYXdzQDIuNzguMFwiKSxcbiAgICBuZXcgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludChcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy9yZHMtYXVyb3JhL2F3c0A0LjEuMFwiKSxcbiAgXTtcblxuICBjb25zdCBtYWtlciA9IG5ldyBDb25zdHJ1Y3RzTWFrZXIoXG4gICAgeyBjb2RlTWFrZXJPdXRwdXQ6IHdvcmtkaXIsIHRhcmdldExhbmd1YWdlOiBMYW5ndWFnZS5UWVBFU0NSSVBUIH0sXG4gICAgY29uc3RyYWludHNcbiAgKTtcbiAgYXdhaXQgbWFrZXIuZ2VuZXJhdGUoKTtcblxuICBjb25zdCB2cGNPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgcGF0aC5qb2luKHdvcmtkaXIsIFwibW9kdWxlcy90ZXJyYWZvcm0tYXdzLW1vZHVsZXMvYXdzL3ZwYy50c1wiKSxcbiAgICBcInV0Zi04XCJcbiAgKTtcbiAgZXhwZWN0KHZwY091dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG5cbiAgY29uc3QgcmRzT3V0cHV0ID0gZnMucmVhZEZpbGVTeW5jKFxuICAgIHBhdGguam9pbih3b3JrZGlyLCBcIm1vZHVsZXMvdGVycmFmb3JtLWF3cy1tb2R1bGVzL2F3cy9yZHMtYXVyb3JhLnRzXCIpLFxuICAgIFwidXRmLThcIlxuICApO1xuICBleHBlY3QocmRzT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbn0pO1xuXG5leHBlY3RNb2R1bGVUb01hdGNoU25hcHNob3QoXCJnZXRYIHZhcmlhYmxlc1wiLCBcImdlbmVyYXRvclwiLCBbXG4gIFwibW9kdWxlLWdldC14LnRlc3QuZml4dHVyZS50ZlwiLFxuXSk7XG4iXX0=