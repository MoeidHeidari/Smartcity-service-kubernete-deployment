"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logTimespan = exports.setLogger = exports.logger = exports.shouldCheckCodeMakerOutput = exports.readConfigSync = exports.parseConfig = exports.TerraformProviderConstraint = exports.TerraformModuleConstraint = exports.isLocalModule = exports.CONFIG_DEFAULTS = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const process_1 = require("process");
const module_1 = require("./get/module");
const codemaker_1 = require("codemaker");
const CONTEXT_ENV = "CDKTF_CONTEXT_JSON";
const CONFIG_FILE = "cdktf.json";
exports.CONFIG_DEFAULTS = {
    output: "cdktf.out",
    codeMakerOutput: ".gen",
};
function isPresent(input) {
    return Array.isArray(input) && input.length > 0;
}
function getLocalMatch(source) {
    return source.match(/^(\.\/|\.\.\/|\.\\\\|\.\.\\\\)(.*)/);
}
function isLocalModule(source) {
    return getLocalMatch(source) !== null;
}
exports.isLocalModule = isLocalModule;
class TerraformModuleConstraint {
    constructor(item) {
        if (typeof item === "string") {
            const parsed = this.parseDependencyConstraint(item);
            this.name = parsed.name;
            this.source = parsed.source;
            this.fqn = parsed.fqn;
            this.version = parsed.version;
            this.namespace = parsed.namespace;
        }
        else {
            this.source = item.source;
            this.name = item.name;
            this.fqn = item.name;
            this.version = item.version;
            this.namespace = item.namespace;
        }
        const localMatch = getLocalMatch(this.source);
        if (localMatch) {
            this.localSource = `file://${path.join(process.cwd(), this.source)}`;
        }
    }
    get className() {
        return codemaker_1.toPascalCase(this.name.replace(/[-/.]/g, "_"));
    }
    get fileName() {
        return this.namespace ? `${this.namespace}/${this.name}` : this.name;
    }
    parseDependencyConstraint(item) {
        var _a, _b, _c;
        const localMatch = getLocalMatch(item);
        if (localMatch) {
            const fqn = localMatch[2];
            const nameParts = fqn.split("/");
            const name = (_a = nameParts.pop()) !== null && _a !== void 0 ? _a : fqn;
            const namespace = nameParts.pop();
            return {
                name,
                fqn,
                source: item,
                namespace,
            };
        }
        const [source, version] = item.split("@");
        let moduleParts = source.split("//");
        if (module_1.isRegistryModule(moduleParts[0])) {
            const nameParts = moduleParts[0].split("/");
            const provider = nameParts.pop(); // last part is the provider
            let name = (_b = nameParts.pop()) !== null && _b !== void 0 ? _b : source;
            let namespace = `${nameParts.pop()}/${provider}`;
            if (moduleParts.length > 1) {
                const moduleNameParts = moduleParts[1].split("/");
                const moduleName = moduleNameParts.pop();
                namespace = `${namespace}/${name}/${moduleNameParts.join("/")}`;
                name = moduleName !== null && moduleName !== void 0 ? moduleName : name;
            }
            return {
                name,
                source,
                version,
                namespace,
                fqn: source.replace("//", "/").replace(/\./g, "-"),
            };
        }
        let toProcess = item; // process one part at a time
        // strip off any prefix
        const prefixMatch = toProcess.match(/^([a-zA-Z0-9]*)::(.*)/);
        if (prefixMatch) {
            toProcess = prefixMatch[2];
        }
        // strip off any protocl
        const protocolMatch = toProcess.match(/^([a-zA-Z]*):\/\/(.*)/);
        if (protocolMatch) {
            toProcess = protocolMatch[2];
        }
        // anything before last ':' won't contribute
        const colonParts = toProcess.split(":");
        toProcess = (_c = colonParts.pop()) !== null && _c !== void 0 ? _c : toProcess;
        // strip off any port
        const portMatch = toProcess.match(/^[\d]*(.*)/);
        if (portMatch) {
            toProcess = portMatch[1];
        }
        // strip off any hostname
        const hostMatch = toProcess.match(/[^/]*\.[^/]*\/(.*)/);
        if (hostMatch) {
            toProcess = hostMatch[1];
        }
        // strip off any arguments
        const argumentMatch = toProcess.match(/(.*)\?.*/);
        if (argumentMatch) {
            toProcess = argumentMatch[1];
        }
        // strip off any types
        toProcess = toProcess.replace(/\.git|\.hg|\.zip/, "");
        moduleParts = toProcess.split("//");
        const nameParts = moduleParts[0].split("/");
        let name = nameParts.pop();
        let namespace = nameParts.pop();
        if (!name) {
            throw new Error(`Module name should be properly set in ${item}`);
        }
        if (moduleParts.length > 1) {
            const moduleNameParts = moduleParts[1].split("/");
            const moduleName = moduleNameParts.pop();
            if (namespace) {
                namespace = `${namespace}/${name}/${moduleNameParts.join("/")}`;
            }
            else {
                namespace = `${name}/${moduleNameParts.join("/")}`;
            }
            name = moduleName !== null && moduleName !== void 0 ? moduleName : name;
        }
        return {
            name,
            source: item,
            fqn: toProcess.replace("//", "/"),
            namespace,
        };
    }
}
exports.TerraformModuleConstraint = TerraformModuleConstraint;
class TerraformProviderConstraint {
    constructor(item) {
        if (typeof item === "string") {
            const parsed = this.parseDependencyConstraint(item);
            this.name = parsed.name;
            this.fqn = parsed.fqn;
            this.source = parsed.fqn;
            this.version = parsed.version;
            this.namespace = parsed.namespace;
        }
        else {
            this.name = item.name;
            this.fqn = item.name;
            this.version = item.version;
            this.source = item.source;
            this.namespace = item.namespace;
        }
    }
    parseDependencyConstraint(item) {
        const [fqn, version] = item.split("@");
        const nameParts = fqn.split("/");
        const name = nameParts.pop();
        const namespace = nameParts.pop();
        if (!name) {
            throw new Error(`Provider name should be properly set in ${item}`);
        }
        return {
            name,
            source: fqn,
            version,
            fqn,
            namespace,
        };
    }
}
exports.TerraformProviderConstraint = TerraformProviderConstraint;
exports.parseConfig = (configJSON) => {
    var _a, _b;
    const config = {
        ...exports.CONFIG_DEFAULTS,
        ...JSON.parse(configJSON || "{}"),
    };
    if (isPresent(config.terraformModules)) {
        config.terraformModules = (_a = config.terraformModules) === null || _a === void 0 ? void 0 : _a.map((mod) => new TerraformModuleConstraint(mod));
    }
    if (isPresent(config.terraformProviders)) {
        config.terraformProviders = (_b = config.terraformProviders) === null || _b === void 0 ? void 0 : _b.map((provider) => new TerraformProviderConstraint(provider));
    }
    if (config.context) {
        process_1.env[CONTEXT_ENV] = JSON.stringify(config.context);
    }
    return config;
};
function readConfigSync(configFile = path.join(process.cwd(), CONFIG_FILE)) {
    let configFileContent;
    if (fs.existsSync(configFile)) {
        configFileContent = fs.readFileSync(configFile).toString();
    }
    return exports.parseConfig(configFileContent);
}
exports.readConfigSync = readConfigSync;
function shouldCheckCodeMakerOutput(config) {
    return (isPresent(config.terraformModules) || isPresent(config.terraformProviders));
}
exports.shouldCheckCodeMakerOutput = shouldCheckCodeMakerOutput;
exports.logger = {
    ...console,
    debug: (_msg, ..._args) => { },
};
function setLogger(log) {
    exports.logger = log;
}
exports.setLogger = setLogger;
function logTimespan(message) {
    exports.logger.debug(`Start timer for ${message}...`);
    const start = Date.now();
    return function logTimespanEnd() {
        const end = Date.now();
        const duration = end - start;
        exports.logger.debug(`${message} took ${duration}ms`);
    };
}
exports.logTimespan = logTimespan;
//# sourceMappingURL=data:application/json;base64,