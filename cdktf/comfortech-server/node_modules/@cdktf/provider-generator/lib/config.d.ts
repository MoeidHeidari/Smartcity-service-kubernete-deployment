/// <reference types="node" />
import { Language } from "./get/constructs-maker";
export declare const CONFIG_DEFAULTS: {
    output: string;
    codeMakerOutput: string;
};
export interface TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly version?: string;
    readonly fqn: string;
    readonly namespace?: string;
}
export declare function isLocalModule(source: string): boolean;
export declare class TerraformModuleConstraint implements TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly localSource?: string;
    readonly fqn: string;
    readonly version?: string;
    readonly namespace?: string;
    constructor(item: TerraformDependencyConstraint | string);
    get className(): string;
    get fileName(): string;
    private parseDependencyConstraint;
}
export declare class TerraformProviderConstraint implements TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly version?: string;
    readonly fqn: string;
    readonly namespace?: string;
    constructor(item: Omit<TerraformDependencyConstraint, "fqn"> | string);
    private parseDependencyConstraint;
}
export interface Config {
    readonly app?: string;
    readonly language?: Language;
    readonly output: string;
    readonly codeMakerOutput: string;
    terraformProviders?: TerraformProviderConstraint[];
    terraformModules?: TerraformModuleConstraint[];
    readonly context?: {
        [key: string]: any;
    };
}
export declare const parseConfig: (configJSON?: string | undefined) => Config;
export declare function readConfigSync(configFile?: string): Config;
export declare function shouldCheckCodeMakerOutput(config: Config): boolean;
export declare let logger: {
    debug: (_msg: string, ..._args: any[]) => void;
    memory: any;
    assert(condition?: boolean | undefined, ...data: any[]): void;
    assert(value: any, message?: string | undefined, ...optionalParams: any[]): void;
    clear(): void;
    clear(): void;
    count(label?: string | undefined): void;
    count(label?: string | undefined): void;
    countReset(label?: string | undefined): void;
    countReset(label?: string | undefined): void;
    dir(item?: any, options?: any): void;
    dir(obj: any, options?: import("util").InspectOptions | undefined): void;
    dirxml(...data: any[]): void;
    dirxml(...data: any[]): void;
    error(...data: any[]): void;
    error(message?: any, ...optionalParams: any[]): void;
    exception(message?: string | undefined, ...optionalParams: any[]): void;
    group(...data: any[]): void;
    group(...label: any[]): void;
    groupCollapsed(...data: any[]): void;
    groupCollapsed(...label: any[]): void;
    groupEnd(): void;
    groupEnd(): void;
    info(...data: any[]): void;
    info(message?: any, ...optionalParams: any[]): void;
    log(...data: any[]): void;
    log(message?: any, ...optionalParams: any[]): void;
    table(tabularData?: any, properties?: string[] | undefined): void;
    table(tabularData: any, properties?: readonly string[] | undefined): void;
    time(label?: string | undefined): void;
    time(label?: string | undefined): void;
    timeEnd(label?: string | undefined): void;
    timeEnd(label?: string | undefined): void;
    timeLog(label?: string | undefined, ...data: any[]): void;
    timeLog(label?: string | undefined, ...data: any[]): void;
    timeStamp(label?: string | undefined): void;
    timeStamp(label?: string | undefined): void;
    trace(...data: any[]): void;
    trace(message?: any, ...optionalParams: any[]): void;
    warn(...data: any[]): void;
    warn(message?: any, ...optionalParams: any[]): void;
    Console: NodeJS.ConsoleConstructor;
    profile(label?: string | undefined): void;
    profileEnd(label?: string | undefined): void;
};
export declare function setLogger(log: Console): void;
export declare function logTimespan(message: string): () => void;
