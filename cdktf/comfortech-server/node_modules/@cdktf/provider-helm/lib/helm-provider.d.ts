import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface HelmProviderConfig {
    /**
    * Debug indicates whether or not Helm is running in Debug mode.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#debug HelmProvider#debug}
    */
    readonly debug?: boolean | cdktf.IResolvable;
    /**
    * The backend storage driver. Values are: configmap, secret, memory, sql
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#helm_driver HelmProvider#helm_driver}
    */
    readonly helmDriver?: string;
    /**
    * The path to the helm plugins directory
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#plugins_path HelmProvider#plugins_path}
    */
    readonly pluginsPath?: string;
    /**
    * The path to the registry config file
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#registry_config_path HelmProvider#registry_config_path}
    */
    readonly registryConfigPath?: string;
    /**
    * The path to the file containing cached repository indexes
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#repository_cache HelmProvider#repository_cache}
    */
    readonly repositoryCache?: string;
    /**
    * The path to the file containing repository names and URLs
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#repository_config_path HelmProvider#repository_config_path}
    */
    readonly repositoryConfigPath?: string;
    /**
    * Alias name
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#alias HelmProvider#alias}
    */
    readonly alias?: string;
    /**
    * experiments block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#experiments HelmProvider#experiments}
    */
    readonly experiments?: HelmProviderExperiments;
    /**
    * kubernetes block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#kubernetes HelmProvider#kubernetes}
    */
    readonly kubernetes?: HelmProviderKubernetes;
}
export interface HelmProviderExperiments {
    /**
    * Enable full diff by storing the rendered manifest in the state.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#manifest HelmProvider#manifest}
    */
    readonly manifest?: boolean | cdktf.IResolvable;
}
export declare function helmProviderExperimentsToTerraform(struct?: HelmProviderExperiments): any;
export interface HelmProviderKubernetesExec {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#api_version HelmProvider#api_version}
    */
    readonly apiVersion: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#args HelmProvider#args}
    */
    readonly args?: string[];
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#command HelmProvider#command}
    */
    readonly command: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#env HelmProvider#env}
    */
    readonly env?: {
        [key: string]: string;
    };
}
export declare function helmProviderKubernetesExecToTerraform(struct?: HelmProviderKubernetesExec): any;
export interface HelmProviderKubernetes {
    /**
    * PEM-encoded client certificate for TLS authentication.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#client_certificate HelmProvider#client_certificate}
    */
    readonly clientCertificate?: string;
    /**
    * PEM-encoded client certificate key for TLS authentication.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#client_key HelmProvider#client_key}
    */
    readonly clientKey?: string;
    /**
    * PEM-encoded root certificates bundle for TLS authentication.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#cluster_ca_certificate HelmProvider#cluster_ca_certificate}
    */
    readonly clusterCaCertificate?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#config_context HelmProvider#config_context}
    */
    readonly configContext?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#config_context_auth_info HelmProvider#config_context_auth_info}
    */
    readonly configContextAuthInfo?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#config_context_cluster HelmProvider#config_context_cluster}
    */
    readonly configContextCluster?: string;
    /**
    * Path to the kube config file. Can be set with KUBE_CONFIG_PATH.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#config_path HelmProvider#config_path}
    */
    readonly configPath?: string;
    /**
    * A list of paths to kube config files. Can be set with KUBE_CONFIG_PATHS environment variable.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#config_paths HelmProvider#config_paths}
    */
    readonly configPaths?: string[];
    /**
    * The hostname (in form of URI) of Kubernetes master.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#host HelmProvider#host}
    */
    readonly host?: string;
    /**
    * Whether server should be accessed without verifying the TLS certificate.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#insecure HelmProvider#insecure}
    */
    readonly insecure?: boolean | cdktf.IResolvable;
    /**
    * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#password HelmProvider#password}
    */
    readonly password?: string;
    /**
    * URL to the proxy to be used for all API requests
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#proxy_url HelmProvider#proxy_url}
    */
    readonly proxyUrl?: string;
    /**
    * Token to authenticate an service account
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#token HelmProvider#token}
    */
    readonly token?: string;
    /**
    * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#username HelmProvider#username}
    */
    readonly username?: string;
    /**
    * exec block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm#exec HelmProvider#exec}
    */
    readonly exec?: HelmProviderKubernetesExec;
}
export declare function helmProviderKubernetesToTerraform(struct?: HelmProviderKubernetes): any;
/**
* Represents a {@link https://www.terraform.io/docs/providers/helm helm}
*/
export declare class HelmProvider extends cdktf.TerraformProvider {
    static readonly tfResourceType = "helm";
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/helm helm} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options HelmProviderConfig = {}
    */
    constructor(scope: Construct, id: string, config?: HelmProviderConfig);
    private _debug?;
    get debug(): boolean | cdktf.IResolvable | undefined;
    set debug(value: boolean | cdktf.IResolvable | undefined);
    resetDebug(): void;
    get debugInput(): boolean | cdktf.IResolvable | undefined;
    private _helmDriver?;
    get helmDriver(): string | undefined;
    set helmDriver(value: string | undefined);
    resetHelmDriver(): void;
    get helmDriverInput(): string | undefined;
    private _pluginsPath?;
    get pluginsPath(): string | undefined;
    set pluginsPath(value: string | undefined);
    resetPluginsPath(): void;
    get pluginsPathInput(): string | undefined;
    private _registryConfigPath?;
    get registryConfigPath(): string | undefined;
    set registryConfigPath(value: string | undefined);
    resetRegistryConfigPath(): void;
    get registryConfigPathInput(): string | undefined;
    private _repositoryCache?;
    get repositoryCache(): string | undefined;
    set repositoryCache(value: string | undefined);
    resetRepositoryCache(): void;
    get repositoryCacheInput(): string | undefined;
    private _repositoryConfigPath?;
    get repositoryConfigPath(): string | undefined;
    set repositoryConfigPath(value: string | undefined);
    resetRepositoryConfigPath(): void;
    get repositoryConfigPathInput(): string | undefined;
    private _alias?;
    get alias(): string | undefined;
    set alias(value: string | undefined);
    resetAlias(): void;
    get aliasInput(): string | undefined;
    private _experiments?;
    get experiments(): HelmProviderExperiments | undefined;
    set experiments(value: HelmProviderExperiments | undefined);
    resetExperiments(): void;
    get experimentsInput(): HelmProviderExperiments | undefined;
    private _kubernetes?;
    get kubernetes(): HelmProviderKubernetes | undefined;
    set kubernetes(value: HelmProviderKubernetes | undefined);
    resetKubernetes(): void;
    get kubernetesInput(): HelmProviderKubernetes | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
