"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelmProvider = exports.helmProviderKubernetesToTerraform = exports.helmProviderKubernetesExecToTerraform = exports.helmProviderExperimentsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function helmProviderExperimentsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        manifest: cdktf.booleanToTerraform(struct.manifest),
    };
}
exports.helmProviderExperimentsToTerraform = helmProviderExperimentsToTerraform;
function helmProviderKubernetesExecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_version: cdktf.stringToTerraform(struct.apiVersion),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        command: cdktf.stringToTerraform(struct.command),
        env: cdktf.hashMapper(cdktf.stringToTerraform)(struct.env),
    };
}
exports.helmProviderKubernetesExecToTerraform = helmProviderKubernetesExecToTerraform;
function helmProviderKubernetesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_certificate: cdktf.stringToTerraform(struct.clientCertificate),
        client_key: cdktf.stringToTerraform(struct.clientKey),
        cluster_ca_certificate: cdktf.stringToTerraform(struct.clusterCaCertificate),
        config_context: cdktf.stringToTerraform(struct.configContext),
        config_context_auth_info: cdktf.stringToTerraform(struct.configContextAuthInfo),
        config_context_cluster: cdktf.stringToTerraform(struct.configContextCluster),
        config_path: cdktf.stringToTerraform(struct.configPath),
        config_paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.configPaths),
        host: cdktf.stringToTerraform(struct.host),
        insecure: cdktf.booleanToTerraform(struct.insecure),
        password: cdktf.stringToTerraform(struct.password),
        proxy_url: cdktf.stringToTerraform(struct.proxyUrl),
        token: cdktf.stringToTerraform(struct.token),
        username: cdktf.stringToTerraform(struct.username),
        exec: helmProviderKubernetesExecToTerraform(struct.exec),
    };
}
exports.helmProviderKubernetesToTerraform = helmProviderKubernetesToTerraform;
/**
* Represents a {@link https://www.terraform.io/docs/providers/helm helm}
*/
class HelmProvider extends cdktf.TerraformProvider {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/helm helm} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options HelmProviderConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'helm',
            terraformGeneratorMetadata: {
                providerName: 'helm',
                providerVersion: '2.6.0',
                providerVersionConstraint: '~> 2.3'
            },
            terraformProviderSource: 'helm'
        });
        this._debug = config.debug;
        this._helmDriver = config.helmDriver;
        this._pluginsPath = config.pluginsPath;
        this._registryConfigPath = config.registryConfigPath;
        this._repositoryCache = config.repositoryCache;
        this._repositoryConfigPath = config.repositoryConfigPath;
        this._alias = config.alias;
        this._experiments = config.experiments;
        this._kubernetes = config.kubernetes;
    }
    get debug() {
        return this._debug;
    }
    set debug(value) {
        this._debug = value;
    }
    resetDebug() {
        this._debug = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get debugInput() {
        return this._debug;
    }
    get helmDriver() {
        return this._helmDriver;
    }
    set helmDriver(value) {
        this._helmDriver = value;
    }
    resetHelmDriver() {
        this._helmDriver = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get helmDriverInput() {
        return this._helmDriver;
    }
    get pluginsPath() {
        return this._pluginsPath;
    }
    set pluginsPath(value) {
        this._pluginsPath = value;
    }
    resetPluginsPath() {
        this._pluginsPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pluginsPathInput() {
        return this._pluginsPath;
    }
    get registryConfigPath() {
        return this._registryConfigPath;
    }
    set registryConfigPath(value) {
        this._registryConfigPath = value;
    }
    resetRegistryConfigPath() {
        this._registryConfigPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get registryConfigPathInput() {
        return this._registryConfigPath;
    }
    get repositoryCache() {
        return this._repositoryCache;
    }
    set repositoryCache(value) {
        this._repositoryCache = value;
    }
    resetRepositoryCache() {
        this._repositoryCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryCacheInput() {
        return this._repositoryCache;
    }
    get repositoryConfigPath() {
        return this._repositoryConfigPath;
    }
    set repositoryConfigPath(value) {
        this._repositoryConfigPath = value;
    }
    resetRepositoryConfigPath() {
        this._repositoryConfigPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryConfigPathInput() {
        return this._repositoryConfigPath;
    }
    get alias() {
        return this._alias;
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    get experiments() {
        return this._experiments;
    }
    set experiments(value) {
        this._experiments = value;
    }
    resetExperiments() {
        this._experiments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get experimentsInput() {
        return this._experiments;
    }
    get kubernetes() {
        return this._kubernetes;
    }
    set kubernetes(value) {
        this._kubernetes = value;
    }
    resetKubernetes() {
        this._kubernetes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesInput() {
        return this._kubernetes;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            debug: cdktf.booleanToTerraform(this._debug),
            helm_driver: cdktf.stringToTerraform(this._helmDriver),
            plugins_path: cdktf.stringToTerraform(this._pluginsPath),
            registry_config_path: cdktf.stringToTerraform(this._registryConfigPath),
            repository_cache: cdktf.stringToTerraform(this._repositoryCache),
            repository_config_path: cdktf.stringToTerraform(this._repositoryConfigPath),
            alias: cdktf.stringToTerraform(this._alias),
            experiments: helmProviderExperimentsToTerraform(this._experiments),
            kubernetes: helmProviderKubernetesToTerraform(this._kubernetes),
        };
    }
}
exports.HelmProvider = HelmProvider;
_a = JSII_RTTI_SYMBOL_1;
HelmProvider[_a] = { fqn: "@cdktf/provider-helm.HelmProvider", version: "2.0.20" };
// =================
// STATIC PROPERTIES
// =================
HelmProvider.tfResourceType = "helm";
//# sourceMappingURL=data:application/json;base64,