import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface DataHelmTemplateConfig extends cdktf.TerraformMetaArguments {
    /**
    * Kubernetes api versions used for Capabilities.APIVersions
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#api_versions DataHelmTemplate#api_versions}
    */
    readonly apiVersions?: string[];
    /**
    * If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#atomic DataHelmTemplate#atomic}
    */
    readonly atomic?: boolean | cdktf.IResolvable;
    /**
    * Chart name to be installed. A path may be used.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#chart DataHelmTemplate#chart}
    */
    readonly chart: string;
    /**
    * Create the namespace if it does not exist
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#create_namespace DataHelmTemplate#create_namespace}
    */
    readonly createNamespace?: boolean | cdktf.IResolvable;
    /**
    * Run helm dependency update before installing the chart
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#dependency_update DataHelmTemplate#dependency_update}
    */
    readonly dependencyUpdate?: boolean | cdktf.IResolvable;
    /**
    * Add a custom description
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#description DataHelmTemplate#description}
    */
    readonly description?: string;
    /**
    * Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#devel DataHelmTemplate#devel}
    */
    readonly devel?: boolean | cdktf.IResolvable;
    /**
    * If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#disable_openapi_validation DataHelmTemplate#disable_openapi_validation}
    */
    readonly disableOpenapiValidation?: boolean | cdktf.IResolvable;
    /**
    * Prevent hooks from running.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#disable_webhooks DataHelmTemplate#disable_webhooks}
    */
    readonly disableWebhooks?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#id DataHelmTemplate#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * Include CRDs in the templated output
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#include_crds DataHelmTemplate#include_crds}
    */
    readonly includeCrds?: boolean | cdktf.IResolvable;
    /**
    * Set .Release.IsUpgrade instead of .Release.IsInstall
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#is_upgrade DataHelmTemplate#is_upgrade}
    */
    readonly isUpgrade?: boolean | cdktf.IResolvable;
    /**
    * Location of public keys used for verification. Used only if `verify` is true
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#keyring DataHelmTemplate#keyring}
    */
    readonly keyring?: string;
    /**
    * Concatenated rendered chart templates. This corresponds to the output of the `helm template` command.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#manifest DataHelmTemplate#manifest}
    */
    readonly manifest?: string;
    /**
    * Map of rendered chart templates indexed by the template name.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#manifests DataHelmTemplate#manifests}
    */
    readonly manifests?: {
        [key: string]: string;
    };
    /**
    * Release name.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#name DataHelmTemplate#name}
    */
    readonly name: string;
    /**
    * Namespace to install the release into.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#namespace DataHelmTemplate#namespace}
    */
    readonly namespace?: string;
    /**
    * Rendered notes if the chart contains a `NOTES.txt`.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#notes DataHelmTemplate#notes}
    */
    readonly notes?: string;
    /**
    * Pass credentials to all domains
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#pass_credentials DataHelmTemplate#pass_credentials}
    */
    readonly passCredentials?: boolean | cdktf.IResolvable;
    /**
    * If set, render subchart notes along with the parent
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#render_subchart_notes DataHelmTemplate#render_subchart_notes}
    */
    readonly renderSubchartNotes?: boolean | cdktf.IResolvable;
    /**
    * Re-use the given name, even if that name is already used. This is unsafe in production
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#replace DataHelmTemplate#replace}
    */
    readonly replace?: boolean | cdktf.IResolvable;
    /**
    * Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository DataHelmTemplate#repository}
    */
    readonly repository?: string;
    /**
    * The Repositories CA File
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository_ca_file DataHelmTemplate#repository_ca_file}
    */
    readonly repositoryCaFile?: string;
    /**
    * The repositories cert file
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository_cert_file DataHelmTemplate#repository_cert_file}
    */
    readonly repositoryCertFile?: string;
    /**
    * The repositories cert key file
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository_key_file DataHelmTemplate#repository_key_file}
    */
    readonly repositoryKeyFile?: string;
    /**
    * Password for HTTP basic authentication
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository_password DataHelmTemplate#repository_password}
    */
    readonly repositoryPassword?: string;
    /**
    * Username for HTTP basic authentication
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#repository_username DataHelmTemplate#repository_username}
    */
    readonly repositoryUsername?: string;
    /**
    * When upgrading, reset the values to the ones built into the chart
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#reset_values DataHelmTemplate#reset_values}
    */
    readonly resetValues?: boolean | cdktf.IResolvable;
    /**
    * When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is ignored
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#reuse_values DataHelmTemplate#reuse_values}
    */
    readonly reuseValues?: boolean | cdktf.IResolvable;
    /**
    * Only show manifests rendered from the given templates
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#show_only DataHelmTemplate#show_only}
    */
    readonly showOnly?: string[];
    /**
    * If set, no CRDs will be installed. By default, CRDs are installed if not already present
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#skip_crds DataHelmTemplate#skip_crds}
    */
    readonly skipCrds?: boolean | cdktf.IResolvable;
    /**
    * If set, tests will not be rendered. By default, tests are rendered
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#skip_tests DataHelmTemplate#skip_tests}
    */
    readonly skipTests?: boolean | cdktf.IResolvable;
    /**
    * Time in seconds to wait for any individual kubernetes operation.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#timeout DataHelmTemplate#timeout}
    */
    readonly timeout?: number;
    /**
    * Validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#validate DataHelmTemplate#validate}
    */
    readonly validate?: boolean | cdktf.IResolvable;
    /**
    * List of values in raw yaml format to pass to helm.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#values DataHelmTemplate#values}
    */
    readonly values?: string[];
    /**
    * Verify the package before installing it.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#verify DataHelmTemplate#verify}
    */
    readonly verify?: boolean | cdktf.IResolvable;
    /**
    * Specify the exact chart version to install. If this is not specified, the latest version is installed.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#version DataHelmTemplate#version}
    */
    readonly version?: string;
    /**
    * Will wait until all resources are in a ready state before marking the release as successful.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#wait DataHelmTemplate#wait}
    */
    readonly wait?: boolean | cdktf.IResolvable;
    /**
    * postrender block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#postrender DataHelmTemplate#postrender}
    */
    readonly postrender?: DataHelmTemplatePostrender;
    /**
    * set block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#set DataHelmTemplate#set}
    */
    readonly set?: DataHelmTemplateSet[] | cdktf.IResolvable;
    /**
    * set_sensitive block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#set_sensitive DataHelmTemplate#set_sensitive}
    */
    readonly setSensitive?: DataHelmTemplateSetSensitive[] | cdktf.IResolvable;
    /**
    * set_string block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#set_string DataHelmTemplate#set_string}
    */
    readonly setString?: DataHelmTemplateSetString[] | cdktf.IResolvable;
}
export interface DataHelmTemplatePostrender {
    /**
    * The command binary path.
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#binary_path DataHelmTemplate#binary_path}
    */
    readonly binaryPath: string;
}
export declare function dataHelmTemplatePostrenderToTerraform(struct?: DataHelmTemplatePostrenderOutputReference | DataHelmTemplatePostrender): any;
export declare class DataHelmTemplatePostrenderOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): DataHelmTemplatePostrender | undefined;
    set internalValue(value: DataHelmTemplatePostrender | undefined);
    private _binaryPath?;
    get binaryPath(): string;
    set binaryPath(value: string);
    get binaryPathInput(): string | undefined;
}
export interface DataHelmTemplateSet {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#name DataHelmTemplate#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#type DataHelmTemplate#type}
    */
    readonly type?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#value DataHelmTemplate#value}
    */
    readonly value: string;
}
export declare function dataHelmTemplateSetToTerraform(struct?: DataHelmTemplateSet | cdktf.IResolvable): any;
export declare class DataHelmTemplateSetOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataHelmTemplateSet | cdktf.IResolvable | undefined;
    set internalValue(value: DataHelmTemplateSet | cdktf.IResolvable | undefined);
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _type?;
    get type(): string;
    set type(value: string);
    resetType(): void;
    get typeInput(): string | undefined;
    private _value?;
    get value(): string;
    set value(value: string);
    get valueInput(): string | undefined;
}
export declare class DataHelmTemplateSetList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: DataHelmTemplateSet[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataHelmTemplateSetOutputReference;
}
export interface DataHelmTemplateSetSensitive {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#name DataHelmTemplate#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#type DataHelmTemplate#type}
    */
    readonly type?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#value DataHelmTemplate#value}
    */
    readonly value: string;
}
export declare function dataHelmTemplateSetSensitiveToTerraform(struct?: DataHelmTemplateSetSensitive | cdktf.IResolvable): any;
export declare class DataHelmTemplateSetSensitiveOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataHelmTemplateSetSensitive | cdktf.IResolvable | undefined;
    set internalValue(value: DataHelmTemplateSetSensitive | cdktf.IResolvable | undefined);
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _type?;
    get type(): string;
    set type(value: string);
    resetType(): void;
    get typeInput(): string | undefined;
    private _value?;
    get value(): string;
    set value(value: string);
    get valueInput(): string | undefined;
}
export declare class DataHelmTemplateSetSensitiveList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: DataHelmTemplateSetSensitive[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataHelmTemplateSetSensitiveOutputReference;
}
export interface DataHelmTemplateSetString {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#name DataHelmTemplate#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/helm/d/template#value DataHelmTemplate#value}
    */
    readonly value: string;
}
export declare function dataHelmTemplateSetStringToTerraform(struct?: DataHelmTemplateSetString | cdktf.IResolvable): any;
export declare class DataHelmTemplateSetStringOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataHelmTemplateSetString | cdktf.IResolvable | undefined;
    set internalValue(value: DataHelmTemplateSetString | cdktf.IResolvable | undefined);
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _value?;
    get value(): string;
    set value(value: string);
    get valueInput(): string | undefined;
}
export declare class DataHelmTemplateSetStringList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: DataHelmTemplateSetString[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataHelmTemplateSetStringOutputReference;
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/helm/d/template helm_template}
*/
export declare class DataHelmTemplate extends cdktf.TerraformDataSource {
    static readonly tfResourceType = "helm_template";
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/helm/d/template helm_template} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataHelmTemplateConfig
    */
    constructor(scope: Construct, id: string, config: DataHelmTemplateConfig);
    private _apiVersions?;
    get apiVersions(): string[];
    set apiVersions(value: string[]);
    resetApiVersions(): void;
    get apiVersionsInput(): string[] | undefined;
    private _atomic?;
    get atomic(): boolean | cdktf.IResolvable;
    set atomic(value: boolean | cdktf.IResolvable);
    resetAtomic(): void;
    get atomicInput(): boolean | cdktf.IResolvable | undefined;
    private _chart?;
    get chart(): string;
    set chart(value: string);
    get chartInput(): string | undefined;
    private _createNamespace?;
    get createNamespace(): boolean | cdktf.IResolvable;
    set createNamespace(value: boolean | cdktf.IResolvable);
    resetCreateNamespace(): void;
    get createNamespaceInput(): boolean | cdktf.IResolvable | undefined;
    private _dependencyUpdate?;
    get dependencyUpdate(): boolean | cdktf.IResolvable;
    set dependencyUpdate(value: boolean | cdktf.IResolvable);
    resetDependencyUpdate(): void;
    get dependencyUpdateInput(): boolean | cdktf.IResolvable | undefined;
    private _description?;
    get description(): string;
    set description(value: string);
    resetDescription(): void;
    get descriptionInput(): string | undefined;
    private _devel?;
    get devel(): boolean | cdktf.IResolvable;
    set devel(value: boolean | cdktf.IResolvable);
    resetDevel(): void;
    get develInput(): boolean | cdktf.IResolvable | undefined;
    private _disableOpenapiValidation?;
    get disableOpenapiValidation(): boolean | cdktf.IResolvable;
    set disableOpenapiValidation(value: boolean | cdktf.IResolvable);
    resetDisableOpenapiValidation(): void;
    get disableOpenapiValidationInput(): boolean | cdktf.IResolvable | undefined;
    private _disableWebhooks?;
    get disableWebhooks(): boolean | cdktf.IResolvable;
    set disableWebhooks(value: boolean | cdktf.IResolvable);
    resetDisableWebhooks(): void;
    get disableWebhooksInput(): boolean | cdktf.IResolvable | undefined;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _includeCrds?;
    get includeCrds(): boolean | cdktf.IResolvable;
    set includeCrds(value: boolean | cdktf.IResolvable);
    resetIncludeCrds(): void;
    get includeCrdsInput(): boolean | cdktf.IResolvable | undefined;
    private _isUpgrade?;
    get isUpgrade(): boolean | cdktf.IResolvable;
    set isUpgrade(value: boolean | cdktf.IResolvable);
    resetIsUpgrade(): void;
    get isUpgradeInput(): boolean | cdktf.IResolvable | undefined;
    private _keyring?;
    get keyring(): string;
    set keyring(value: string);
    resetKeyring(): void;
    get keyringInput(): string | undefined;
    private _manifest?;
    get manifest(): string;
    set manifest(value: string);
    resetManifest(): void;
    get manifestInput(): string | undefined;
    private _manifests?;
    get manifests(): {
        [key: string]: string;
    };
    set manifests(value: {
        [key: string]: string;
    });
    resetManifests(): void;
    get manifestsInput(): {
        [key: string]: string;
    } | undefined;
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _namespace?;
    get namespace(): string;
    set namespace(value: string);
    resetNamespace(): void;
    get namespaceInput(): string | undefined;
    private _notes?;
    get notes(): string;
    set notes(value: string);
    resetNotes(): void;
    get notesInput(): string | undefined;
    private _passCredentials?;
    get passCredentials(): boolean | cdktf.IResolvable;
    set passCredentials(value: boolean | cdktf.IResolvable);
    resetPassCredentials(): void;
    get passCredentialsInput(): boolean | cdktf.IResolvable | undefined;
    private _renderSubchartNotes?;
    get renderSubchartNotes(): boolean | cdktf.IResolvable;
    set renderSubchartNotes(value: boolean | cdktf.IResolvable);
    resetRenderSubchartNotes(): void;
    get renderSubchartNotesInput(): boolean | cdktf.IResolvable | undefined;
    private _replace?;
    get replace(): boolean | cdktf.IResolvable;
    set replace(value: boolean | cdktf.IResolvable);
    resetReplace(): void;
    get replaceInput(): boolean | cdktf.IResolvable | undefined;
    private _repository?;
    get repository(): string;
    set repository(value: string);
    resetRepository(): void;
    get repositoryInput(): string | undefined;
    private _repositoryCaFile?;
    get repositoryCaFile(): string;
    set repositoryCaFile(value: string);
    resetRepositoryCaFile(): void;
    get repositoryCaFileInput(): string | undefined;
    private _repositoryCertFile?;
    get repositoryCertFile(): string;
    set repositoryCertFile(value: string);
    resetRepositoryCertFile(): void;
    get repositoryCertFileInput(): string | undefined;
    private _repositoryKeyFile?;
    get repositoryKeyFile(): string;
    set repositoryKeyFile(value: string);
    resetRepositoryKeyFile(): void;
    get repositoryKeyFileInput(): string | undefined;
    private _repositoryPassword?;
    get repositoryPassword(): string;
    set repositoryPassword(value: string);
    resetRepositoryPassword(): void;
    get repositoryPasswordInput(): string | undefined;
    private _repositoryUsername?;
    get repositoryUsername(): string;
    set repositoryUsername(value: string);
    resetRepositoryUsername(): void;
    get repositoryUsernameInput(): string | undefined;
    private _resetValues?;
    get resetValues(): boolean | cdktf.IResolvable;
    set resetValues(value: boolean | cdktf.IResolvable);
    resetResetValues(): void;
    get resetValuesInput(): boolean | cdktf.IResolvable | undefined;
    private _reuseValues?;
    get reuseValues(): boolean | cdktf.IResolvable;
    set reuseValues(value: boolean | cdktf.IResolvable);
    resetReuseValues(): void;
    get reuseValuesInput(): boolean | cdktf.IResolvable | undefined;
    private _showOnly?;
    get showOnly(): string[];
    set showOnly(value: string[]);
    resetShowOnly(): void;
    get showOnlyInput(): string[] | undefined;
    private _skipCrds?;
    get skipCrds(): boolean | cdktf.IResolvable;
    set skipCrds(value: boolean | cdktf.IResolvable);
    resetSkipCrds(): void;
    get skipCrdsInput(): boolean | cdktf.IResolvable | undefined;
    private _skipTests?;
    get skipTests(): boolean | cdktf.IResolvable;
    set skipTests(value: boolean | cdktf.IResolvable);
    resetSkipTests(): void;
    get skipTestsInput(): boolean | cdktf.IResolvable | undefined;
    private _timeout?;
    get timeout(): number;
    set timeout(value: number);
    resetTimeout(): void;
    get timeoutInput(): number | undefined;
    private _validate?;
    get validate(): boolean | cdktf.IResolvable;
    set validate(value: boolean | cdktf.IResolvable);
    resetValidate(): void;
    get validateInput(): boolean | cdktf.IResolvable | undefined;
    private _values?;
    get values(): string[];
    set values(value: string[]);
    resetTfValues(): void;
    get valuesInput(): string[] | undefined;
    private _verify?;
    get verify(): boolean | cdktf.IResolvable;
    set verify(value: boolean | cdktf.IResolvable);
    resetVerify(): void;
    get verifyInput(): boolean | cdktf.IResolvable | undefined;
    private _version?;
    get version(): string;
    set version(value: string);
    resetVersion(): void;
    get versionInput(): string | undefined;
    private _wait?;
    get wait(): boolean | cdktf.IResolvable;
    set wait(value: boolean | cdktf.IResolvable);
    resetWait(): void;
    get waitInput(): boolean | cdktf.IResolvable | undefined;
    private _postrender;
    get postrender(): DataHelmTemplatePostrenderOutputReference;
    putPostrender(value: DataHelmTemplatePostrender): void;
    resetPostrender(): void;
    get postrenderInput(): DataHelmTemplatePostrender | undefined;
    private _set;
    get set(): DataHelmTemplateSetList;
    putSet(value: DataHelmTemplateSet[] | cdktf.IResolvable): void;
    resetSet(): void;
    get setInput(): cdktf.IResolvable | DataHelmTemplateSet[] | undefined;
    private _setSensitive;
    get setSensitive(): DataHelmTemplateSetSensitiveList;
    putSetSensitive(value: DataHelmTemplateSetSensitive[] | cdktf.IResolvable): void;
    resetSetSensitive(): void;
    get setSensitiveInput(): cdktf.IResolvable | DataHelmTemplateSetSensitive[] | undefined;
    private _setString;
    get setString(): DataHelmTemplateSetStringList;
    putSetString(value: DataHelmTemplateSetString[] | cdktf.IResolvable): void;
    resetSetString(): void;
    get setStringInput(): cdktf.IResolvable | DataHelmTemplateSetString[] | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
