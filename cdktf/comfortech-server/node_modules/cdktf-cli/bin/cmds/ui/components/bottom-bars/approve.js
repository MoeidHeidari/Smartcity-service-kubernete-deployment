"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApproveBottomBar = void 0;
const react_1 = __importDefault(require("react"));
const ink_select_input_1 = __importDefault(require("ink-select-input"));
const ink_1 = require("ink");
const options = {
    approve: {
        label: "Approve",
        description: `Applies the changes outlined in the plan.`,
    },
    dismiss: {
        label: "Dismiss",
        description: `Does not apply the changes outlined in the plan. This will also prevent depending stacks from planning.`,
    },
    stop: {
        label: "Stop",
        description: `Does not apply the changes. Currently running stacks will be finished, but no new ones will be started.`,
    },
};
function ApproveBottomBar({ stackName, onApprove, onDismiss, onStop, }) {
    const selectOptions = Object.keys(options).map((key) => ({
        ...options[key],
        value: key,
    }));
    const [highlighted, setHighlighted] = react_1.default.useState(selectOptions[0].value);
    const handleHighlight = (item) => {
        setHighlighted(item.value);
    };
    const handleSelect = (item) => {
        switch (item.value) {
            case "approve":
                onApprove();
                break;
            case "dismiss":
                onDismiss();
                break;
            case "stop":
                onStop();
                break;
        }
    };
    return (react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_1.Text, null, "Please review the diff output above for "),
            react_1.default.createElement(ink_1.Text, { bold: true }, stackName)),
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_select_input_1.default, { items: selectOptions, onSelect: handleSelect, onHighlight: handleHighlight }),
            react_1.default.createElement(ink_1.Box, { paddingLeft: 2 },
                react_1.default.createElement(ink_1.Text, null, options[highlighted].description)))));
}
exports.ApproveBottomBar = ApproveBottomBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcm92ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHJvdmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQix3RUFBMkM7QUFDM0MsNkJBQWdDO0FBV2hDLE1BQU0sT0FBTyxHQUEyQjtJQUN0QyxPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsU0FBUztRQUNoQixXQUFXLEVBQUUsMkNBQTJDO0tBQ3pEO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxFQUFFLFNBQVM7UUFDaEIsV0FBVyxFQUFFLHlHQUF5RztLQUN2SDtJQUNELElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxNQUFNO1FBQ2IsV0FBVyxFQUFFLHlHQUF5RztLQUN2SDtDQUNGLENBQUM7QUFDRixTQUFnQixnQkFBZ0IsQ0FBQyxFQUMvQixTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEdBQ0E7SUFDTixNQUFNLGFBQWEsR0FBd0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQ2pFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ1IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2YsS0FBSyxFQUFFLEdBQUc7S0FDWCxDQUFDLENBQ0gsQ0FBQztJQUNGLE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEdBQUcsZUFBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0UsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUF1QixFQUFFLEVBQUU7UUFDbEQsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUM7SUFDRixNQUFNLFlBQVksR0FBRyxDQUFDLElBQXVCLEVBQUUsRUFBRTtRQUMvQyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEIsS0FBSyxTQUFTO2dCQUNaLFNBQVMsRUFBRSxDQUFDO2dCQUNaLE1BQU07WUFDUixLQUFLLFNBQVM7Z0JBQ1osU0FBUyxFQUFFLENBQUM7Z0JBQ1osTUFBTTtZQUNSLEtBQUssTUFBTTtnQkFDVCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxNQUFNO1NBQ1Q7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQ0wsOEJBQUMsU0FBRyxJQUFDLGFBQWEsRUFBQyxRQUFRO1FBQ3pCLDhCQUFDLFNBQUc7WUFDRiw4QkFBQyxVQUFJLG1EQUFnRDtZQUNyRCw4QkFBQyxVQUFJLElBQUMsSUFBSSxVQUFFLFNBQVMsQ0FBUSxDQUN6QjtRQUNOLDhCQUFDLFNBQUc7WUFDRiw4QkFBQywwQkFBVyxJQUNWLEtBQUssRUFBRSxhQUFhLEVBQ3BCLFFBQVEsRUFBRSxZQUFZLEVBQ3RCLFdBQVcsRUFBRSxlQUFlLEdBQzVCO1lBQ0YsOEJBQUMsU0FBRyxJQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNqQiw4QkFBQyxVQUFJLFFBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBUSxDQUMzQyxDQUNGLENBQ0YsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQWhERCw0Q0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSBcImluay1zZWxlY3QtaW5wdXRcIjtcbmltcG9ydCB7IEJveCwgVGV4dCB9IGZyb20gXCJpbmtcIjtcblxudHlwZSBQcm9wcyA9IHtcbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIG9uQXBwcm92ZTogKCkgPT4gdm9pZDtcbiAgb25EaXNtaXNzOiAoKSA9PiB2b2lkO1xuICBvblN0b3A6ICgpID0+IHZvaWQ7XG59O1xuXG50eXBlIE9wdGlvbiA9IHsgbGFiZWw6IHN0cmluZzsgZGVzY3JpcHRpb246IHN0cmluZyB9O1xudHlwZSBUcmFuc2Zvcm1lZE9wdGlvbiA9IE9wdGlvbiAmIHsgdmFsdWU6IHN0cmluZyB9O1xuY29uc3Qgb3B0aW9uczogUmVjb3JkPHN0cmluZywgT3B0aW9uPiA9IHtcbiAgYXBwcm92ZToge1xuICAgIGxhYmVsOiBcIkFwcHJvdmVcIixcbiAgICBkZXNjcmlwdGlvbjogYEFwcGxpZXMgdGhlIGNoYW5nZXMgb3V0bGluZWQgaW4gdGhlIHBsYW4uYCxcbiAgfSxcbiAgZGlzbWlzczoge1xuICAgIGxhYmVsOiBcIkRpc21pc3NcIixcbiAgICBkZXNjcmlwdGlvbjogYERvZXMgbm90IGFwcGx5IHRoZSBjaGFuZ2VzIG91dGxpbmVkIGluIHRoZSBwbGFuLiBUaGlzIHdpbGwgYWxzbyBwcmV2ZW50IGRlcGVuZGluZyBzdGFja3MgZnJvbSBwbGFubmluZy5gLFxuICB9LFxuICBzdG9wOiB7XG4gICAgbGFiZWw6IFwiU3RvcFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRG9lcyBub3QgYXBwbHkgdGhlIGNoYW5nZXMuIEN1cnJlbnRseSBydW5uaW5nIHN0YWNrcyB3aWxsIGJlIGZpbmlzaGVkLCBidXQgbm8gbmV3IG9uZXMgd2lsbCBiZSBzdGFydGVkLmAsXG4gIH0sXG59O1xuZXhwb3J0IGZ1bmN0aW9uIEFwcHJvdmVCb3R0b21CYXIoe1xuICBzdGFja05hbWUsXG4gIG9uQXBwcm92ZSxcbiAgb25EaXNtaXNzLFxuICBvblN0b3AsXG59OiBQcm9wcykge1xuICBjb25zdCBzZWxlY3RPcHRpb25zOiBUcmFuc2Zvcm1lZE9wdGlvbltdID0gT2JqZWN0LmtleXMob3B0aW9ucykubWFwKFxuICAgIChrZXkpID0+ICh7XG4gICAgICAuLi5vcHRpb25zW2tleV0sXG4gICAgICB2YWx1ZToga2V5LFxuICAgIH0pXG4gICk7XG4gIGNvbnN0IFtoaWdobGlnaHRlZCwgc2V0SGlnaGxpZ2h0ZWRdID0gUmVhY3QudXNlU3RhdGUoc2VsZWN0T3B0aW9uc1swXS52YWx1ZSk7XG4gIGNvbnN0IGhhbmRsZUhpZ2hsaWdodCA9IChpdGVtOiB7IHZhbHVlOiBzdHJpbmcgfSkgPT4ge1xuICAgIHNldEhpZ2hsaWdodGVkKGl0ZW0udmFsdWUpO1xuICB9O1xuICBjb25zdCBoYW5kbGVTZWxlY3QgPSAoaXRlbTogeyB2YWx1ZTogc3RyaW5nIH0pID0+IHtcbiAgICBzd2l0Y2ggKGl0ZW0udmFsdWUpIHtcbiAgICAgIGNhc2UgXCJhcHByb3ZlXCI6XG4gICAgICAgIG9uQXBwcm92ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkaXNtaXNzXCI6XG4gICAgICAgIG9uRGlzbWlzcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdG9wXCI6XG4gICAgICAgIG9uU3RvcCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxUZXh0PlBsZWFzZSByZXZpZXcgdGhlIGRpZmYgb3V0cHV0IGFib3ZlIGZvciA8L1RleHQ+XG4gICAgICAgIDxUZXh0IGJvbGQ+e3N0YWNrTmFtZX08L1RleHQ+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxTZWxlY3RJbnB1dFxuICAgICAgICAgIGl0ZW1zPXtzZWxlY3RPcHRpb25zfVxuICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9XG4gICAgICAgICAgb25IaWdobGlnaHQ9e2hhbmRsZUhpZ2hsaWdodH1cbiAgICAgICAgLz5cbiAgICAgICAgPEJveCBwYWRkaW5nTGVmdD17Mn0+XG4gICAgICAgICAgPFRleHQ+e29wdGlvbnNbaGlnaGxpZ2h0ZWRdLmRlc2NyaXB0aW9ufTwvVGV4dD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKTtcbn1cbiJdfQ==