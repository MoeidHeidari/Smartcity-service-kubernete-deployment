"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamView = exports.StreamPrefix = void 0;
const react_1 = __importDefault(require("react"));
const ink_1 = require("ink");
const possibleColors = [
    "red",
    "yellow",
    "blue",
    "magenta",
    "cyan",
    "white",
    "green",
];
let colorPointer = 0;
const colorAssignments = {};
function getColor(stackName) {
    if (colorAssignments[stackName]) {
        return colorAssignments[stackName];
    }
    const color = possibleColors[colorPointer];
    colorPointer = (colorPointer + 1) % possibleColors.length;
    colorAssignments[stackName] = color;
    return color;
}
function StreamPrefix({ stackName }) {
    return (react_1.default.createElement(ink_1.Text, { bold: true, color: getColor(stackName) }, stackName));
}
exports.StreamPrefix = StreamPrefix;
function StreamView({ logs, children, }) {
    return (react_1.default.createElement(ink_1.Box, null,
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_1.Static, { items: logs }, ({ content, id, stackName }) => (react_1.default.createElement(ink_1.Box, { key: id },
                react_1.default.createElement(ink_1.Box, { marginRight: 2 },
                    react_1.default.createElement(StreamPrefix, { stackName: stackName })),
                react_1.default.createElement(ink_1.Box, null,
                    react_1.default.createElement(ink_1.Text, null, content.trim())))))),
        react_1.default.createElement(ink_1.Box, { marginTop: 1 }, children)));
}
exports.StreamView = StreamView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdHJlYW0tdmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLDZCQUF3QztBQUd4QyxNQUFNLGNBQWMsR0FBRztJQUNyQixLQUFLO0lBQ0wsUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0NBQ1IsQ0FBQztBQUVGLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUVyQixNQUFNLGdCQUFnQixHQUEyQixFQUFFLENBQUM7QUFFcEQsU0FBUyxRQUFRLENBQUMsU0FBaUI7SUFDakMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUMvQixPQUFPLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLFlBQVksR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBQzFELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNwQyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFnQixZQUFZLENBQUMsRUFBRSxTQUFTLEVBQXlCO0lBQy9ELE9BQU8sQ0FDTCw4QkFBQyxVQUFJLElBQUMsSUFBSSxRQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQ2xDLFNBQVMsQ0FDTCxDQUNSLENBQUM7QUFDSixDQUFDO0FBTkQsb0NBTUM7QUFFRCxTQUFnQixVQUFVLENBQUMsRUFDekIsSUFBSSxFQUNKLFFBQVEsR0FJVDtJQUNDLE9BQU8sQ0FDTCw4QkFBQyxTQUFHO1FBQ0YsOEJBQUMsU0FBRztZQUNGLDhCQUFDLFlBQU0sSUFBQyxLQUFLLEVBQUUsSUFBSSxJQUNoQixDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDL0IsOEJBQUMsU0FBRyxJQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNWLDhCQUFDLFNBQUcsSUFBQyxXQUFXLEVBQUUsQ0FBQztvQkFDakIsOEJBQUMsWUFBWSxJQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUksQ0FDbEM7Z0JBQ04sOEJBQUMsU0FBRztvQkFDRiw4QkFBQyxVQUFJLFFBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFRLENBQ3pCLENBQ0YsQ0FDUCxDQUNNLENBQ0w7UUFDTiw4QkFBQyxTQUFHLElBQUMsU0FBUyxFQUFFLENBQUMsSUFBRyxRQUFRLENBQU8sQ0FDL0IsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQTFCRCxnQ0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb3gsIFN0YXRpYywgVGV4dCB9IGZyb20gXCJpbmtcIjtcbmltcG9ydCB7IExvZ0VudHJ5IH0gZnJvbSBcIi4uL2hvb2tzL2Nka3RmLXByb2plY3RcIjtcblxuY29uc3QgcG9zc2libGVDb2xvcnMgPSBbXG4gIFwicmVkXCIsXG4gIFwieWVsbG93XCIsXG4gIFwiYmx1ZVwiLFxuICBcIm1hZ2VudGFcIixcbiAgXCJjeWFuXCIsXG4gIFwid2hpdGVcIixcbiAgXCJncmVlblwiLFxuXTtcblxubGV0IGNvbG9yUG9pbnRlciA9IDA7XG5cbmNvbnN0IGNvbG9yQXNzaWdubWVudHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q29sb3Ioc3RhY2tOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoY29sb3JBc3NpZ25tZW50c1tzdGFja05hbWVdKSB7XG4gICAgcmV0dXJuIGNvbG9yQXNzaWdubWVudHNbc3RhY2tOYW1lXTtcbiAgfVxuXG4gIGNvbnN0IGNvbG9yID0gcG9zc2libGVDb2xvcnNbY29sb3JQb2ludGVyXTtcbiAgY29sb3JQb2ludGVyID0gKGNvbG9yUG9pbnRlciArIDEpICUgcG9zc2libGVDb2xvcnMubGVuZ3RoO1xuICBjb2xvckFzc2lnbm1lbnRzW3N0YWNrTmFtZV0gPSBjb2xvcjtcbiAgcmV0dXJuIGNvbG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3RyZWFtUHJlZml4KHsgc3RhY2tOYW1lIH06IHsgc3RhY2tOYW1lOiBzdHJpbmcgfSkge1xuICByZXR1cm4gKFxuICAgIDxUZXh0IGJvbGQgY29sb3I9e2dldENvbG9yKHN0YWNrTmFtZSl9PlxuICAgICAge3N0YWNrTmFtZX1cbiAgICA8L1RleHQ+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTdHJlYW1WaWV3KHtcbiAgbG9ncyxcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGxvZ3M6IExvZ0VudHJ5W107XG4gIGNoaWxkcmVuOiBhbnk7XG59KSB7XG4gIHJldHVybiAoXG4gICAgPEJveD5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxTdGF0aWMgaXRlbXM9e2xvZ3N9PlxuICAgICAgICAgIHsoeyBjb250ZW50LCBpZCwgc3RhY2tOYW1lIH0pID0+IChcbiAgICAgICAgICAgIDxCb3gga2V5PXtpZH0+XG4gICAgICAgICAgICAgIDxCb3ggbWFyZ2luUmlnaHQ9ezJ9PlxuICAgICAgICAgICAgICAgIDxTdHJlYW1QcmVmaXggc3RhY2tOYW1lPXtzdGFja05hbWV9IC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgIDxUZXh0Pntjb250ZW50LnRyaW0oKX08L1RleHQ+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TdGF0aWM+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3ggbWFyZ2luVG9wPXsxfT57Y2hpbGRyZW59PC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59XG4iXX0=