"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Outputs = void 0;
const react_1 = __importDefault(require("react"));
const ink_1 = require("ink");
const terraform_1 = require("../../../../lib/models/terraform");
function sanitize(value) {
    if (typeof value === "object") {
        return JSON.stringify(value, null, 2);
    }
    return value;
}
function Output({ name, value }) {
    return (react_1.default.createElement(ink_1.Box, { key: name },
        react_1.default.createElement(ink_1.Text, null,
            name,
            " = ",
            value.sensitive ? "<sensitive>" : sanitize(value.value))));
}
// Puts the top-level outputs before the nested outputs
const compareOutputs = (value) => ([k1], [k2]) => {
    if (terraform_1.isTerraformOutput(value[k1]) && terraform_1.isTerraformOutput(value[k2])) {
        return k1.localeCompare(k2);
    }
    if (terraform_1.isTerraformOutput(value[k1])) {
        return -1;
    }
    if (terraform_1.isTerraformOutput(value[k2])) {
        return 1;
    }
    return k1.localeCompare(k2);
};
function NestedOutput({ name, value, indentationLevel = 0, }) {
    // This is a safe-guard against infinite recursion
    if (indentationLevel > 500) {
        return react_1.default.createElement(react_1.default.Fragment, null);
    }
    if (terraform_1.isTerraformOutput(value)) {
        return (react_1.default.createElement(ink_1.Box, { key: name },
            react_1.default.createElement(Output, { name: name, value: value })));
    }
    return (react_1.default.createElement(ink_1.Box, { flexDirection: "column", key: name, marginLeft: 2, marginBottom: 1 },
        react_1.default.createElement(ink_1.Text, { bold: true }, name),
        react_1.default.createElement(ink_1.Box, { marginLeft: indentationLevel * 2, flexDirection: "column" }, Object.entries(value)
            .sort(compareOutputs(value))
            .map(([k, v]) => (react_1.default.createElement(NestedOutput, { indentationLevel: indentationLevel + 1, key: k, name: k, value: v }))))));
}
exports.Outputs = ({ outputs }) => {
    return (react_1.default.createElement(ink_1.Box, { flexDirection: "column" }, Object.entries(outputs).map(([key, value]) => (react_1.default.createElement(ink_1.Box, { key: key },
        react_1.default.createElement(NestedOutput, { name: key, value: value }))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm91dHB1dHMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUMxQiw2QkFBZ0M7QUFFaEMsZ0VBRzBDO0FBSzFDLFNBQVMsUUFBUSxDQUFDLEtBQVU7SUFDMUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRDO0lBQ3ZFLE9BQU8sQ0FDTCw4QkFBQyxTQUFHLElBQUMsR0FBRyxFQUFFLElBQUk7UUFDWiw4QkFBQyxVQUFJO1lBQ0YsSUFBSTs7WUFBSyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQzVELENBQ0gsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELHVEQUF1RDtBQUN2RCxNQUFNLGNBQWMsR0FDbEIsQ0FBQyxLQUE2QixFQUFFLEVBQUUsQ0FDbEMsQ0FBQyxDQUFDLEVBQUUsQ0FBZ0IsRUFBRSxDQUFDLEVBQUUsQ0FBZ0IsRUFBVSxFQUFFO0lBQ25ELElBQUksNkJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksNkJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDaEUsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsSUFBSSw2QkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNoQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ1g7SUFFRCxJQUFJLDZCQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUosU0FBUyxZQUFZLENBQUMsRUFDcEIsSUFBSSxFQUNKLEtBQUssRUFDTCxnQkFBZ0IsR0FBRyxDQUFDLEdBS3JCO0lBQ0Msa0RBQWtEO0lBQ2xELElBQUksZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO1FBQzFCLE9BQU8sNkRBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSw2QkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM1QixPQUFPLENBQ0wsOEJBQUMsU0FBRyxJQUFDLEdBQUcsRUFBRSxJQUFJO1lBQ1osOEJBQUMsTUFBTSxJQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBSSxDQUNoQyxDQUNQLENBQUM7S0FDSDtJQUVELE9BQU8sQ0FDTCw4QkFBQyxTQUFHLElBQUMsYUFBYSxFQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUM7UUFDbkUsOEJBQUMsVUFBSSxJQUFDLElBQUksVUFBRSxJQUFJLENBQVE7UUFDeEIsOEJBQUMsU0FBRyxJQUFDLFVBQVUsRUFBRSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsYUFBYSxFQUFDLFFBQVEsSUFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDZiw4QkFBQyxZQUFZLElBQ1gsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBQUcsQ0FBQyxFQUN0QyxHQUFHLEVBQUUsQ0FBQyxFQUNOLElBQUksRUFBRSxDQUFDLEVBQ1AsS0FBSyxFQUFFLENBQUMsR0FDUixDQUNILENBQUMsQ0FDQSxDQUNGLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFWSxRQUFBLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFpQixFQUFzQixFQUFFO0lBQ3hFLE9BQU8sQ0FDTCw4QkFBQyxTQUFHLElBQUMsYUFBYSxFQUFDLFFBQVEsSUFDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDN0MsOEJBQUMsU0FBRyxJQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ1gsOEJBQUMsWUFBWSxJQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBSSxDQUNyQyxDQUNQLENBQUMsQ0FDRSxDQUNQLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUZXh0LCBCb3ggfSBmcm9tIFwiaW5rXCI7XG5pbXBvcnQgeyBOZXN0ZWRUZXJyYWZvcm1PdXRwdXRzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xpYi9vdXRwdXRcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybU91dHB1dCxcbiAgaXNUZXJyYWZvcm1PdXRwdXQsXG59IGZyb20gXCIuLi8uLi8uLi8uLi9saWIvbW9kZWxzL3RlcnJhZm9ybVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE91dHB1dHNDb25maWcge1xuICBvdXRwdXRzOiBOZXN0ZWRUZXJyYWZvcm1PdXRwdXRzO1xufVxuZnVuY3Rpb24gc2FuaXRpemUodmFsdWU6IGFueSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAyKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gT3V0cHV0KHsgbmFtZSwgdmFsdWUgfTogeyBuYW1lOiBzdHJpbmc7IHZhbHVlOiBUZXJyYWZvcm1PdXRwdXQgfSkge1xuICByZXR1cm4gKFxuICAgIDxCb3gga2V5PXtuYW1lfT5cbiAgICAgIDxUZXh0PlxuICAgICAgICB7bmFtZX0gPSB7dmFsdWUuc2Vuc2l0aXZlID8gXCI8c2Vuc2l0aXZlPlwiIDogc2FuaXRpemUodmFsdWUudmFsdWUpfVxuICAgICAgPC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufVxuXG4vLyBQdXRzIHRoZSB0b3AtbGV2ZWwgb3V0cHV0cyBiZWZvcmUgdGhlIG5lc3RlZCBvdXRwdXRzXG5jb25zdCBjb21wYXJlT3V0cHV0cyA9XG4gICh2YWx1ZTogTmVzdGVkVGVycmFmb3JtT3V0cHV0cykgPT5cbiAgKFtrMV06IFtzdHJpbmcsIGFueV0sIFtrMl06IFtzdHJpbmcsIGFueV0pOiBudW1iZXIgPT4ge1xuICAgIGlmIChpc1RlcnJhZm9ybU91dHB1dCh2YWx1ZVtrMV0pICYmIGlzVGVycmFmb3JtT3V0cHV0KHZhbHVlW2syXSkpIHtcbiAgICAgIHJldHVybiBrMS5sb2NhbGVDb21wYXJlKGsyKTtcbiAgICB9XG5cbiAgICBpZiAoaXNUZXJyYWZvcm1PdXRwdXQodmFsdWVbazFdKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChpc1RlcnJhZm9ybU91dHB1dCh2YWx1ZVtrMl0pKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGsxLmxvY2FsZUNvbXBhcmUoazIpO1xuICB9O1xuXG5mdW5jdGlvbiBOZXN0ZWRPdXRwdXQoe1xuICBuYW1lLFxuICB2YWx1ZSxcbiAgaW5kZW50YXRpb25MZXZlbCA9IDAsXG59OiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IE5lc3RlZFRlcnJhZm9ybU91dHB1dHM7XG4gIGluZGVudGF0aW9uTGV2ZWw/OiBudW1iZXI7XG59KSB7XG4gIC8vIFRoaXMgaXMgYSBzYWZlLWd1YXJkIGFnYWluc3QgaW5maW5pdGUgcmVjdXJzaW9uXG4gIGlmIChpbmRlbnRhdGlvbkxldmVsID4gNTAwKSB7XG4gICAgcmV0dXJuIDw+PC8+O1xuICB9XG4gIGlmIChpc1RlcnJhZm9ybU91dHB1dCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveCBrZXk9e25hbWV9PlxuICAgICAgICA8T3V0cHV0IG5hbWU9e25hbWV9IHZhbHVlPXt2YWx1ZX0gLz5cbiAgICAgIDwvQm94PlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGtleT17bmFtZX0gbWFyZ2luTGVmdD17Mn0gbWFyZ2luQm90dG9tPXsxfT5cbiAgICAgIDxUZXh0IGJvbGQ+e25hbWV9PC9UZXh0PlxuICAgICAgPEJveCBtYXJnaW5MZWZ0PXtpbmRlbnRhdGlvbkxldmVsICogMn0gZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICB7T2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAgICAgLnNvcnQoY29tcGFyZU91dHB1dHModmFsdWUpKVxuICAgICAgICAgIC5tYXAoKFtrLCB2XSkgPT4gKFxuICAgICAgICAgICAgPE5lc3RlZE91dHB1dFxuICAgICAgICAgICAgICBpbmRlbnRhdGlvbkxldmVsPXtpbmRlbnRhdGlvbkxldmVsICsgMX1cbiAgICAgICAgICAgICAga2V5PXtrfVxuICAgICAgICAgICAgICBuYW1lPXtrfVxuICAgICAgICAgICAgICB2YWx1ZT17dn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IE91dHB1dHMgPSAoeyBvdXRwdXRzIH06IE91dHB1dHNDb25maWcpOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAge09iamVjdC5lbnRyaWVzKG91dHB1dHMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoXG4gICAgICAgIDxCb3gga2V5PXtrZXl9PlxuICAgICAgICAgIDxOZXN0ZWRPdXRwdXQgbmFtZT17a2V5fSB2YWx1ZT17dmFsdWV9IC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgKSl9XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuIl19