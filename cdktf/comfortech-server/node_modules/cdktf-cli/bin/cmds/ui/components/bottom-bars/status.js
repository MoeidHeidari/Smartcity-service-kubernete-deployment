"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchStatusBottomBar = exports.ExecutionStatusBottomBar = exports.localizeStacks = exports.StatusBottomBar = void 0;
const react_1 = __importDefault(require("react"));
const ink_1 = require("ink");
const ink_spinner_1 = __importDefault(require("ink-spinner"));
function StatusBottomBar({ status, children, }) {
    switch (status.type) {
        case "done": {
            if (children) {
                return children;
            }
            return react_1.default.createElement(react_1.default.Fragment, null);
        }
        // This is handled on the outside of this component
        case "waiting for approval of stack":
            return react_1.default.createElement(react_1.default.Fragment, null);
        case "starting":
            return (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Box, { marginRight: 2 },
                    react_1.default.createElement(ink_1.Text, null,
                        react_1.default.createElement(ink_spinner_1.default, { type: "dots" }))),
                react_1.default.createElement(ink_1.Box, null,
                    react_1.default.createElement(ink_1.Text, { bold: true }, "Starting"))));
        case "synthesizing":
            return (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Box, { marginRight: 2 },
                    react_1.default.createElement(ink_1.Text, null,
                        react_1.default.createElement(ink_spinner_1.default, { type: "dots" }))),
                react_1.default.createElement(ink_1.Box, null,
                    react_1.default.createElement(ink_1.Text, { bold: true }, "Synthesizing"))));
        case "running":
            return (react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Box, { marginRight: 2 },
                    react_1.default.createElement(ink_1.Text, null,
                        react_1.default.createElement(ink_spinner_1.default, { type: "dots" }))),
                react_1.default.createElement(ink_1.Box, null,
                    react_1.default.createElement(ink_1.Text, { bold: true }, "Processing"))));
    }
}
exports.StatusBottomBar = StatusBottomBar;
function localizeStacks(num) {
    if (num === 1) {
        return "1 Stack";
    }
    return `${num} Stacks`;
}
exports.localizeStacks = localizeStacks;
function Execution({ inProgress, finished, pending, actionName, }) {
    return (react_1.default.createElement(ink_1.Box, { marginTop: 1 },
        react_1.default.createElement(ink_1.Box, { marginRight: 5 },
            react_1.default.createElement(ink_1.Text, null,
                localizeStacks(inProgress.length),
                " ",
                actionName)),
        react_1.default.createElement(ink_1.Box, { marginRight: 5 },
            react_1.default.createElement(ink_1.Text, null,
                localizeStacks(finished.length),
                " done")),
        react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_1.Text, null,
                localizeStacks(pending.length),
                " waiting"))));
}
function ExecutionStatusBottomBar({ status, children, actionName, }) {
    if ((status === null || status === void 0 ? void 0 : status.type) !== "running") {
        return react_1.default.createElement(StatusBottomBar, { status: status }, children);
    }
    return (react_1.default.createElement(Execution, { inProgress: status.inProgress, finished: status.finished, pending: status.pending, actionName: actionName }));
}
exports.ExecutionStatusBottomBar = ExecutionStatusBottomBar;
function WatchStatusBottomBar({ currentState, }) {
    switch (currentState.type) {
        case "waiting": {
            return (react_1.default.createElement(ink_1.Box, { marginTop: 1 },
                react_1.default.createElement(ink_spinner_1.default, null),
                react_1.default.createElement(ink_1.Box, { marginLeft: 1 },
                    react_1.default.createElement(ink_1.Text, null, "Waiting for changes..."))));
        }
        case "stopped": {
            return (react_1.default.createElement(ink_1.Box, { marginTop: 1 },
                react_1.default.createElement(ink_1.Text, null, "Watch was stopped")));
        }
        case "running": {
            if (currentState.inProgress.length +
                currentState.finished.length +
                currentState.pending.length ===
                0) {
                return (react_1.default.createElement(ink_1.Box, { marginTop: 1 },
                    react_1.default.createElement(ink_spinner_1.default, null),
                    react_1.default.createElement(ink_1.Box, { marginLeft: 1 },
                        react_1.default.createElement(ink_1.Text, null, "Synthesizing..."))));
            }
            return (react_1.default.createElement(Execution, { inProgress: currentState.inProgress, finished: currentState.finished, pending: currentState.pending, actionName: "deploying" }));
        }
    }
}
exports.WatchStatusBottomBar = WatchStatusBottomBar;
//# sourceMappingURL=data:application/json;base64,