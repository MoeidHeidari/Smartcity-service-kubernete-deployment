"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Get = void 0;
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const ink_spinner_1 = __importDefault(require("ink-spinner"));
const provider_generator_1 = require("@cdktf/provider-generator");
const checkpoint_1 = require("../../../lib/checkpoint");
const lib_1 = require("../../../lib");
exports.Get = ({ codeMakerOutput, language, constraints, }) => {
    const [currentStatus, setCurrentStatus] = react_1.default.useState(lib_1.GetStatus.STARTING);
    const { exit } = ink_1.useApp();
    const constructsOptions = {
        codeMakerOutput: codeMakerOutput,
        targetLanguage: language,
    };
    react_1.default.useEffect(() => {
        const runGet = async () => {
            try {
                await lib_1.get({
                    constraints,
                    constructsOptions,
                    onUpdate: setCurrentStatus,
                    reportTelemetry: (payload) => checkpoint_1.sendTelemetry("get", {
                        language: payload.targetLanguage,
                        ...payload.trackingPayload,
                    }),
                });
            }
            catch (e) {
                console.error(e);
                exit(e);
            }
        };
        runGet();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // only once, we don't expect props to change
    react_1.default.useEffect(() => {
        if (currentStatus === lib_1.GetStatus.DONE) {
            exit();
        }
        if (currentStatus === lib_1.GetStatus.ERROR) {
            exit(new Error(`ERROR: synthesis failed, app expected to create "${codeMakerOutput}"`));
        }
    }, [currentStatus]);
    const isGenerating = currentStatus != lib_1.GetStatus.DONE;
    const statusText = `${currentStatus}...`;
    const jsonTerraformOutput = (react_1.default.createElement(ink_1.Text, null,
        "Generated ",
        react_1.default.createElement(ink_1.Text, { color: "green" }, language),
        " constructs in the output directory: ",
        react_1.default.createElement(ink_1.Text, { bold: true }, codeMakerOutput),
        language === provider_generator_1.Language.GO && (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(ink_1.Newline, null),
            react_1.default.createElement(ink_1.Newline, null),
            react_1.default.createElement(ink_1.Text, null,
                "The generated code depends on",
                " ",
                react_1.default.createElement(ink_1.Text, { color: "cyan" }, "jsii-runtime-go"),
                ". If you haven't yet installed it, you can run",
                " ",
                react_1.default.createElement(ink_1.Text, { color: "blueBright" }, "go mod tidy"),
                " to automatically install it.")))));
    return (react_1.default.createElement(ink_1.Box, null, isGenerating ? (react_1.default.createElement(react_1.Fragment, null,
        react_1.default.createElement(ink_1.Text, { color: "green" },
            react_1.default.createElement(ink_spinner_1.default, { type: "dots" })),
        react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },
            react_1.default.createElement(ink_1.Text, null, statusText)))) : (react_1.default.createElement(react_1.Fragment, null,
        react_1.default.createElement(ink_1.Box, null, jsonTerraformOutput)))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQXdDO0FBRXhDLDZCQUFpRDtBQUNqRCw4REFBa0M7QUFDbEMsa0VBQXlFO0FBQ3pFLHdEQUF3RDtBQUN4RCxzQ0FBd0Q7QUFRM0MsUUFBQSxHQUFHLEdBQUcsQ0FBQyxFQUNsQixlQUFlLEVBQ2YsUUFBUSxFQUNSLFdBQVcsR0FDRCxFQUFzQixFQUFFO0lBQ2xDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxlQUFLLENBQUMsUUFBUSxDQUN0RCxlQUFNLENBQUMsUUFBUSxDQUNoQixDQUFDO0lBQ0YsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLFlBQU0sRUFBRSxDQUFDO0lBRTFCLE1BQU0saUJBQWlCLEdBQWU7UUFDcEMsZUFBZSxFQUFFLGVBQWU7UUFDaEMsY0FBYyxFQUFFLFFBQVE7S0FDekIsQ0FBQztJQUVGLGVBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ25CLE1BQU0sTUFBTSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ3hCLElBQUk7Z0JBQ0YsTUFBTSxTQUFHLENBQUM7b0JBQ1IsV0FBVztvQkFDWCxpQkFBaUI7b0JBQ2pCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLGVBQWUsRUFBRSxDQUFDLE9BR2pCLEVBQUUsRUFBRSxDQUNILDBCQUFhLENBQUMsS0FBSyxFQUFFO3dCQUNuQixRQUFRLEVBQUUsT0FBTyxDQUFDLGNBQWM7d0JBQ2hDLEdBQUcsT0FBTyxDQUFDLGVBQWU7cUJBQzNCLENBQUM7aUJBQ0wsQ0FBQyxDQUFDO2FBQ0o7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDVDtRQUNILENBQUMsQ0FBQztRQUNGLE1BQU0sRUFBRSxDQUFDO1FBQ1QsdURBQXVEO0lBQ3pELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztJQUVyRCxlQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNuQixJQUFJLGFBQWEsS0FBSyxlQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2pDLElBQUksRUFBRSxDQUFDO1NBQ1I7UUFDRCxJQUFJLGFBQWEsS0FBSyxlQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2xDLElBQUksQ0FDRixJQUFJLEtBQUssQ0FDUCxvREFBb0QsZUFBZSxHQUFHLENBQ3ZFLENBQ0YsQ0FBQztTQUNIO0lBQ0gsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVwQixNQUFNLFlBQVksR0FBWSxhQUFhLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRyxHQUFHLGFBQWEsS0FBSyxDQUFDO0lBQ3pDLE1BQU0sbUJBQW1CLEdBQUcsQ0FDMUIsOEJBQUMsVUFBSTs7UUFDTyw4QkFBQyxVQUFJLElBQUMsS0FBSyxFQUFDLE9BQU8sSUFBRSxRQUFRLENBQVE7O1FBQ3BDLDhCQUFDLFVBQUksSUFBQyxJQUFJLFVBQUUsZUFBZSxDQUFRO1FBQzdDLFFBQVEsS0FBSyw2QkFBUSxDQUFDLEVBQUUsSUFBSSxDQUMzQjtZQUNFLDhCQUFDLGFBQU8sT0FBRztZQUNYLDhCQUFDLGFBQU8sT0FBRztZQUNYLDhCQUFDLFVBQUk7O2dCQUMyQixHQUFHO2dCQUNqQyw4QkFBQyxVQUFJLElBQUMsS0FBSyxFQUFDLE1BQU0sc0JBQXVCOztnQkFDZixHQUFHO2dCQUM3Qiw4QkFBQyxVQUFJLElBQUMsS0FBSyxFQUFDLFlBQVksa0JBQW1CO2dEQUV0QyxDQUNOLENBQ0osQ0FDSSxDQUNSLENBQUM7SUFFRixPQUFPLENBQ0wsOEJBQUMsU0FBRyxRQUNELFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FDZCw4QkFBQyxnQkFBUTtRQUNQLDhCQUFDLFVBQUksSUFBQyxLQUFLLEVBQUMsT0FBTztZQUNqQiw4QkFBQyxxQkFBTyxJQUFDLElBQUksRUFBQyxNQUFNLEdBQUcsQ0FDbEI7UUFDUCw4QkFBQyxTQUFHLElBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsOEJBQUMsVUFBSSxRQUFFLFVBQVUsQ0FBUSxDQUNyQixDQUNHLENBQ1osQ0FBQyxDQUFDLENBQUMsQ0FDRiw4QkFBQyxnQkFBUTtRQUNQLDhCQUFDLFNBQUcsUUFBRSxtQkFBbUIsQ0FBTyxDQUN2QixDQUNaLENBQ0csQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFRleHQsIEJveCwgdXNlQXBwLCBOZXdsaW5lIH0gZnJvbSBcImlua1wiO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSBcImluay1zcGlubmVyXCI7XG5pbXBvcnQgeyBMYW5ndWFnZSwgR2V0T3B0aW9ucywgY29uZmlnIH0gZnJvbSBcIkBjZGt0Zi9wcm92aWRlci1nZW5lcmF0b3JcIjtcbmltcG9ydCB7IHNlbmRUZWxlbWV0cnkgfSBmcm9tIFwiLi4vLi4vLi4vbGliL2NoZWNrcG9pbnRcIjtcbmltcG9ydCB7IGdldCwgR2V0U3RhdHVzIGFzIFN0YXR1cyB9IGZyb20gXCIuLi8uLi8uLi9saWJcIjtcblxuaW50ZXJmYWNlIEdldENvbmZpZyB7XG4gIGNvZGVNYWtlck91dHB1dDogc3RyaW5nO1xuICBsYW5ndWFnZTogTGFuZ3VhZ2U7XG4gIGNvbnN0cmFpbnRzOiBjb25maWcuVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnRbXTtcbn1cblxuZXhwb3J0IGNvbnN0IEdldCA9ICh7XG4gIGNvZGVNYWtlck91dHB1dCxcbiAgbGFuZ3VhZ2UsXG4gIGNvbnN0cmFpbnRzLFxufTogR2V0Q29uZmlnKTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgY29uc3QgW2N1cnJlbnRTdGF0dXMsIHNldEN1cnJlbnRTdGF0dXNdID0gUmVhY3QudXNlU3RhdGU8U3RhdHVzPihcbiAgICBTdGF0dXMuU1RBUlRJTkdcbiAgKTtcbiAgY29uc3QgeyBleGl0IH0gPSB1c2VBcHAoKTtcblxuICBjb25zdCBjb25zdHJ1Y3RzT3B0aW9uczogR2V0T3B0aW9ucyA9IHtcbiAgICBjb2RlTWFrZXJPdXRwdXQ6IGNvZGVNYWtlck91dHB1dCxcbiAgICB0YXJnZXRMYW5ndWFnZTogbGFuZ3VhZ2UsXG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBydW5HZXQgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBnZXQoe1xuICAgICAgICAgIGNvbnN0cmFpbnRzLFxuICAgICAgICAgIGNvbnN0cnVjdHNPcHRpb25zLFxuICAgICAgICAgIG9uVXBkYXRlOiBzZXRDdXJyZW50U3RhdHVzLFxuICAgICAgICAgIHJlcG9ydFRlbGVtZXRyeTogKHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHRhcmdldExhbmd1YWdlOiBzdHJpbmc7XG4gICAgICAgICAgICB0cmFja2luZ1BheWxvYWQ6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgICAgICAgfSkgPT5cbiAgICAgICAgICAgIHNlbmRUZWxlbWV0cnkoXCJnZXRcIiwge1xuICAgICAgICAgICAgICBsYW5ndWFnZTogcGF5bG9hZC50YXJnZXRMYW5ndWFnZSxcbiAgICAgICAgICAgICAgLi4ucGF5bG9hZC50cmFja2luZ1BheWxvYWQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIGV4aXQoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBydW5HZXQoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTsgLy8gb25seSBvbmNlLCB3ZSBkb24ndCBleHBlY3QgcHJvcHMgdG8gY2hhbmdlXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudFN0YXR1cyA9PT0gU3RhdHVzLkRPTkUpIHtcbiAgICAgIGV4aXQoKTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRTdGF0dXMgPT09IFN0YXR1cy5FUlJPUikge1xuICAgICAgZXhpdChcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgIGBFUlJPUjogc3ludGhlc2lzIGZhaWxlZCwgYXBwIGV4cGVjdGVkIHRvIGNyZWF0ZSBcIiR7Y29kZU1ha2VyT3V0cHV0fVwiYFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfSwgW2N1cnJlbnRTdGF0dXNdKTtcblxuICBjb25zdCBpc0dlbmVyYXRpbmc6IGJvb2xlYW4gPSBjdXJyZW50U3RhdHVzICE9IFN0YXR1cy5ET05FO1xuICBjb25zdCBzdGF0dXNUZXh0ID0gYCR7Y3VycmVudFN0YXR1c30uLi5gO1xuICBjb25zdCBqc29uVGVycmFmb3JtT3V0cHV0ID0gKFxuICAgIDxUZXh0PlxuICAgICAgR2VuZXJhdGVkIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj57bGFuZ3VhZ2V9PC9UZXh0PiBjb25zdHJ1Y3RzIGluIHRoZSBvdXRwdXRcbiAgICAgIGRpcmVjdG9yeTogPFRleHQgYm9sZD57Y29kZU1ha2VyT3V0cHV0fTwvVGV4dD5cbiAgICAgIHtsYW5ndWFnZSA9PT0gTGFuZ3VhZ2UuR08gJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgICAgPE5ld2xpbmUgLz5cbiAgICAgICAgICA8VGV4dD5cbiAgICAgICAgICAgIFRoZSBnZW5lcmF0ZWQgY29kZSBkZXBlbmRzIG9ue1wiIFwifVxuICAgICAgICAgICAgPFRleHQgY29sb3I9XCJjeWFuXCI+anNpaS1ydW50aW1lLWdvPC9UZXh0Pi4gSWYgeW91IGhhdmVuJmFwb3M7dCB5ZXRcbiAgICAgICAgICAgIGluc3RhbGxlZCBpdCwgeW91IGNhbiBydW57XCIgXCJ9XG4gICAgICAgICAgICA8VGV4dCBjb2xvcj1cImJsdWVCcmlnaHRcIj5nbyBtb2QgdGlkeTwvVGV4dD4gdG8gYXV0b21hdGljYWxseSBpbnN0YWxsXG4gICAgICAgICAgICBpdC5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8L1RleHQ+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAge2lzR2VuZXJhdGluZyA/IChcbiAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5cbiAgICAgICAgICAgIDxTcGlubmVyIHR5cGU9XCJkb3RzXCIgLz5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPEJveCBwYWRkaW5nTGVmdD17MX0+XG4gICAgICAgICAgICA8VGV4dD57c3RhdHVzVGV4dH08L1RleHQ+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICApIDogKFxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgPEJveD57anNvblRlcnJhZm9ybU91dHB1dH08L0JveD5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICl9XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuIl19