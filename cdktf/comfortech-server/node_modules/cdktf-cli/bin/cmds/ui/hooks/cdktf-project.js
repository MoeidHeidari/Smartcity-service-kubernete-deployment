"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCdktfProject = void 0;
const ink_1 = require("ink");
const react_1 = require("react");
const lib_1 = require("../../../../lib/");
function useCdktfProject(opts, projectCallback) {
    const { exit } = ink_1.useApp();
    const [id, setID] = react_1.useState(0);
    const [logEntries, setLogEntries] = react_1.useState([]);
    const [returnValue, setReturnValue] = react_1.useState();
    const [status, setStatus] = react_1.useState({ type: "starting" });
    const updateRunningStatus = (project) => {
        const inProgress = project.stacksToRun.filter((s) => s.isRunning);
        const finished = project.stacksToRun.filter((s) => s.isDone);
        const pending = project.stacksToRun.filter((s) => s.isPending);
        setStatus({ type: "running", inProgress, finished, pending });
    };
    react_1.useEffect(() => {
        const project = new lib_1.CdktfProject({
            outDir: opts.outDir,
            synthCommand: opts.synthCommand,
            onUpdate: (update) => {
                if (["synthesizing"].includes(update.type)) {
                    setStatus({ type: "synthesizing" });
                }
                else if (update.type === "waiting for approval") {
                    setStatus({
                        type: "waiting for approval of stack",
                        stackName: update.stackName,
                        approve: update.approve,
                        dismiss: update.dismiss,
                        stop: update.stop,
                    });
                }
                else {
                    updateRunningStatus(project);
                }
            },
            onLog: ({ stackName, message, messageWithConstructPath, }) => {
                setLogEntries((prev) => [
                    ...prev,
                    {
                        id: `${stackName}-${id}`,
                        stackName: stackName,
                        content: messageWithConstructPath
                            ? messageWithConstructPath
                            : message,
                    },
                ]);
                setID((current) => current + 1);
                // We only send logs when the project is running.
                updateRunningStatus(project);
            },
        });
        const onAbort = () => {
            project.hardAbort();
        };
        process.on("SIGINT", onAbort);
        process.on("SIGTERM", onAbort);
        process.on("SIGQUIT", onAbort);
        projectCallback(project)
            .then((value) => {
            setReturnValue(value);
            setStatus({ type: "done" });
        })
            .catch((err) => {
            exit(err);
        });
    }, []);
    return {
        logEntries,
        returnValue,
        status,
    };
}
exports.useCdktfProject = useCdktfProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrdGYtcHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNka3RmLXByb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBQzdCLGlDQUE0QztBQUM1QywwQ0FBK0Q7QUFzQy9ELFNBQWdCLGVBQWUsQ0FDN0IsSUFBc0IsRUFDdEIsZUFBc0Q7SUFFdEQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLFlBQU0sRUFBRSxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUcsZ0JBQVEsQ0FBUyxDQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLGdCQUFRLENBQWEsRUFBRSxDQUFDLENBQUM7SUFFN0QsTUFBTSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsR0FBRyxnQkFBUSxFQUFLLENBQUM7SUFDcEQsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxnQkFBUSxDQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFFbkUsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLE9BQXFCLEVBQUUsRUFBRTtRQUNwRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvRCxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRixpQkFBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sT0FBTyxHQUFHLElBQUksa0JBQVksQ0FBQztZQUMvQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFFBQVEsRUFBRSxDQUFDLE1BQXFCLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQzFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO2lCQUNyQztxQkFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssc0JBQXNCLEVBQUU7b0JBQ2pELFNBQVMsQ0FBQzt3QkFDUixJQUFJLEVBQUUsK0JBQStCO3dCQUNyQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7d0JBQzNCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTzt3QkFDdkIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO3dCQUN2QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7cUJBQ2xCLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDOUI7WUFDSCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUMsRUFDTixTQUFTLEVBQ1QsT0FBTyxFQUNQLHdCQUF3QixHQUt6QixFQUFFLEVBQUU7Z0JBQ0gsYUFBYSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztvQkFDdEIsR0FBRyxJQUFJO29CQUNQO3dCQUNFLEVBQUUsRUFBRSxHQUFHLFNBQVMsSUFBSSxFQUFFLEVBQUU7d0JBQ3hCLFNBQVMsRUFBRSxTQUFTO3dCQUNwQixPQUFPLEVBQUUsd0JBQXdCOzRCQUMvQixDQUFDLENBQUMsd0JBQXdCOzRCQUMxQixDQUFDLENBQUMsT0FBTztxQkFDWjtpQkFDRixDQUFDLENBQUM7Z0JBQ0gsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBRWhDLGlEQUFpRDtnQkFDakQsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0IsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQixPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0IsZUFBZSxDQUFDLE9BQU8sQ0FBQzthQUNyQixJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNkLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsT0FBTztRQUNMLFVBQVU7UUFDVixXQUFXO1FBQ1gsTUFBTTtLQUNQLENBQUM7QUFDSixDQUFDO0FBckZELDBDQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUFwcCB9IGZyb20gXCJpbmtcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENka3RmUHJvamVjdCwgUHJvamVjdFVwZGF0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9saWIvXCI7XG5pbXBvcnQgeyBDZGt0ZlN0YWNrIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2xpYi9jZGt0Zi1zdGFja1wiO1xuXG5leHBvcnQgdHlwZSBMb2dFbnRyeSA9IHtcbiAgY29udGVudDogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuICBzdGFja05hbWU6IHN0cmluZztcbn07XG5cbnR5cGUgQ2RrdGZQcm9qZWN0T3B0cyA9IHtcbiAgb3V0RGlyOiBzdHJpbmc7XG4gIHN5bnRoQ29tbWFuZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU3RhdHVzID1cbiAgfCB7XG4gICAgICB0eXBlOiBcInN0YXJ0aW5nXCI7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwic3ludGhlc2l6aW5nXCI7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwicnVubmluZ1wiO1xuICAgICAgaW5Qcm9ncmVzczogQ2RrdGZTdGFja1tdO1xuICAgICAgZmluaXNoZWQ6IENka3RmU3RhY2tbXTtcbiAgICAgIHBlbmRpbmc6IENka3RmU3RhY2tbXTtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogXCJ3YWl0aW5nIGZvciBhcHByb3ZhbCBvZiBzdGFja1wiO1xuICAgICAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gICAgICBhcHByb3ZlOiAoKSA9PiB2b2lkO1xuICAgICAgZGlzbWlzczogKCkgPT4gdm9pZDtcbiAgICAgIHN0b3A6ICgpID0+IHZvaWQ7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwiZG9uZVwiO1xuICAgIH07XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDZGt0ZlByb2plY3Q8VD4oXG4gIG9wdHM6IENka3RmUHJvamVjdE9wdHMsXG4gIHByb2plY3RDYWxsYmFjazogKHByb2plY3Q6IENka3RmUHJvamVjdCkgPT4gUHJvbWlzZTxUPlxuKSB7XG4gIGNvbnN0IHsgZXhpdCB9ID0gdXNlQXBwKCk7XG4gIGNvbnN0IFtpZCwgc2V0SURdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW2xvZ0VudHJpZXMsIHNldExvZ0VudHJpZXNdID0gdXNlU3RhdGU8TG9nRW50cnlbXT4oW10pO1xuXG4gIGNvbnN0IFtyZXR1cm5WYWx1ZSwgc2V0UmV0dXJuVmFsdWVdID0gdXNlU3RhdGU8VD4oKTtcbiAgY29uc3QgW3N0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlPFN0YXR1cz4oeyB0eXBlOiBcInN0YXJ0aW5nXCIgfSk7XG5cbiAgY29uc3QgdXBkYXRlUnVubmluZ1N0YXR1cyA9IChwcm9qZWN0OiBDZGt0ZlByb2plY3QpID0+IHtcbiAgICBjb25zdCBpblByb2dyZXNzID0gcHJvamVjdC5zdGFja3NUb1J1bi5maWx0ZXIoKHMpID0+IHMuaXNSdW5uaW5nKTtcbiAgICBjb25zdCBmaW5pc2hlZCA9IHByb2plY3Quc3RhY2tzVG9SdW4uZmlsdGVyKChzKSA9PiBzLmlzRG9uZSk7XG4gICAgY29uc3QgcGVuZGluZyA9IHByb2plY3Quc3RhY2tzVG9SdW4uZmlsdGVyKChzKSA9PiBzLmlzUGVuZGluZyk7XG4gICAgc2V0U3RhdHVzKHsgdHlwZTogXCJydW5uaW5nXCIsIGluUHJvZ3Jlc3MsIGZpbmlzaGVkLCBwZW5kaW5nIH0pO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdCA9IG5ldyBDZGt0ZlByb2plY3Qoe1xuICAgICAgb3V0RGlyOiBvcHRzLm91dERpcixcbiAgICAgIHN5bnRoQ29tbWFuZDogb3B0cy5zeW50aENvbW1hbmQsXG4gICAgICBvblVwZGF0ZTogKHVwZGF0ZTogUHJvamVjdFVwZGF0ZSkgPT4ge1xuICAgICAgICBpZiAoW1wic3ludGhlc2l6aW5nXCJdLmluY2x1ZGVzKHVwZGF0ZS50eXBlKSkge1xuICAgICAgICAgIHNldFN0YXR1cyh7IHR5cGU6IFwic3ludGhlc2l6aW5nXCIgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodXBkYXRlLnR5cGUgPT09IFwid2FpdGluZyBmb3IgYXBwcm92YWxcIikge1xuICAgICAgICAgIHNldFN0YXR1cyh7XG4gICAgICAgICAgICB0eXBlOiBcIndhaXRpbmcgZm9yIGFwcHJvdmFsIG9mIHN0YWNrXCIsXG4gICAgICAgICAgICBzdGFja05hbWU6IHVwZGF0ZS5zdGFja05hbWUsXG4gICAgICAgICAgICBhcHByb3ZlOiB1cGRhdGUuYXBwcm92ZSxcbiAgICAgICAgICAgIGRpc21pc3M6IHVwZGF0ZS5kaXNtaXNzLFxuICAgICAgICAgICAgc3RvcDogdXBkYXRlLnN0b3AsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlUnVubmluZ1N0YXR1cyhwcm9qZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uTG9nOiAoe1xuICAgICAgICBzdGFja05hbWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2VXaXRoQ29uc3RydWN0UGF0aCxcbiAgICAgIH06IHtcbiAgICAgICAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgICAgbWVzc2FnZVdpdGhDb25zdHJ1Y3RQYXRoPzogc3RyaW5nO1xuICAgICAgfSkgPT4ge1xuICAgICAgICBzZXRMb2dFbnRyaWVzKChwcmV2KSA9PiBbXG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogYCR7c3RhY2tOYW1lfS0ke2lkfWAsXG4gICAgICAgICAgICBzdGFja05hbWU6IHN0YWNrTmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lc3NhZ2VXaXRoQ29uc3RydWN0UGF0aFxuICAgICAgICAgICAgICA/IG1lc3NhZ2VXaXRoQ29uc3RydWN0UGF0aFxuICAgICAgICAgICAgICA6IG1lc3NhZ2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgICAgIHNldElEKChjdXJyZW50KSA9PiBjdXJyZW50ICsgMSk7XG5cbiAgICAgICAgLy8gV2Ugb25seSBzZW5kIGxvZ3Mgd2hlbiB0aGUgcHJvamVjdCBpcyBydW5uaW5nLlxuICAgICAgICB1cGRhdGVSdW5uaW5nU3RhdHVzKHByb2plY3QpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG9uQWJvcnQgPSAoKSA9PiB7XG4gICAgICBwcm9qZWN0LmhhcmRBYm9ydCgpO1xuICAgIH07XG4gICAgcHJvY2Vzcy5vbihcIlNJR0lOVFwiLCBvbkFib3J0KTtcbiAgICBwcm9jZXNzLm9uKFwiU0lHVEVSTVwiLCBvbkFib3J0KTtcbiAgICBwcm9jZXNzLm9uKFwiU0lHUVVJVFwiLCBvbkFib3J0KTtcblxuICAgIHByb2plY3RDYWxsYmFjayhwcm9qZWN0KVxuICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIHNldFJldHVyblZhbHVlKHZhbHVlKTtcbiAgICAgICAgc2V0U3RhdHVzKHsgdHlwZTogXCJkb25lXCIgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgZXhpdChlcnIpO1xuICAgICAgfSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIGxvZ0VudHJpZXMsXG4gICAgcmV0dXJuVmFsdWUsXG4gICAgc3RhdHVzLFxuICB9O1xufVxuIl19