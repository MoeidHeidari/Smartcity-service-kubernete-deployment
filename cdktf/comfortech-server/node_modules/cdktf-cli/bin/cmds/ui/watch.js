"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watch = void 0;
const node_abort_controller_1 = require("node-abort-controller");
const react_1 = __importStar(require("react"));
const lib_1 = require("../../../lib/");
const components_1 = require("./components");
exports.Watch = ({ targetDir, targetStacks, synthCommand, autoApprove, parallelism, }) => {
    const [logEntryId, setLogEntryId] = react_1.useState(0);
    const [logEntries, setLogEntries] = react_1.useState([]);
    const [currentState, setCurrentState] = react_1.useState({
        type: "waiting",
    });
    react_1.useEffect(() => {
        const ac = new node_abort_controller_1.AbortController();
        const onAbort = () => {
            ac.abort();
        };
        process.on("SIGINT", onAbort);
        process.on("SIGTERM", onAbort);
        process.on("SIGQUIT", onAbort);
        lib_1.watch({
            synthCommand,
            outDir: targetDir,
            onUpdate: () => { },
            onLog: ({ stackName, message, messageWithConstructPath }) => {
                setLogEntries((prev) => [
                    ...prev,
                    {
                        id: `${stackName}-${logEntryId}`,
                        stackName: stackName,
                        content: messageWithConstructPath
                            ? messageWithConstructPath
                            : message,
                    },
                ]);
                setLogEntryId((current) => current + 1);
            },
        }, {
            autoApprove,
            stackNames: targetStacks,
            parallelism,
        }, ac.signal, (state) => {
            setCurrentState(state);
        });
    }, []);
    return (react_1.default.createElement(components_1.StreamView, { logs: logEntries },
        react_1.default.createElement(components_1.WatchStatusBottomBar, { currentState: currentState })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXRjaC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlFQUF3RDtBQUN4RCwrQ0FBbUQ7QUFDbkQsdUNBQWtEO0FBQ2xELDZDQUFnRTtBQVduRCxRQUFBLEtBQUssR0FBRyxDQUFDLEVBQ3BCLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUNaLFdBQVcsRUFDWCxXQUFXLEdBQ0MsRUFBc0IsRUFBRTtJQUNwQyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLGdCQUFRLENBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxnQkFBUSxDQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLEdBQUcsZ0JBQVEsQ0FBYTtRQUMzRCxJQUFJLEVBQUUsU0FBUztLQUNoQixDQUFDLENBQUM7SUFFSCxpQkFBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sRUFBRSxHQUFHLElBQUksdUNBQWUsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixDQUFDLENBQUM7UUFDRixPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QixPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvQixXQUFLLENBQ0g7WUFDRSxZQUFZO1lBQ1osTUFBTSxFQUFFLFNBQVM7WUFDakIsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7WUFDbEIsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRTtnQkFDMUQsYUFBYSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztvQkFDdEIsR0FBRyxJQUFJO29CQUNQO3dCQUNFLEVBQUUsRUFBRSxHQUFHLFNBQVMsSUFBSSxVQUFVLEVBQUU7d0JBQ2hDLFNBQVMsRUFBRSxTQUFTO3dCQUNwQixPQUFPLEVBQUUsd0JBQXdCOzRCQUMvQixDQUFDLENBQUMsd0JBQXdCOzRCQUMxQixDQUFDLENBQUMsT0FBTztxQkFDWjtpQkFDRixDQUFDLENBQUM7Z0JBQ0gsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDMUMsQ0FBQztTQUNGLEVBQ0Q7WUFDRSxXQUFXO1lBQ1gsVUFBVSxFQUFFLFlBQVk7WUFDeEIsV0FBVztTQUNaLEVBQ0QsRUFBRSxDQUFDLE1BQU0sRUFDVCxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1IsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsT0FBTyxDQUNMLDhCQUFDLHVCQUFVLElBQUMsSUFBSSxFQUFFLFVBQVU7UUFDMUIsOEJBQUMsaUNBQW9CLElBQUMsWUFBWSxFQUFFLFlBQVksR0FBSSxDQUN6QyxDQUNkLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYm9ydENvbnRyb2xsZXIgfSBmcm9tIFwibm9kZS1hYm9ydC1jb250cm9sbGVyXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgd2F0Y2gsIFdhdGNoU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vbGliL1wiO1xuaW1wb3J0IHsgU3RyZWFtVmlldywgV2F0Y2hTdGF0dXNCb3R0b21CYXIgfSBmcm9tIFwiLi9jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBMb2dFbnRyeSB9IGZyb20gXCIuL2hvb2tzL2Nka3RmLXByb2plY3RcIjtcblxuaW50ZXJmYWNlIFdhdGNoQ29uZmlnIHtcbiAgdGFyZ2V0RGlyOiBzdHJpbmc7XG4gIHRhcmdldFN0YWNrcz86IHN0cmluZ1tdO1xuICBwYXJhbGxlbGlzbT86IG51bWJlcjtcbiAgc3ludGhDb21tYW5kOiBzdHJpbmc7XG4gIGF1dG9BcHByb3ZlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgV2F0Y2ggPSAoe1xuICB0YXJnZXREaXIsXG4gIHRhcmdldFN0YWNrcyxcbiAgc3ludGhDb21tYW5kLFxuICBhdXRvQXBwcm92ZSxcbiAgcGFyYWxsZWxpc20sXG59OiBXYXRjaENvbmZpZyk6IFJlYWN0LlJlYWN0RWxlbWVudCA9PiB7XG4gIGNvbnN0IFtsb2dFbnRyeUlkLCBzZXRMb2dFbnRyeUlkXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtsb2dFbnRyaWVzLCBzZXRMb2dFbnRyaWVzXSA9IHVzZVN0YXRlPExvZ0VudHJ5W10+KFtdKTtcbiAgY29uc3QgW2N1cnJlbnRTdGF0ZSwgc2V0Q3VycmVudFN0YXRlXSA9IHVzZVN0YXRlPFdhdGNoU3RhdGU+KHtcbiAgICB0eXBlOiBcIndhaXRpbmdcIixcbiAgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBhYyA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCBvbkFib3J0ID0gKCkgPT4ge1xuICAgICAgYWMuYWJvcnQoKTtcbiAgICB9O1xuICAgIHByb2Nlc3Mub24oXCJTSUdJTlRcIiwgb25BYm9ydCk7XG4gICAgcHJvY2Vzcy5vbihcIlNJR1RFUk1cIiwgb25BYm9ydCk7XG4gICAgcHJvY2Vzcy5vbihcIlNJR1FVSVRcIiwgb25BYm9ydCk7XG5cbiAgICB3YXRjaChcbiAgICAgIHtcbiAgICAgICAgc3ludGhDb21tYW5kLFxuICAgICAgICBvdXREaXI6IHRhcmdldERpcixcbiAgICAgICAgb25VcGRhdGU6ICgpID0+IHt9LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgICAgICBvbkxvZzogKHsgc3RhY2tOYW1lLCBtZXNzYWdlLCBtZXNzYWdlV2l0aENvbnN0cnVjdFBhdGggfSkgPT4ge1xuICAgICAgICAgIHNldExvZ0VudHJpZXMoKHByZXYpID0+IFtcbiAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiBgJHtzdGFja05hbWV9LSR7bG9nRW50cnlJZH1gLFxuICAgICAgICAgICAgICBzdGFja05hbWU6IHN0YWNrTmFtZSxcbiAgICAgICAgICAgICAgY29udGVudDogbWVzc2FnZVdpdGhDb25zdHJ1Y3RQYXRoXG4gICAgICAgICAgICAgICAgPyBtZXNzYWdlV2l0aENvbnN0cnVjdFBhdGhcbiAgICAgICAgICAgICAgICA6IG1lc3NhZ2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pO1xuICAgICAgICAgIHNldExvZ0VudHJ5SWQoKGN1cnJlbnQpID0+IGN1cnJlbnQgKyAxKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGF1dG9BcHByb3ZlLFxuICAgICAgICBzdGFja05hbWVzOiB0YXJnZXRTdGFja3MsXG4gICAgICAgIHBhcmFsbGVsaXNtLFxuICAgICAgfSxcbiAgICAgIGFjLnNpZ25hbCxcbiAgICAgIChzdGF0ZSkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50U3RhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgICk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdHJlYW1WaWV3IGxvZ3M9e2xvZ0VudHJpZXN9PlxuICAgICAgPFdhdGNoU3RhdHVzQm90dG9tQmFyIGN1cnJlbnRTdGF0ZT17Y3VycmVudFN0YXRlfSAvPlxuICAgIDwvU3RyZWFtVmlldz5cbiAgKTtcbn07XG4iXX0=