"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deploy = exports.DeploySummary = void 0;
/* eslint-disable no-control-regex */
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const cdktf_project_1 = require("./hooks/cdktf-project");
const components_1 = require("./components");
exports.DeploySummary = ({ resources, }) => {
    const summary = resources.reduce((accumulator, resource) => {
        if (accumulator[resource.applyState] !== undefined) {
            accumulator[resource.applyState] += 1;
        }
        return accumulator;
    }, {
        created: 0,
        updated: 0,
        destroyed: 0,
    });
    return (react_1.default.createElement(react_1.default.Fragment, null, Object.keys(summary).map((key, i) => (react_1.default.createElement(ink_1.Box, { key: key },
        i > 0 && react_1.default.createElement(ink_1.Text, null, ", "),
        react_1.default.createElement(ink_1.Text, null,
            summary[key],
            " ",
            key))))));
};
exports.Deploy = ({ outDir, targetStacks, synthCommand, autoApprove, onOutputsRetrieved, outputsPath, ignoreMissingStackDependencies, parallelism, refreshOnly, }) => {
    const [outputs, setOutputs] = react_1.useState();
    const { status, logEntries } = cdktf_project_1.useCdktfProject({ outDir, synthCommand }, async (project) => {
        await project.deploy({
            stackNames: targetStacks,
            autoApprove,
            ignoreMissingStackDependencies,
            parallelism,
            refreshOnly,
        });
        if (onOutputsRetrieved) {
            onOutputsRetrieved(project.outputsByConstructId);
        }
        setOutputs(project.outputsByConstructId);
    });
    const bottomBar = status.type === "done" ? (react_1.default.createElement(components_1.OutputsBottomBar, { outputs: outputs, outputsFile: outputsPath })) : (status === null || status === void 0 ? void 0 : status.type) === "waiting for approval of stack" ? (react_1.default.createElement(components_1.ApproveBottomBar, { stackName: status.stackName, onApprove: status.approve, onDismiss: status.dismiss, onStop: status.stop })) : (react_1.default.createElement(components_1.ExecutionStatusBottomBar, { status: status, actionName: "deploying" }));
    return react_1.default.createElement(components_1.StreamView, { logs: logEntries }, bottomBar);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUNBQXFDO0FBQ3JDLCtDQUF3QztBQUN4Qyw2QkFBZ0M7QUFHaEMseURBQXdEO0FBQ3hELDZDQUtzQjtBQUtULFFBQUEsYUFBYSxHQUFHLENBQUMsRUFDNUIsU0FBUyxHQUNXLEVBQXNCLEVBQUU7SUFDNUMsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FDOUIsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDeEIsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNsRCxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUMsRUFDRDtRQUNFLE9BQU8sRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLENBQUM7UUFDVixTQUFTLEVBQUUsQ0FBQztLQUNOLENBQ1QsQ0FBQztJQUVGLE9BQU8sQ0FDTCw4REFDRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ3BDLDhCQUFDLFNBQUcsSUFBQyxHQUFHLEVBQUUsR0FBRztRQUNWLENBQUMsR0FBRyxDQUFDLElBQUksOEJBQUMsVUFBSSxhQUFVO1FBQ3pCLDhCQUFDLFVBQUk7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDOztZQUFHLEdBQUcsQ0FDZCxDQUNILENBQ1AsQ0FBQyxDQUNELENBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQztBQWNXLFFBQUEsTUFBTSxHQUFHLENBQUMsRUFDckIsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osV0FBVyxFQUNYLGtCQUFrQixFQUNsQixXQUFXLEVBQ1gsOEJBQThCLEVBQzlCLFdBQVcsRUFDWCxXQUFXLEdBQ0UsRUFBc0IsRUFBRTtJQUNyQyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLGdCQUFRLEVBQTBCLENBQUM7SUFDakUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRywrQkFBZSxDQUM1QyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFDeEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQ2hCLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNuQixVQUFVLEVBQUUsWUFBWTtZQUN4QixXQUFXO1lBQ1gsOEJBQThCO1lBQzlCLFdBQVc7WUFDWCxXQUFXO1NBQ1osQ0FBQyxDQUFDO1FBRUgsSUFBSSxrQkFBa0IsRUFBRTtZQUN0QixrQkFBa0IsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNsRDtRQUNELFVBQVUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQ0YsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUNiLE1BQU0sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUN2Qiw4QkFBQyw2QkFBZ0IsSUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEdBQUksQ0FDakUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsSUFBSSxNQUFLLCtCQUErQixDQUFDLENBQUMsQ0FBQyxDQUNyRCw4QkFBQyw2QkFBZ0IsSUFDZixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFDM0IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQ3pCLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxFQUN6QixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksR0FDbkIsQ0FDSCxDQUFDLENBQUMsQ0FBQyxDQUNGLDhCQUFDLHFDQUF3QixJQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFDLFdBQVcsR0FBRyxDQUNwRSxDQUFDO0lBRUosT0FBTyw4QkFBQyx1QkFBVSxJQUFDLElBQUksRUFBRSxVQUFVLElBQUcsU0FBUyxDQUFjLENBQUM7QUFDaEUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUZXh0LCBCb3ggfSBmcm9tIFwiaW5rXCI7XG5pbXBvcnQgeyBEZXBsb3lpbmdSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9saWIvbW9kZWxzL3RlcnJhZm9ybVwiO1xuaW1wb3J0IHsgTmVzdGVkVGVycmFmb3JtT3V0cHV0cyB9IGZyb20gXCIuLi8uLi8uLi9saWIvb3V0cHV0XCI7XG5pbXBvcnQgeyB1c2VDZGt0ZlByb2plY3QgfSBmcm9tIFwiLi9ob29rcy9jZGt0Zi1wcm9qZWN0XCI7XG5pbXBvcnQge1xuICBTdHJlYW1WaWV3LFxuICBPdXRwdXRzQm90dG9tQmFyLFxuICBBcHByb3ZlQm90dG9tQmFyLFxuICBFeGVjdXRpb25TdGF0dXNCb3R0b21CYXIsXG59IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcbmludGVyZmFjZSBEZXBsb3lTdW1tYXJ5Q29uZmlnIHtcbiAgcmVzb3VyY2VzOiBEZXBsb3lpbmdSZXNvdXJjZVtdO1xufVxuXG5leHBvcnQgY29uc3QgRGVwbG95U3VtbWFyeSA9ICh7XG4gIHJlc291cmNlcyxcbn06IERlcGxveVN1bW1hcnlDb25maWcpOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuICBjb25zdCBzdW1tYXJ5ID0gcmVzb3VyY2VzLnJlZHVjZShcbiAgICAoYWNjdW11bGF0b3IsIHJlc291cmNlKSA9PiB7XG4gICAgICBpZiAoYWNjdW11bGF0b3JbcmVzb3VyY2UuYXBwbHlTdGF0ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhY2N1bXVsYXRvcltyZXNvdXJjZS5hcHBseVN0YXRlXSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSxcbiAgICB7XG4gICAgICBjcmVhdGVkOiAwLFxuICAgICAgdXBkYXRlZDogMCxcbiAgICAgIGRlc3Ryb3llZDogMCxcbiAgICB9IGFzIGFueVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtPYmplY3Qua2V5cyhzdW1tYXJ5KS5tYXAoKGtleSwgaSkgPT4gKFxuICAgICAgICA8Qm94IGtleT17a2V5fT5cbiAgICAgICAgICB7aSA+IDAgJiYgPFRleHQ+LCA8L1RleHQ+fVxuICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAge3N1bW1hcnlba2V5XX0ge2tleX1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgKSl9XG4gICAgPC8+XG4gICk7XG59O1xuXG5pbnRlcmZhY2UgRGVwbG95Q29uZmlnIHtcbiAgb3V0RGlyOiBzdHJpbmc7XG4gIHRhcmdldFN0YWNrcz86IHN0cmluZ1tdO1xuICBzeW50aENvbW1hbmQ6IHN0cmluZztcbiAgYXV0b0FwcHJvdmU6IGJvb2xlYW47XG4gIG9uT3V0cHV0c1JldHJpZXZlZDogKG91dHB1dHM6IE5lc3RlZFRlcnJhZm9ybU91dHB1dHMpID0+IHZvaWQ7XG4gIG91dHB1dHNQYXRoPzogc3RyaW5nO1xuICBpZ25vcmVNaXNzaW5nU3RhY2tEZXBlbmRlbmNpZXM/OiBib29sZWFuO1xuICBwYXJhbGxlbGlzbT86IG51bWJlcjtcbiAgcmVmcmVzaE9ubHk/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgRGVwbG95ID0gKHtcbiAgb3V0RGlyLFxuICB0YXJnZXRTdGFja3MsXG4gIHN5bnRoQ29tbWFuZCxcbiAgYXV0b0FwcHJvdmUsXG4gIG9uT3V0cHV0c1JldHJpZXZlZCxcbiAgb3V0cHV0c1BhdGgsXG4gIGlnbm9yZU1pc3NpbmdTdGFja0RlcGVuZGVuY2llcyxcbiAgcGFyYWxsZWxpc20sXG4gIHJlZnJlc2hPbmx5LFxufTogRGVwbG95Q29uZmlnKTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcbiAgY29uc3QgW291dHB1dHMsIHNldE91dHB1dHNdID0gdXNlU3RhdGU8TmVzdGVkVGVycmFmb3JtT3V0cHV0cz4oKTtcbiAgY29uc3QgeyBzdGF0dXMsIGxvZ0VudHJpZXMgfSA9IHVzZUNka3RmUHJvamVjdChcbiAgICB7IG91dERpciwgc3ludGhDb21tYW5kIH0sXG4gICAgYXN5bmMgKHByb2plY3QpID0+IHtcbiAgICAgIGF3YWl0IHByb2plY3QuZGVwbG95KHtcbiAgICAgICAgc3RhY2tOYW1lczogdGFyZ2V0U3RhY2tzLFxuICAgICAgICBhdXRvQXBwcm92ZSxcbiAgICAgICAgaWdub3JlTWlzc2luZ1N0YWNrRGVwZW5kZW5jaWVzLFxuICAgICAgICBwYXJhbGxlbGlzbSxcbiAgICAgICAgcmVmcmVzaE9ubHksXG4gICAgICB9KTtcblxuICAgICAgaWYgKG9uT3V0cHV0c1JldHJpZXZlZCkge1xuICAgICAgICBvbk91dHB1dHNSZXRyaWV2ZWQocHJvamVjdC5vdXRwdXRzQnlDb25zdHJ1Y3RJZCk7XG4gICAgICB9XG4gICAgICBzZXRPdXRwdXRzKHByb2plY3Qub3V0cHV0c0J5Q29uc3RydWN0SWQpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBib3R0b21CYXIgPVxuICAgIHN0YXR1cy50eXBlID09PSBcImRvbmVcIiA/IChcbiAgICAgIDxPdXRwdXRzQm90dG9tQmFyIG91dHB1dHM9e291dHB1dHN9IG91dHB1dHNGaWxlPXtvdXRwdXRzUGF0aH0gLz5cbiAgICApIDogc3RhdHVzPy50eXBlID09PSBcIndhaXRpbmcgZm9yIGFwcHJvdmFsIG9mIHN0YWNrXCIgPyAoXG4gICAgICA8QXBwcm92ZUJvdHRvbUJhclxuICAgICAgICBzdGFja05hbWU9e3N0YXR1cy5zdGFja05hbWV9XG4gICAgICAgIG9uQXBwcm92ZT17c3RhdHVzLmFwcHJvdmV9XG4gICAgICAgIG9uRGlzbWlzcz17c3RhdHVzLmRpc21pc3N9XG4gICAgICAgIG9uU3RvcD17c3RhdHVzLnN0b3B9XG4gICAgICAvPlxuICAgICkgOiAoXG4gICAgICA8RXhlY3V0aW9uU3RhdHVzQm90dG9tQmFyIHN0YXR1cz17c3RhdHVzfSBhY3Rpb25OYW1lPVwiZGVwbG95aW5nXCIgLz5cbiAgICApO1xuXG4gIHJldHVybiA8U3RyZWFtVmlldyBsb2dzPXtsb2dFbnRyaWVzfT57Ym90dG9tQmFyfTwvU3RyZWFtVmlldz47XG59O1xuIl19