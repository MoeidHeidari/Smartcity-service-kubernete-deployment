"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "add <provider...>";
        this.describe = "Add one or more Terraform providers to your project.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .positional("provider", {
            type: "string",
            desc: "Name of the provider to add. Can include a version constraint (e.g. aws@~>4.0).",
            required: true,
        })
            .option("force-local", {
            type: "boolean",
            desc: "force local provider installation, even if pre-built provider exists",
        });
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("provider add");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.providerAdd(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItYWRkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvdmlkZXItYWRkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0RBQXFEO0FBQ3JELDZDQUEwQztBQUMxQyx3REFBb0Q7QUFFcEQsTUFBTSxPQUFRLFNBQVEsMEJBQVc7SUFBakM7O1FBQ2tCLFlBQU8sR0FBRyxtQkFBbUIsQ0FBQztRQUM5QixhQUFRLEdBQ3RCLHNEQUFzRCxDQUFDO1FBRXpDLFlBQU8sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUM3QyxJQUFJO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQzthQUNwQixVQUFVLENBQUMsVUFBVSxFQUFFO1lBQ3RCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLGlGQUFpRjtZQUN2RixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUM7YUFDRCxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ3JCLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLHNFQUFzRTtTQUM3RSxDQUFDLENBQUM7SUFRVCxDQUFDO0lBTlEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFTO1FBQ2xDLGVBQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDaEMsNkZBQTZGO1FBQzdGLE1BQU0sR0FBRyxHQUFHLDJCQUFlLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHlhcmdzIGZyb20gXCJ5YXJnc1wiO1xuaW1wb3J0IHsgcmVxdWlyZUhhbmRsZXJzIH0gZnJvbSBcIi4vaGVscGVyL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4uLy4uL2xpYi9lcnJvcnNcIjtcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vaGVscGVyL2Jhc2UtY29tbWFuZFwiO1xuXG5jbGFzcyBDb21tYW5kIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiYWRkIDxwcm92aWRlci4uLj5cIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID1cbiAgICBcIkFkZCBvbmUgb3IgbW9yZSBUZXJyYWZvcm0gcHJvdmlkZXJzIHRvIHlvdXIgcHJvamVjdC5cIjtcblxuICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRlciA9IChhcmdzOiB5YXJncy5Bcmd2KSA9PlxuICAgIGFyZ3NcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKVxuICAgICAgLnBvc2l0aW9uYWwoXCJwcm92aWRlclwiLCB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IFwiTmFtZSBvZiB0aGUgcHJvdmlkZXIgdG8gYWRkLiBDYW4gaW5jbHVkZSBhIHZlcnNpb24gY29uc3RyYWludCAoZS5nLiBhd3NAfj40LjApLlwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwiZm9yY2UtbG9jYWxcIiwge1xuICAgICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgICAgZGVzYzogXCJmb3JjZSBsb2NhbCBwcm92aWRlciBpbnN0YWxsYXRpb24sIGV2ZW4gaWYgcHJlLWJ1aWx0IHByb3ZpZGVyIGV4aXN0c1wiLFxuICAgICAgfSk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZUNvbW1hbmQoYXJndjogYW55KSB7XG4gICAgRXJyb3JzLnNldFNjb3BlKFwicHJvdmlkZXIgYWRkXCIpO1xuICAgIC8vIGRlZmVycmVkIHJlcXVpcmUgdG8ga2VlcCBjZGt0Zi1jbGkgbWFpbiBlbnRyeXBvaW50IHNtYWxsIChlLmcuIGZvciBmYXN0IHNoZWxsIGNvbXBsZXRpb25zKVxuICAgIGNvbnN0IGFwaSA9IHJlcXVpcmVIYW5kbGVycygpO1xuICAgIGF3YWl0IGFwaS5wcm92aWRlckFkZChhcmd2KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=