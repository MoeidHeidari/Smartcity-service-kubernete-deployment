"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.providerAdd = exports.debug = exports.output = exports.watch = exports.synth = exports.login = exports.list = exports.init = exports.get = exports.diff = exports.destroy = exports.deploy = exports.convert = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs-extra"));
const react_1 = __importDefault(require("react"));
const hcl2cdk_1 = require("@cdktf/hcl2cdk");
const provider_generator_1 = require("@cdktf/provider-generator");
const init_1 = require("./helper/init");
const render_ink_1 = require("./helper/render-ink");
const terraform_check_1 = require("./helper/terraform-check");
const terraformCloudClient = __importStar(require("./helper/terraform-cloud-client"));
const terraform_login_1 = require("./helper/terraform-login");
const utilities_1 = require("./helper/utilities");
const version_check_1 = require("./helper/version-check");
const diff_1 = require("./ui/diff");
const deploy_1 = require("./ui/deploy");
const destroy_1 = require("./ui/destroy");
const get_1 = require("./ui/get");
const list_1 = require("./ui/list");
const synth_1 = require("./ui/synth");
const watch_1 = require("./ui/watch");
const checkpoint_1 = require("../../lib/checkpoint");
const errors_1 = require("../../lib/errors");
const output_1 = require("./ui/output");
const output_2 = require("../../lib/output");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const debug_1 = require("../../lib/debug");
const error_reporting_1 = require("../../lib/error-reporting");
const dependency_manager_1 = require("../../lib/dependencies/dependency-manager");
const cdktf_config_1 = require("../../lib/cdktf-config");
const logging_1 = require("../../lib/logging");
const chalkColour = new chalk_1.default.Instance();
const config = provider_generator_1.config.readConfigSync();
async function getProviderRequirements(provider) {
    let providersFromConfig = [];
    try {
        const config = cdktf_config_1.CdktfConfig.read();
        providersFromConfig = config.terraformProviders;
    }
    catch (e) {
        if (errors_1.IsErrorType(e, "External")) {
            // do nothing, expected if run in a different directory
        }
        else {
            throw e;
        }
    }
    return [...provider, ...providersFromConfig];
}
async function convert({ language, provider }) {
    await error_reporting_1.initializErrorReporting();
    await version_check_1.displayVersionMessage();
    const providerRequirements = await getProviderRequirements(provider);
    // Get all the provider schemas
    const { providerSchema } = await provider_generator_1.readSchema(providerRequirements.map((spec) => provider_generator_1.ConstructsMakerProviderTarget.from(new provider_generator_1.config.TerraformProviderConstraint(spec), provider_generator_1.LANGUAGES[0])));
    const input = await utilities_1.readStreamAsString(process.stdin, "No stdin was passed, please use it like this: cat main.tf | cdktf convert > imported.ts");
    let output;
    try {
        const { all, stats } = await hcl2cdk_1.convert(input, {
            language,
            providerSchema,
        });
        output = all;
        await checkpoint_1.sendTelemetry("convert", { ...stats, error: false });
    }
    catch (err) {
        throw errors_1.Errors.Internal(err.message, { language });
    }
    console.log(output);
}
exports.convert = convert;
async function deploy(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const command = argv.app;
    const outDir = argv.output;
    const autoApprove = argv.autoApprove;
    const stacks = argv.stacks;
    const includeSensitiveOutputs = argv.outputsFileIncludeSensitiveOutputs;
    const refreshOnly = argv.refreshOnly;
    let outputsPath = undefined;
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    let onOutputsRetrieved = () => { };
    if (argv.outputsFile) {
        outputsPath = output_2.normalizeOutputPath(argv.outputsFile);
        onOutputsRetrieved = (outputs) => output_2.saveOutputs(outputsPath, outputs, includeSensitiveOutputs);
    }
    await render_ink_1.renderInk(react_1.default.createElement(deploy_1.Deploy, {
        outDir,
        targetStacks: stacks,
        synthCommand: command,
        autoApprove,
        onOutputsRetrieved,
        outputsPath,
        ignoreMissingStackDependencies: argv.ignoreMissingStackDependencies || false,
        parallelism: argv.parallelism,
        refreshOnly,
    }));
}
exports.deploy = deploy;
async function destroy(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const command = argv.app;
    const outDir = argv.output;
    const autoApprove = argv.autoApprove;
    const stacks = argv.stacks;
    await render_ink_1.renderInk(react_1.default.createElement(destroy_1.Destroy, {
        outDir,
        targetStacks: stacks,
        synthCommand: command,
        autoApprove,
        ignoreMissingStackDependencies: argv.ignoreMissingStackDependencies || false,
        parallelism: argv.parallelism,
    }));
}
exports.destroy = destroy;
async function diff(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const command = argv.app;
    const outDir = argv.output;
    const stack = argv.stack;
    const refreshOnly = argv.refreshOnly;
    await render_ink_1.renderInk(react_1.default.createElement(diff_1.Diff, {
        outDir,
        refreshOnly,
        targetStack: stack,
        synthCommand: command,
    }));
}
exports.diff = diff;
async function get(argv) {
    var _a, _b;
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await error_reporting_1.initializErrorReporting(true);
    await check_environment_1.checkEnvironment();
    await check_environment_1.verifySimilarLibraryVersion();
    const config = provider_generator_1.config.readConfigSync(); // read config again to be up-to-date (if called via 'add' command)
    const providers = (_a = config.terraformProviders) !== null && _a !== void 0 ? _a : [];
    const modules = (_b = config.terraformModules) !== null && _b !== void 0 ? _b : [];
    const { output, language } = argv;
    const constraints = [
        ...providers,
        ...modules,
    ];
    if (constraints.length === 0) {
        logging_1.logger.warn(`WARNING: No providers or modules found in "cdktf.json" config file, therefore cdktf get does nothing.`);
        return;
    }
    await render_ink_1.renderInk(react_1.default.createElement(get_1.Get, {
        codeMakerOutput: output,
        language: language,
        constraints,
    }));
}
exports.get = get;
async function init(argv) {
    await terraform_check_1.terraformCheck();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    if (["", ".", process.cwd()].includes(argv.fromTerraformProject)) {
        throw errors_1.Errors.Usage("--from-terraform-project requires a path to an existing Terraform project to be set, e.g. --from-terraform-project=../my-tf-codebase This folder can not be the same as the current working directory since cdktf init will initialize the new project in that folder.");
    }
    init_1.checkForEmptyDirectory(".");
    await init_1.runInit(argv);
}
exports.init = init;
async function list(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const command = argv.app;
    const outDir = argv.output;
    await render_ink_1.renderInk(react_1.default.createElement(list_1.List, { outDir, synthCommand: command }));
}
exports.list = list;
async function login(argv) {
    await terraform_check_1.terraformCheck();
    await version_check_1.displayVersionMessage();
    async function showUserDetails(authToken) {
        // Get user details if token is set
        const userAccount = await terraformCloudClient.getAccountDetails(argv.tfeHostname, authToken);
        if (userAccount) {
            const username = userAccount.data.attributes.username;
            console.log(chalkColour `\n{greenBright cdktf has successfully configured Terraform Cloud credentials!}`);
            console.log(chalkColour `\nWelcome {bold ${username}}!`);
        }
        else {
            throw errors_1.Errors.Usage(`Configured Terraform Cloud token is invalid.`);
        }
    }
    const terraformLogin = new terraform_login_1.TerraformLogin(argv.tfeHostname);
    let token = "";
    try {
        token = await utilities_1.readStreamAsString(process.stdin, "No stdin was passed");
    }
    catch (e) {
        logging_1.logger.debug(`No TTY stream passed to login`);
    }
    // If we get a token through stdin, we don't need to ask for credentials, we just validate and set it
    // This is useful for programmatically authenticating, e.g. a CI server
    if (token) {
        await terraformLogin.saveTerraformCredentials(token.replace(/\n/g, ""));
    }
    else {
        token = await terraformLogin.askToLogin();
        if (token === "") {
            throw errors_1.Errors.Usage(`No Terraform Cloud token was provided.`);
        }
    }
    await showUserDetails(token);
}
exports.login = login;
async function synth(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const checkCodeMakerOutput = argv.checkCodeMakerOutput;
    const command = argv.app;
    const outDir = argv.output;
    if (checkCodeMakerOutput && !(await fs.pathExists(config.codeMakerOutput))) {
        console.error(`ERROR: synthesis failed, run "cdktf get" to generate providers in ${config.codeMakerOutput}`);
        process.exit(1);
    }
    await render_ink_1.renderInk(react_1.default.createElement(synth_1.Synth, {
        outDir,
        synthCommand: command,
    }));
}
exports.synth = synth;
async function watch(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    const command = argv.app;
    const outDir = argv.output;
    const autoApprove = argv.autoApprove;
    const stacks = argv.stacks;
    if (!autoApprove) {
        console.error(chalkColour `{redBright ERROR: The watch command always automatically deploys and approves changes. To make this behaviour explicit the --auto-approve flag must be set}`);
        process.exit(1);
    }
    await render_ink_1.renderInk(react_1.default.createElement(watch_1.Watch, {
        targetDir: outDir,
        targetStacks: stacks,
        synthCommand: command,
        autoApprove,
    }));
}
exports.watch = watch;
async function output(argv) {
    await error_reporting_1.initializErrorReporting(true);
    check_directory_1.throwIfNotProjectDirectory();
    await version_check_1.displayVersionMessage();
    await check_environment_1.checkEnvironment();
    const command = argv.app;
    const outDir = argv.output;
    const stacks = argv.stacks;
    const includeSensitiveOutputs = argv.outputsFileIncludeSensitiveOutputs;
    let outputsPath = undefined;
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    let onOutputsRetrieved = () => { };
    if (argv.outputsFile) {
        outputsPath = output_2.normalizeOutputPath(argv.outputsFile);
        onOutputsRetrieved = (outputs) => output_2.saveOutputs(outputsPath, outputs, includeSensitiveOutputs);
    }
    await render_ink_1.renderInk(react_1.default.createElement(output_1.Output, {
        outDir,
        targetStacks: stacks,
        synthCommand: command,
        onOutputsRetrieved,
        outputsPath,
    }));
}
exports.output = output;
async function debug(argv) {
    const jsonOutput = argv.json;
    const debugOutput = await debug_1.collectDebugInformation();
    if (jsonOutput) {
        console.log(JSON.stringify(debugOutput, null, 2));
    }
    else {
        console.log(chalkColour `{bold {greenBright cdktf debug}}`);
        Object.entries(debugOutput).forEach(([key, value]) => {
            console.log(`${key}: ${value === null ? "null" : value}`);
        });
    }
}
exports.debug = debug;
async function providerAdd(argv) {
    const config = cdktf_config_1.CdktfConfig.read();
    const language = config.language;
    const cdktfVersion = await debug_1.getPackageVersion(language, "cdktf");
    if (!cdktfVersion)
        throw errors_1.Errors.External("Could not determine cdktf version. Please make sure you are in a directory containing a cdktf project and have all dependencies installed.");
    const manager = new dependency_manager_1.DependencyManager(language, cdktfVersion, config.projectDirectory);
    let needsGet = false;
    for (const provider of argv.provider) {
        const constraint = dependency_manager_1.ProviderConstraint.fromConfigEntry(provider);
        if (argv.forceLocal) {
            needsGet = true;
            await manager.addLocalProvider(constraint);
        }
        else {
            const { addedLocalProvider } = await manager.addProvider(constraint);
            if (addedLocalProvider) {
                needsGet = true;
            }
        }
    }
    if (needsGet) {
        console.log("Local providers have been updated. Running cdktf get to update...");
        await get({ language: language, output: config.codeMakerOutput });
    }
}
exports.providerAdd = providerAdd;
//# sourceMappingURL=data:application/json;base64,