"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const config = provider_generator_1.config.readConfigSync();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "deploy [stacks...]";
        this.describe = "Deploy the given stacks";
        this.aliases = ["apply"];
        this.builder = (args) => args
            .positional("stacks", {
            desc: "Deploy stacks matching the given ids. Required when more than one stack is present in the app",
            type: "string",
        })
            .option("app", {
            default: config.app,
            required: true,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            required: true,
            desc: "Output directory for the synthesized Terraform config",
            alias: "o",
        })
            .option("auto-approve", {
            type: "boolean",
            default: false,
            required: false,
            desc: "Auto approve",
        })
            .option("outputs-file", {
            type: "string",
            required: false,
            desc: "Path to file where stack outputs will be written as JSON",
            requiresArg: true,
        })
            .option("outputs-file-include-sensitive-outputs", {
            type: "boolean",
            required: false,
            desc: "Whether to include sensitive outputs in the output file",
            default: false,
        })
            .option("ignore-missing-stack-dependencies", {
            type: "boolean",
            required: false,
            desc: "Don't check if all stacks specified in the command have their dependencies included as well",
            default: false,
        })
            .option("parallelism", {
            type: "number",
            required: false,
            desc: "Number of concurrent CDKTF stacks to run. Defaults to infinity, denoted by -1",
            default: -1,
        })
            .option("refresh-only", {
            default: false,
            required: false,
            boolean: true,
            desc: 'Select the "refresh only" planning mode, which checks whether remote objects still match the outcome of the most recent Terraform apply but does not propose any actions to undo any changes made outside of Terraform.',
        })
            .showHelpOnFail(true);
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("deploy");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.deploy(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0VBQTBEO0FBQzFELGtEQUFxRDtBQUNyRCw2Q0FBMEM7QUFDMUMsd0RBQW9EO0FBRXBELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFRLFNBQVEsMEJBQVc7SUFBakM7O1FBQ2tCLFlBQU8sR0FBRyxvQkFBb0IsQ0FBQztRQUMvQixhQUFRLEdBQUcseUJBQXlCLENBQUM7UUFDckMsWUFBTyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEIsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQ3BCLElBQUksRUFBRSwrRkFBK0Y7WUFDckcsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO2FBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSTtZQUNkLElBQUksRUFBRSw4Q0FBOEM7WUFDcEQsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDdEIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsdURBQXVEO1lBQzdELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQzthQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPLEVBQUUsS0FBSztZQUNkLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLGNBQWM7U0FDckIsQ0FBQzthQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSwwREFBMEQ7WUFDaEUsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQzthQUNELE1BQU0sQ0FBQyx3Q0FBd0MsRUFBRTtZQUNoRCxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLHlEQUF5RDtZQUMvRCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7YUFDRCxNQUFNLENBQUMsbUNBQW1DLEVBQUU7WUFDM0MsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSw2RkFBNkY7WUFDbkcsT0FBTyxFQUFFLEtBQUs7U0FDZixDQUFDO2FBQ0QsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUNyQixJQUFJLEVBQUUsUUFBUTtZQUNkLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLCtFQUErRTtZQUNyRixPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ1osQ0FBQzthQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxRQUFRLEVBQUUsS0FBSztZQUNmLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFLHlOQUF5TjtTQUNoTyxDQUFDO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBUTVCLENBQUM7SUFOUSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQVM7UUFDbEMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQiw2RkFBNkY7UUFDN0YsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tIFwieWFyZ3NcIjtcbmltcG9ydCB7IGNvbmZpZyBhcyBjZmcgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgcmVxdWlyZUhhbmRsZXJzIH0gZnJvbSBcIi4vaGVscGVyL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4uLy4uL2xpYi9lcnJvcnNcIjtcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vaGVscGVyL2Jhc2UtY29tbWFuZFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBleHRlbmRzIEJhc2VDb21tYW5kIHtcbiAgcHVibGljIHJlYWRvbmx5IGNvbW1hbmQgPSBcImRlcGxveSBbc3RhY2tzLi4uXVwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPSBcIkRlcGxveSB0aGUgZ2l2ZW4gc3RhY2tzXCI7XG4gIHB1YmxpYyByZWFkb25seSBhbGlhc2VzID0gW1wiYXBwbHlcIl07XG5cbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAucG9zaXRpb25hbChcInN0YWNrc1wiLCB7XG4gICAgICAgIGRlc2M6IFwiRGVwbG95IHN0YWNrcyBtYXRjaGluZyB0aGUgZ2l2ZW4gaWRzLiBSZXF1aXJlZCB3aGVuIG1vcmUgdGhhbiBvbmUgc3RhY2sgaXMgcHJlc2VudCBpbiB0aGUgYXBwXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImFwcFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5hcHAsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBkZXNjOiBcIkNvbW1hbmQgdG8gdXNlIGluIG9yZGVyIHRvIGV4ZWN1dGUgY2RrdGYgYXBwXCIsXG4gICAgICAgIGFsaWFzOiBcImFcIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwib3V0cHV0XCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLm91dHB1dCxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGRlc2M6IFwiT3V0cHV0IGRpcmVjdG9yeSBmb3IgdGhlIHN5bnRoZXNpemVkIFRlcnJhZm9ybSBjb25maWdcIixcbiAgICAgICAgYWxpYXM6IFwib1wiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJhdXRvLWFwcHJvdmVcIiwge1xuICAgICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgZGVzYzogXCJBdXRvIGFwcHJvdmVcIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwib3V0cHV0cy1maWxlXCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBkZXNjOiBcIlBhdGggdG8gZmlsZSB3aGVyZSBzdGFjayBvdXRwdXRzIHdpbGwgYmUgd3JpdHRlbiBhcyBKU09OXCIsXG4gICAgICAgIHJlcXVpcmVzQXJnOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJvdXRwdXRzLWZpbGUtaW5jbHVkZS1zZW5zaXRpdmUtb3V0cHV0c1wiLCB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIGRlc2M6IFwiV2hldGhlciB0byBpbmNsdWRlIHNlbnNpdGl2ZSBvdXRwdXRzIGluIHRoZSBvdXRwdXQgZmlsZVwiLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwiaWdub3JlLW1pc3Npbmctc3RhY2stZGVwZW5kZW5jaWVzXCIsIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgZGVzYzogXCJEb24ndCBjaGVjayBpZiBhbGwgc3RhY2tzIHNwZWNpZmllZCBpbiB0aGUgY29tbWFuZCBoYXZlIHRoZWlyIGRlcGVuZGVuY2llcyBpbmNsdWRlZCBhcyB3ZWxsXCIsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJwYXJhbGxlbGlzbVwiLCB7XG4gICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgZGVzYzogXCJOdW1iZXIgb2YgY29uY3VycmVudCBDREtURiBzdGFja3MgdG8gcnVuLiBEZWZhdWx0cyB0byBpbmZpbml0eSwgZGVub3RlZCBieSAtMVwiLFxuICAgICAgICBkZWZhdWx0OiAtMSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwicmVmcmVzaC1vbmx5XCIsIHtcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgYm9vbGVhbjogdHJ1ZSxcbiAgICAgICAgZGVzYzogJ1NlbGVjdCB0aGUgXCJyZWZyZXNoIG9ubHlcIiBwbGFubmluZyBtb2RlLCB3aGljaCBjaGVja3Mgd2hldGhlciByZW1vdGUgb2JqZWN0cyBzdGlsbCBtYXRjaCB0aGUgb3V0Y29tZSBvZiB0aGUgbW9zdCByZWNlbnQgVGVycmFmb3JtIGFwcGx5IGJ1dCBkb2VzIG5vdCBwcm9wb3NlIGFueSBhY3Rpb25zIHRvIHVuZG8gYW55IGNoYW5nZXMgbWFkZSBvdXRzaWRlIG9mIFRlcnJhZm9ybS4nLFxuICAgICAgfSlcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlQ29tbWFuZChhcmd2OiBhbnkpIHtcbiAgICBFcnJvcnMuc2V0U2NvcGUoXCJkZXBsb3lcIik7XG4gICAgLy8gZGVmZXJyZWQgcmVxdWlyZSB0byBrZWVwIGNka3RmLWNsaSBtYWluIGVudHJ5cG9pbnQgc21hbGwgKGUuZy4gZm9yIGZhc3Qgc2hlbGwgY29tcGxldGlvbnMpXG4gICAgY29uc3QgYXBpID0gcmVxdWlyZUhhbmRsZXJzKCk7XG4gICAgYXdhaXQgYXBpLmRlcGxveShhcmd2KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=