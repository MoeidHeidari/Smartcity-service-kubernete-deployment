"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInteractiveTerminal = exports.verifySimilarLibraryVersion = exports.checkEnvironment = void 0;
const semver = __importStar(require("semver"));
const debug_1 = require("../../../lib/debug");
const errors_1 = require("../../../lib/errors");
const logging_1 = require("../../../lib/logging");
const version_1 = require("../../../lib/version");
const environment_1 = require("../../../lib/environment");
function throwIfLowerVersion(language, minVersion, stdout) {
    if (!stdout) {
        throw errors_1.Errors.Usage(`${language} version could not be determined`);
    }
    const version = semver.coerce(stdout);
    if (!version || !semver.valid(version)) {
        console.error(errors_1.Errors.Internal(`Unable to parse ${language} version "${stdout}"`));
        return;
    }
    if (semver.lt(version, minVersion)) {
        console.error(errors_1.Errors.Usage(`${language} version "${version}" is not supported. Please upgrade to at least ${minVersion}`));
    }
}
async function checkGoVersion() {
    const out = await debug_1.getGoVersion();
    throwIfLowerVersion("Go", "1.16.0", out);
}
async function checkNodeVersion() {
    const out = await debug_1.getNodeVersion();
    throwIfLowerVersion("Node.js", "14.17.0", out);
}
async function checkEnvironment() {
    await checkNodeVersion();
    switch (debug_1.getLanguage()) {
        case "go":
            await checkGoVersion();
    }
}
exports.checkEnvironment = checkEnvironment;
async function verifySimilarLibraryVersion() {
    if (environment_1.DISABLE_VERSION_CHECK) {
        logging_1.logger.debug("Version check disabled via environment variable");
        return;
    }
    const language = debug_1.getLanguage();
    if (!language) {
        logging_1.logger.debug("Unable to detect language, skipping version check");
        return;
    }
    const libVersion = await debug_1.getPackageVersion(language, "cdktf");
    if (!libVersion) {
        logging_1.logger.debug(`Unable to detect library version for ${language}`);
        return;
    }
    const cliVersion = `${version_1.DISPLAY_VERSION}`;
    if (!libVersion) {
        logging_1.logger.debug(`Unable to detect library version for ${language}`);
        return;
    }
    logging_1.logger.debug(`CLI version: ${cliVersion}`);
    logging_1.logger.debug(`${language} package version: ${libVersion}`);
    if (cliVersion === "0.0.0" || cliVersion.includes("-dev")) {
        logging_1.logger.debug(`Running a development version of cdktf, skipping version check`);
        return;
    }
    if (cliVersion.includes(".dev") || cliVersion.includes("-pre.")) {
        logging_1.logger.debug(`Running a pre-release version of cdktf-cli, skipping version compatibility check`);
        return;
    }
    if (libVersion.includes(".dev") || libVersion.includes("-pre.")) {
        logging_1.logger.debug(`Running a pre-release version of cdktf, skipping version compatibility check`);
        return;
    }
    if (!semver.valid(libVersion)) {
        logging_1.logger.info("Could not determine library version, skipping version compatibility check");
        return;
    }
    if (!semver.valid(cliVersion)) {
        logging_1.logger.info("Could not determine CLI version, skipping version compatibility check");
        return;
    }
    if (semver.major(libVersion) !== semver.major(cliVersion)) {
        throw errors_1.Errors.Usage(`The major version of the library (${libVersion}) and the CLI (${cliVersion}) are different. Please update the library to the same major version and regenerate your provider bindings with 'cdktf get' and update your prebuilt providers.`);
    }
    if (semver.minor(libVersion) !== semver.minor(cliVersion)) {
        throw errors_1.Errors.Usage(`The minor version of the library (${libVersion}) and the CLI (${cliVersion}) are different. Please update the library to the same minor version and regenerate your provider bindings with 'cdktf get' and update your prebuilt providers.`);
    }
}
exports.verifySimilarLibraryVersion = verifySimilarLibraryVersion;
function isInteractiveTerminal() {
    return process.stdout.isTTY && !process.env.CI;
}
exports.isInteractiveTerminal = isInteractiveTerminal;
//# sourceMappingURL=data:application/json;base64,