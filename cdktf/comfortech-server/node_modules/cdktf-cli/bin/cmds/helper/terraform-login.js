"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformLogin = void 0;
const fs = __importStar(require("fs"));
const inquirer = __importStar(require("inquirer"));
const open = __importStar(require("open"));
const chalk = __importStar(require("chalk"));
const terraformCloudClient = __importStar(require("./terraform-cloud-client"));
const logging_1 = require("../../../lib/logging");
const chalkColour = new chalk.Instance();
const homedir = require("os").homedir();
const terraformCredentialsFilePath = `${homedir}/.terraform.d/credentials.tfrc.json`;
class TerraformLogin {
    constructor(tfeHostname) {
        this.tfeHostname = tfeHostname;
    }
    get terraformLoginURL() {
        return `https://${this.tfeHostname}/app/settings/tokens?source=terraform-login`;
    }
    async askToContinue() {
        // Describe the command
        console.log(chalkColour `{greenBright Welcome to CDK for Terraform!}

By default, cdktf allows you to manage the state of your stacks using Terraform Cloud for free.
cdktf will request an API token for ${this.tfeHostname} using your browser.

If login is successful, cdktf will store the token in plain text in
the following file for use by subsequent Terraform commands:
    {whiteBright ${terraformCredentialsFilePath}}

{yellow Note: The local storage mode isn't recommended for storing the state of your stacks.}
`);
        let isLogin = false;
        const { tfCloud } = await inquirer.prompt([
            {
                name: "tfCloud",
                type: "confirm",
                message: "Do you want to continue with Terraform Cloud remote state management?",
            },
        ]);
        if (tfCloud) {
            isLogin = true;
            this.openBrowser();
        }
        return isLogin;
    }
    openBrowser() {
        console.log(`\nopening webpage using your browser.....\n`);
        console.log(chalkColour `If the web browser didn't open the window automatically, you can go to the following url:
        {whiteBright ${this.terraformLoginURL}}\n`);
        return open.default(this.terraformLoginURL);
    }
    async askForToken() {
        const { token } = await inquirer.prompt([
            {
                name: "token",
                message: `Token for ${this.tfeHostname} ðŸ”‘`,
                type: "password",
            },
        ]);
        return token;
    }
    async saveTerraformCredentials(token) {
        const terraformCredentials = await this.getTerraformCredentialsFile();
        const credentialsFileJSON = JSON.stringify({
            ...terraformCredentials,
            credentials: {
                ...terraformCredentials.credentials,
                [this.tfeHostname]: { token: token },
            },
        }, undefined, 2);
        fs.writeFileSync(terraformCredentialsFilePath, credentialsFileJSON);
    }
    async checkIfTerraformCredentialsExist() {
        if (fs.existsSync(terraformCredentialsFilePath)) {
            const token = await this.getTokenFromTerraformCredentialsFile();
            if (token != "") {
                return true;
            }
        }
        return false;
    }
    async getTokenFromTerraformCredentialsFile() {
        const terraformCredentials = await this.getTerraformCredentialsFile();
        if (this.tfeHostname in terraformCredentials.credentials) {
            return terraformCredentials.credentials[this.tfeHostname].token;
        }
        return "";
    }
    async getTerraformCredentialsFile() {
        try {
            const credentialsFile = JSON.parse(fs.readFileSync(terraformCredentialsFilePath).toString());
            const terraformCredentials = credentialsFile;
            return terraformCredentials;
        }
        catch (e) {
            logging_1.logger.debug(`Could not find terraform credentials file at ${terraformCredentialsFilePath}`);
            return { credentials: {} };
        }
    }
    async isTokenValid(token) {
        try {
            await terraformCloudClient.getAccountDetails(this.tfeHostname, token);
            return true;
        }
        catch (e) {
            if (e.statusCode === 401) {
                return false;
            }
            throw e;
        }
    }
    async askToLogin() {
        const hasToken = await this.checkIfTerraformCredentialsExist();
        const token = hasToken
            ? await this.getTokenFromTerraformCredentialsFile()
            : null;
        if (token && (await this.isTokenValid(token))) {
            return token;
        }
        // we either have no token or not a valid one
        const shouldContinue = await this.askToContinue();
        if (shouldContinue) {
            const token = await this.askForToken();
            if (token == "") {
                console.error(`\nERROR: failed to gather token.\n`);
                process.exit(1);
            }
            this.saveTerraformCredentials(token);
            return token;
        }
        return ""; // cancel
    }
}
exports.TerraformLogin = TerraformLogin;
// Note: we might want to look into using 'readline' instead for async reading of input.
//# sourceMappingURL=data:application/json;base64,