"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrganizationNames = exports.createWorkspace = exports.getAccountDetails = void 0;
const https = require("https");
const url_1 = require("url");
const SUCCESS_STATUS_CODES = [200, 201];
async function get(url, token) {
    return new Promise((ok, ko) => {
        const req = https.request(url_1.format(url), { headers: { Authorization: `Bearer ${token}` } }, (res) => {
            if (res.statusCode !== 200) {
                if (res.statusCode === 401) {
                    console.log("ERROR: Your existing token for Terraform Cloud is invalid.");
                }
                const error = new Error(res.statusMessage);
                error.statusCode = res.statusCode;
                return ko(error);
            }
            const data = new Array();
            res.on("data", (chunk) => data.push(chunk));
            res.once("error", (err) => ko(err));
            res.once("end", () => {
                const response = JSON.parse(Buffer.concat(data).toString("utf-8"));
                return ok(response);
            });
        });
        req.end();
    });
}
async function post(url, token, data) {
    return new Promise((ok, ko) => {
        const req = https.request(url_1.format(url), {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/vnd.api+json",
                "Content-Length": data.length,
            },
            method: "POST",
        }, (res) => {
            const data = new Array();
            res.on("data", (chunk) => data.push(chunk));
            res.once("error", (err) => ko(err));
            res.once("end", () => {
                const response = JSON.parse(Buffer.concat(data).toString("utf-8"));
                if (res.statusCode) {
                    const statusCode = res.statusCode;
                    if (!SUCCESS_STATUS_CODES.includes(statusCode)) {
                        const { errors } = response;
                        const message = errors
                            .map((error) => error.detail)
                            .join(", ");
                        return ko(new Error(message));
                    }
                }
                return ok(response);
            });
        });
        req.write(data);
        req.end();
    });
}
async function getAccountDetails(tfeHostname, token) {
    return (await get(`https://${tfeHostname}/api/v2//account/details`, token));
}
exports.getAccountDetails = getAccountDetails;
async function createWorkspace(tfeHostname, organizationName, workspaceName, token) {
    await post(`https://${tfeHostname}/api/v2//organizations/${organizationName}/workspaces`, token, JSON.stringify({
        data: {
            attributes: {
                name: workspaceName,
                operations: false,
            },
            type: "workspaces",
        },
    }));
}
exports.createWorkspace = createWorkspace;
async function getOrganizationNames(tfeHostname, token) {
    return (await get(`https://${tfeHostname}/api/v2//organizations`, token));
}
exports.getOrganizationNames = getOrganizationNames;
//# sourceMappingURL=data:application/json;base64,