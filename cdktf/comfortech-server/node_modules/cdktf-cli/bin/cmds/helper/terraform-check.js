"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.terraformCheck = void 0;
const terraform_cli_1 = require("../../../lib/models/terraform-cli");
const semver = __importStar(require("semver"));
const fs_extra_1 = require("fs-extra");
const path = __importStar(require("path"));
const node_abort_controller_1 = require("node-abort-controller"); // polyfill until we update to node 14
const MIN_SUPPORTED_VERSION = "0.13.0";
const VERSION_REGEXP = /Terraform v\d+.\d+.\d+/;
exports.terraformCheck = async () => {
    try {
        if (fs_extra_1.existsSync(path.join(process.cwd(), "terraform.tfstate"))) {
            throw new Error(`
        CDK for Terraform now supports multiple stacks!
        Found 'terraform.tfstate' Terraform state file. Please rename it to match the stack name. Learn more https://cdk.tf/multiple-stacks
      `);
        }
        // We're abusing the TerraformCli class here,
        // hence we need to construct this object.
        // Only the `workingDirectory` is releveant here.
        const fakeStack = {
            name: "",
            workingDirectory: "./",
            constructPath: "",
            content: "",
            synthesizedStackPath: "",
            annotations: [],
            dependencies: [],
        };
        const terraform = new terraform_cli_1.TerraformCli(new node_abort_controller_1.AbortController().signal, fakeStack);
        const terraformVersion = await terraform.version();
        const terraformVersionMatches = terraformVersion.match(VERSION_REGEXP);
        if (terraformVersionMatches !== null) {
            // Should always be the first match found in the string
            const cleanTerraformVersion = semver.clean(terraformVersionMatches[0].substring(terraformVersionMatches[0].indexOf("v")));
            if (cleanTerraformVersion &&
                semver.lt(cleanTerraformVersion, MIN_SUPPORTED_VERSION)) {
                const warningMessage = `Warning: unsupported Terraform version [${cleanTerraformVersion}] - please upgrade to >=${MIN_SUPPORTED_VERSION}`;
                console.warn(warningMessage);
            }
        }
    }
    catch (e) {
        console.error(e.message);
        process.exit(1);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWNoZWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLWNoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxRUFBaUU7QUFDakUsK0NBQWlDO0FBRWpDLHVDQUFzQztBQUN0QywyQ0FBNkI7QUFDN0IsaUVBQXdELENBQUMsc0NBQXNDO0FBRS9GLE1BQU0scUJBQXFCLEdBQUcsUUFBUSxDQUFDO0FBQ3ZDLE1BQU0sY0FBYyxHQUFHLHdCQUF3QixDQUFDO0FBRW5DLFFBQUEsY0FBYyxHQUFHLEtBQUssSUFBbUIsRUFBRTtJQUN0RCxJQUFJO1FBQ0YsSUFBSSxxQkFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUMsRUFBRTtZQUM3RCxNQUFNLElBQUksS0FBSyxDQUFDOzs7T0FHZixDQUFDLENBQUM7U0FDSjtRQUVELDZDQUE2QztRQUM3QywwQ0FBMEM7UUFDMUMsaURBQWlEO1FBQ2pELE1BQU0sU0FBUyxHQUFxQjtZQUNsQyxJQUFJLEVBQUUsRUFBRTtZQUNSLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsYUFBYSxFQUFFLEVBQUU7WUFDakIsT0FBTyxFQUFFLEVBQUU7WUFDWCxvQkFBb0IsRUFBRSxFQUFFO1lBQ3hCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsWUFBWSxFQUFFLEVBQUU7U0FDakIsQ0FBQztRQUVGLE1BQU0sU0FBUyxHQUFHLElBQUksNEJBQVksQ0FBQyxJQUFJLHVDQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFNUUsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuRCxNQUFNLHVCQUF1QixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV2RSxJQUFJLHVCQUF1QixLQUFLLElBQUksRUFBRTtZQUNwQyx1REFBdUQ7WUFDdkQsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUN4Qyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ2xDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FDeEMsQ0FDRixDQUFDO1lBRUYsSUFDRSxxQkFBcUI7Z0JBQ3JCLE1BQU0sQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUUscUJBQXFCLENBQUMsRUFDdkQ7Z0JBQ0EsTUFBTSxjQUFjLEdBQUcsMkNBQTJDLHFCQUFxQiwyQkFBMkIscUJBQXFCLEVBQUUsQ0FBQztnQkFDMUksT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUM5QjtTQUNGO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXJyYWZvcm1DbGkgfSBmcm9tIFwiLi4vLi4vLi4vbGliL21vZGVscy90ZXJyYWZvcm0tY2xpXCI7XG5pbXBvcnQgKiBhcyBzZW12ZXIgZnJvbSBcInNlbXZlclwiO1xuaW1wb3J0IHsgU3ludGhlc2l6ZWRTdGFjayB9IGZyb20gXCIuLi8uLi8uLi9saWIvc3ludGgtc3RhY2tcIjtcbmltcG9ydCB7IGV4aXN0c1N5bmMgfSBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IEFib3J0Q29udHJvbGxlciB9IGZyb20gXCJub2RlLWFib3J0LWNvbnRyb2xsZXJcIjsgLy8gcG9seWZpbGwgdW50aWwgd2UgdXBkYXRlIHRvIG5vZGUgMTRcblxuY29uc3QgTUlOX1NVUFBPUlRFRF9WRVJTSU9OID0gXCIwLjEzLjBcIjtcbmNvbnN0IFZFUlNJT05fUkVHRVhQID0gL1RlcnJhZm9ybSB2XFxkKy5cXGQrLlxcZCsvO1xuXG5leHBvcnQgY29uc3QgdGVycmFmb3JtQ2hlY2sgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIHRyeSB7XG4gICAgaWYgKGV4aXN0c1N5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIFwidGVycmFmb3JtLnRmc3RhdGVcIikpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFxuICAgICAgICBDREsgZm9yIFRlcnJhZm9ybSBub3cgc3VwcG9ydHMgbXVsdGlwbGUgc3RhY2tzIVxuICAgICAgICBGb3VuZCAndGVycmFmb3JtLnRmc3RhdGUnIFRlcnJhZm9ybSBzdGF0ZSBmaWxlLiBQbGVhc2UgcmVuYW1lIGl0IHRvIG1hdGNoIHRoZSBzdGFjayBuYW1lLiBMZWFybiBtb3JlIGh0dHBzOi8vY2RrLnRmL211bHRpcGxlLXN0YWNrc1xuICAgICAgYCk7XG4gICAgfVxuXG4gICAgLy8gV2UncmUgYWJ1c2luZyB0aGUgVGVycmFmb3JtQ2xpIGNsYXNzIGhlcmUsXG4gICAgLy8gaGVuY2Ugd2UgbmVlZCB0byBjb25zdHJ1Y3QgdGhpcyBvYmplY3QuXG4gICAgLy8gT25seSB0aGUgYHdvcmtpbmdEaXJlY3RvcnlgIGlzIHJlbGV2ZWFudCBoZXJlLlxuICAgIGNvbnN0IGZha2VTdGFjazogU3ludGhlc2l6ZWRTdGFjayA9IHtcbiAgICAgIG5hbWU6IFwiXCIsXG4gICAgICB3b3JraW5nRGlyZWN0b3J5OiBcIi4vXCIsXG4gICAgICBjb25zdHJ1Y3RQYXRoOiBcIlwiLFxuICAgICAgY29udGVudDogXCJcIixcbiAgICAgIHN5bnRoZXNpemVkU3RhY2tQYXRoOiBcIlwiLFxuICAgICAgYW5ub3RhdGlvbnM6IFtdLFxuICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICB9O1xuXG4gICAgY29uc3QgdGVycmFmb3JtID0gbmV3IFRlcnJhZm9ybUNsaShuZXcgQWJvcnRDb250cm9sbGVyKCkuc2lnbmFsLCBmYWtlU3RhY2spO1xuXG4gICAgY29uc3QgdGVycmFmb3JtVmVyc2lvbiA9IGF3YWl0IHRlcnJhZm9ybS52ZXJzaW9uKCk7XG4gICAgY29uc3QgdGVycmFmb3JtVmVyc2lvbk1hdGNoZXMgPSB0ZXJyYWZvcm1WZXJzaW9uLm1hdGNoKFZFUlNJT05fUkVHRVhQKTtcblxuICAgIGlmICh0ZXJyYWZvcm1WZXJzaW9uTWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgLy8gU2hvdWxkIGFsd2F5cyBiZSB0aGUgZmlyc3QgbWF0Y2ggZm91bmQgaW4gdGhlIHN0cmluZ1xuICAgICAgY29uc3QgY2xlYW5UZXJyYWZvcm1WZXJzaW9uID0gc2VtdmVyLmNsZWFuKFxuICAgICAgICB0ZXJyYWZvcm1WZXJzaW9uTWF0Y2hlc1swXS5zdWJzdHJpbmcoXG4gICAgICAgICAgdGVycmFmb3JtVmVyc2lvbk1hdGNoZXNbMF0uaW5kZXhPZihcInZcIilcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgaWYgKFxuICAgICAgICBjbGVhblRlcnJhZm9ybVZlcnNpb24gJiZcbiAgICAgICAgc2VtdmVyLmx0KGNsZWFuVGVycmFmb3JtVmVyc2lvbiwgTUlOX1NVUFBPUlRFRF9WRVJTSU9OKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gYFdhcm5pbmc6IHVuc3VwcG9ydGVkIFRlcnJhZm9ybSB2ZXJzaW9uIFske2NsZWFuVGVycmFmb3JtVmVyc2lvbn1dIC0gcGxlYXNlIHVwZ3JhZGUgdG8gPj0ke01JTl9TVVBQT1JURURfVkVSU0lPTn1gO1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn07XG4iXX0=