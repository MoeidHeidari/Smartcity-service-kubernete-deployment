"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFileAboveCwd = exports.readStreamAsString = exports.requireHandlers = exports.projectRootPath = exports.readPackageJson = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const pkgUp = __importStar(require("pkg-up"));
exports.readPackageJson = () => {
    const pkgPath = pkgUp.sync({ cwd: __dirname });
    if (!pkgPath) {
        throw new Error("unable to find package.json");
    }
    return JSON.parse(fs.readFileSync(pkgPath, "utf-8"));
};
exports.projectRootPath = () => {
    const pkgPath = pkgUp.sync({ cwd: __dirname });
    if (!pkgPath) {
        throw new Error("unable to find package.json");
    }
    return path_1.default.dirname(pkgPath);
};
// deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
exports.requireHandlers = () => {
    // if file exists relative to this file return its file path
    // otherwise return the file path relative to the project root
    const filePath = path_1.default.join(__dirname, "..", "handlers.js");
    if (fs.existsSync(filePath)) {
        return require(filePath);
    }
    return require(path_1.default.join(exports.projectRootPath(), "bundle", "bin", "cmds", "handlers.js"));
};
function readStreamAsString(stream, noTTYErrorMessage) {
    return new Promise((ok, ko) => {
        if (stream.isTTY) {
            ko(noTTYErrorMessage);
        }
        else {
            let string = "";
            stream.on("data", (data) => (string += data.toString()));
            stream.on("close", () => ok(string));
            stream.on("error", (err) => ko(err));
        }
    });
}
exports.readStreamAsString = readStreamAsString;
function findFileAboveCwd(file, rootPath = process.cwd()) {
    const fullPath = path_1.default.resolve(rootPath, file);
    if (fs.existsSync(fullPath)) {
        return fullPath;
    }
    const parentDir = path_1.default.resolve(rootPath, "..");
    if (fs.existsSync(parentDir) && parentDir !== rootPath) {
        return findFileAboveCwd(file, parentDir);
    }
    return null;
}
exports.findFileAboveCwd = findFileAboveCwd;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsZ0RBQXdCO0FBQ3hCLDhDQUFnQztBQUVuQixRQUFBLGVBQWUsR0FBRyxHQUFHLEVBQUU7SUFDbEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUM7QUFFVyxRQUFBLGVBQWUsR0FBRyxHQUFHLEVBQUU7SUFDbEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFFRCxPQUFPLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsNkZBQTZGO0FBQ2hGLFFBQUEsZUFBZSxHQUFHLEdBQUcsRUFBRTtJQUNsQyw0REFBNEQ7SUFDNUQsOERBQThEO0lBQzlELE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMzRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDM0IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7SUFDRCxPQUFPLE9BQU8sQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUN0Qix1QkFBZSxFQUFFLEVBQ2pCLFFBQVEsRUFDUixLQUFLLEVBQ0wsTUFBTSxFQUNOLGFBQWEsQ0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixTQUFnQixrQkFBa0IsQ0FDaEMsTUFBNEIsRUFDNUIsaUJBQXlCO0lBRXpCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDNUIsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2hCLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDaEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFekQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBZkQsZ0RBZUM7QUFFRCxTQUFnQixnQkFBZ0IsQ0FDOUIsSUFBWSxFQUNaLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBRXhCLE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMzQixPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUVELE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ3RELE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBZkQsNENBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgKiBhcyBwa2dVcCBmcm9tIFwicGtnLXVwXCI7XG5cbmV4cG9ydCBjb25zdCByZWFkUGFja2FnZUpzb24gPSAoKSA9PiB7XG4gIGNvbnN0IHBrZ1BhdGggPSBwa2dVcC5zeW5jKHsgY3dkOiBfX2Rpcm5hbWUgfSk7XG4gIGlmICghcGtnUGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVuYWJsZSB0byBmaW5kIHBhY2thZ2UuanNvblwiKTtcbiAgfVxuXG4gIHJldHVybiBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwa2dQYXRoLCBcInV0Zi04XCIpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9qZWN0Um9vdFBhdGggPSAoKSA9PiB7XG4gIGNvbnN0IHBrZ1BhdGggPSBwa2dVcC5zeW5jKHsgY3dkOiBfX2Rpcm5hbWUgfSk7XG4gIGlmICghcGtnUGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVuYWJsZSB0byBmaW5kIHBhY2thZ2UuanNvblwiKTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLmRpcm5hbWUocGtnUGF0aCk7XG59O1xuXG4vLyBkZWZlcnJlZCByZXF1aXJlIHRvIGtlZXAgY2RrdGYtY2xpIG1haW4gZW50cnlwb2ludCBzbWFsbCAoZS5nLiBmb3IgZmFzdCBzaGVsbCBjb21wbGV0aW9ucylcbmV4cG9ydCBjb25zdCByZXF1aXJlSGFuZGxlcnMgPSAoKSA9PiB7XG4gIC8vIGlmIGZpbGUgZXhpc3RzIHJlbGF0aXZlIHRvIHRoaXMgZmlsZSByZXR1cm4gaXRzIGZpbGUgcGF0aFxuICAvLyBvdGhlcndpc2UgcmV0dXJuIHRoZSBmaWxlIHBhdGggcmVsYXRpdmUgdG8gdGhlIHByb2plY3Qgcm9vdFxuICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJoYW5kbGVycy5qc1wiKTtcbiAgaWYgKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoZmlsZVBhdGgpO1xuICB9XG4gIHJldHVybiByZXF1aXJlKHBhdGguam9pbihcbiAgICBwcm9qZWN0Um9vdFBhdGgoKSxcbiAgICBcImJ1bmRsZVwiLFxuICAgIFwiYmluXCIsXG4gICAgXCJjbWRzXCIsXG4gICAgXCJoYW5kbGVycy5qc1wiXG4gICkpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRTdHJlYW1Bc1N0cmluZyhcbiAgc3RyZWFtOiB0eXBlb2YgcHJvY2Vzcy5zdGRpbixcbiAgbm9UVFlFcnJvck1lc3NhZ2U6IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChvaywga28pID0+IHtcbiAgICBpZiAoc3RyZWFtLmlzVFRZKSB7XG4gICAgICBrbyhub1RUWUVycm9yTWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdHJpbmcgPSBcIlwiO1xuICAgICAgc3RyZWFtLm9uKFwiZGF0YVwiLCAoZGF0YSkgPT4gKHN0cmluZyArPSBkYXRhLnRvU3RyaW5nKCkpKTtcblxuICAgICAgc3RyZWFtLm9uKFwiY2xvc2VcIiwgKCkgPT4gb2soc3RyaW5nKSk7XG4gICAgICBzdHJlYW0ub24oXCJlcnJvclwiLCAoZXJyKSA9PiBrbyhlcnIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpbGVBYm92ZUN3ZChcbiAgZmlsZTogc3RyaW5nLFxuICByb290UGF0aCA9IHByb2Nlc3MuY3dkKClcbik6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShyb290UGF0aCwgZmlsZSk7XG4gIGlmIChmcy5leGlzdHNTeW5jKGZ1bGxQYXRoKSkge1xuICAgIHJldHVybiBmdWxsUGF0aDtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudERpciA9IHBhdGgucmVzb2x2ZShyb290UGF0aCwgXCIuLlwiKTtcbiAgaWYgKGZzLmV4aXN0c1N5bmMocGFyZW50RGlyKSAmJiBwYXJlbnREaXIgIT09IHJvb3RQYXRoKSB7XG4gICAgcmV0dXJuIGZpbmRGaWxlQWJvdmVDd2QoZmlsZSwgcGFyZW50RGlyKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIl19