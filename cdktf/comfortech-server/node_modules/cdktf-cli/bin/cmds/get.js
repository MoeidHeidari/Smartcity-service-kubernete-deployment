"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const config = provider_generator_1.config.readConfigSync();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "get";
        this.describe = "Generate CDK Constructs for Terraform providers and modules.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .option("output", {
            default: config.codeMakerOutput,
            type: "string",
            desc: "Output directory for generated Constructs",
            alias: "o",
        })
            .option("language", {
            default: config.language,
            required: true,
            type: "string",
            desc: "Output programming language",
            alias: "l",
            choices: provider_generator_1.LANGUAGES,
        });
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("get");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.get(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0VBQXFFO0FBQ3JFLGtEQUFxRDtBQUNyRCw2Q0FBMEM7QUFDMUMsd0RBQW9EO0FBQ3BELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFRLFNBQVEsMEJBQVc7SUFBakM7O1FBQ2tCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsYUFBUSxHQUN0Qiw4REFBOEQsQ0FBQztRQUVqRCxZQUFPLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FDN0MsSUFBSTthQUNELGNBQWMsQ0FBQyxJQUFJLENBQUM7YUFDcEIsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLGVBQWU7WUFDL0IsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsMkNBQTJDO1lBQ2pELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQzthQUNELE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDbEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsNkJBQTZCO1lBQ25DLEtBQUssRUFBRSxHQUFHO1lBQ1YsT0FBTyxFQUFFLDhCQUFTO1NBQ25CLENBQUMsQ0FBQztJQVFULENBQUM7SUFOUSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQVM7UUFDbEMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2Qiw2RkFBNkY7UUFDN0YsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgeyBMQU5HVUFHRVMsIGNvbmZpZyBhcyBjZmcgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgcmVxdWlyZUhhbmRsZXJzIH0gZnJvbSBcIi4vaGVscGVyL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4uLy4uL2xpYi9lcnJvcnNcIjtcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vaGVscGVyL2Jhc2UtY29tbWFuZFwiO1xuY29uc3QgY29uZmlnID0gY2ZnLnJlYWRDb25maWdTeW5jKCk7XG5cbmNsYXNzIENvbW1hbmQgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XG4gIHB1YmxpYyByZWFkb25seSBjb21tYW5kID0gXCJnZXRcIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID1cbiAgICBcIkdlbmVyYXRlIENESyBDb25zdHJ1Y3RzIGZvciBUZXJyYWZvcm0gcHJvdmlkZXJzIGFuZCBtb2R1bGVzLlwiO1xuXG4gIHB1YmxpYyByZWFkb25seSBidWlsZGVyID0gKGFyZ3M6IHlhcmdzLkFyZ3YpID0+XG4gICAgYXJnc1xuICAgICAgLnNob3dIZWxwT25GYWlsKHRydWUpXG4gICAgICAub3B0aW9uKFwib3V0cHV0XCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLmNvZGVNYWtlck91dHB1dCxcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJPdXRwdXQgZGlyZWN0b3J5IGZvciBnZW5lcmF0ZWQgQ29uc3RydWN0c1wiLFxuICAgICAgICBhbGlhczogXCJvXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImxhbmd1YWdlXCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLmxhbmd1YWdlLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJPdXRwdXQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VcIixcbiAgICAgICAgYWxpYXM6IFwibFwiLFxuICAgICAgICBjaG9pY2VzOiBMQU5HVUFHRVMsXG4gICAgICB9KTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlQ29tbWFuZChhcmd2OiBhbnkpIHtcbiAgICBFcnJvcnMuc2V0U2NvcGUoXCJnZXRcIik7XG4gICAgLy8gZGVmZXJyZWQgcmVxdWlyZSB0byBrZWVwIGNka3RmLWNsaSBtYWluIGVudHJ5cG9pbnQgc21hbGwgKGUuZy4gZm9yIGZhc3Qgc2hlbGwgY29tcGxldGlvbnMpXG4gICAgY29uc3QgYXBpID0gcmVxdWlyZUhhbmRsZXJzKCk7XG4gICAgYXdhaXQgYXBpLmdldChhcmd2KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=