"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "login";
        this.describe = "Retrieves an API token to connect to Terraform Cloud or Terraform Enterprise.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .option("tfe-hostname", {
            string: true,
            requiresArg: true,
            describe: "The Terraform Enterprise hostname to authenticate against. If you use Terraform Cloud you can leave this on the default.",
            default: "app.terraform.io",
        })
            .example("cdktf login", "Takes you through the interactive login process")
            .example("cdktf login --tfe-hostname tfe.my-company.com", "Takes you through the interactive login process on your companies Terraform Enterprise instance.")
            .example("cat my-token.txt | cdktf login", "Uses a locally stored token directly, instead of going through the interactive login process")
            .strict();
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("login");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.login(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGtEQUFxRDtBQUNyRCw2Q0FBMEM7QUFDMUMsd0RBQW9EO0FBRXBELE1BQU0sT0FBUSxTQUFRLDBCQUFXO0lBQWpDOztRQUNrQixZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGFBQVEsR0FDdEIsK0VBQStFLENBQUM7UUFDbEUsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDO2FBQ3BCLE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsTUFBTSxFQUFFLElBQUk7WUFDWixXQUFXLEVBQUUsSUFBSTtZQUNqQixRQUFRLEVBQ04sMEhBQTBIO1lBQzVILE9BQU8sRUFBRSxrQkFBa0I7U0FDNUIsQ0FBQzthQUNELE9BQU8sQ0FBQyxhQUFhLEVBQUUsaURBQWlELENBQUM7YUFDekUsT0FBTyxDQUNOLCtDQUErQyxFQUMvQyxrR0FBa0csQ0FDbkc7YUFDQSxPQUFPLENBQ04sZ0NBQWdDLEVBQ2hDLDhGQUE4RixDQUMvRjthQUNBLE1BQU0sRUFBRSxDQUFDO0lBUWhCLENBQUM7SUFOUSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQVM7UUFDbEMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6Qiw2RkFBNkY7UUFDN0YsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgeyByZXF1aXJlSGFuZGxlcnMgfSBmcm9tIFwiLi9oZWxwZXIvdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBFcnJvcnMgfSBmcm9tIFwiLi4vLi4vbGliL2Vycm9yc1wiO1xuaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi9oZWxwZXIvYmFzZS1jb21tYW5kXCI7XG5cbmNsYXNzIENvbW1hbmQgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XG4gIHB1YmxpYyByZWFkb25seSBjb21tYW5kID0gXCJsb2dpblwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPVxuICAgIFwiUmV0cmlldmVzIGFuIEFQSSB0b2tlbiB0byBjb25uZWN0IHRvIFRlcnJhZm9ybSBDbG91ZCBvciBUZXJyYWZvcm0gRW50ZXJwcmlzZS5cIjtcbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcbiAgICAgIC5vcHRpb24oXCJ0ZmUtaG9zdG5hbWVcIiwge1xuICAgICAgICBzdHJpbmc6IHRydWUsXG4gICAgICAgIHJlcXVpcmVzQXJnOiB0cnVlLFxuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICBcIlRoZSBUZXJyYWZvcm0gRW50ZXJwcmlzZSBob3N0bmFtZSB0byBhdXRoZW50aWNhdGUgYWdhaW5zdC4gSWYgeW91IHVzZSBUZXJyYWZvcm0gQ2xvdWQgeW91IGNhbiBsZWF2ZSB0aGlzIG9uIHRoZSBkZWZhdWx0LlwiLFxuICAgICAgICBkZWZhdWx0OiBcImFwcC50ZXJyYWZvcm0uaW9cIixcbiAgICAgIH0pXG4gICAgICAuZXhhbXBsZShcImNka3RmIGxvZ2luXCIsIFwiVGFrZXMgeW91IHRocm91Z2ggdGhlIGludGVyYWN0aXZlIGxvZ2luIHByb2Nlc3NcIilcbiAgICAgIC5leGFtcGxlKFxuICAgICAgICBcImNka3RmIGxvZ2luIC0tdGZlLWhvc3RuYW1lIHRmZS5teS1jb21wYW55LmNvbVwiLFxuICAgICAgICBcIlRha2VzIHlvdSB0aHJvdWdoIHRoZSBpbnRlcmFjdGl2ZSBsb2dpbiBwcm9jZXNzIG9uIHlvdXIgY29tcGFuaWVzIFRlcnJhZm9ybSBFbnRlcnByaXNlIGluc3RhbmNlLlwiXG4gICAgICApXG4gICAgICAuZXhhbXBsZShcbiAgICAgICAgXCJjYXQgbXktdG9rZW4udHh0IHwgY2RrdGYgbG9naW5cIixcbiAgICAgICAgXCJVc2VzIGEgbG9jYWxseSBzdG9yZWQgdG9rZW4gZGlyZWN0bHksIGluc3RlYWQgb2YgZ29pbmcgdGhyb3VnaCB0aGUgaW50ZXJhY3RpdmUgbG9naW4gcHJvY2Vzc1wiXG4gICAgICApXG4gICAgICAuc3RyaWN0KCk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZUNvbW1hbmQoYXJndjogYW55KSB7XG4gICAgRXJyb3JzLnNldFNjb3BlKFwibG9naW5cIik7XG4gICAgLy8gZGVmZXJyZWQgcmVxdWlyZSB0byBrZWVwIGNka3RmLWNsaSBtYWluIGVudHJ5cG9pbnQgc21hbGwgKGUuZy4gZm9yIGZhc3Qgc2hlbGwgY29tcGxldGlvbnMpXG4gICAgY29uc3QgYXBpID0gcmVxdWlyZUhhbmRsZXJzKCk7XG4gICAgYXdhaXQgYXBpLmxvZ2luKGFyZ3YpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==