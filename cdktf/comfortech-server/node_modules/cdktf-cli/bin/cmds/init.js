"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const init_templates_1 = require("./helper/init-templates");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const pkg = utilities_1.readPackageJson();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "init";
        this.describe = "Create a new cdktf project from a template.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .option("template", {
            type: "string",
            desc: `The template to be used to create a new project. Either URL to zip file or one of the built-in templates: [${init_templates_1.templates
                .map((t) => `"${t}"`)
                .join(", ")}]`,
        })
            .option("project-name", {
            type: "string",
            desc: "The name of the project.",
        })
            .option("project-description", {
            type: "string",
            desc: "The description of the project.",
        })
            .option("dist", {
            type: "string",
            desc: 'Install dependencies from a "dist" directory (for development)',
        })
            .option("local", {
            type: "boolean",
            desc: "Use local state storage for generated Terraform.",
            default: false,
        })
            .option("cdktf-version", {
            type: "string",
            desc: "The cdktf version to use while creating a new project.",
            default: pkg.version,
        })
            .option("from-terraform-project", {
            type: "string",
            desc: "Use a terraform project as the basis, CDK constructs will be generated based on the .tf files in the path",
        })
            .option("enable-crash-reporting", {
            type: "boolean",
            desc: "Enable crash reporting for the CLI, see https://www.terraform.io/cdktf/telemetry#crash-reporting for more details",
        })
            .strict();
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("init");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.init(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSw0REFBb0Q7QUFDcEQsa0RBQXNFO0FBQ3RFLDZDQUEwQztBQUMxQyx3REFBb0Q7QUFFcEQsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO0FBRTlCLE1BQU0sT0FBUSxTQUFRLDBCQUFXO0lBQWpDOztRQUNrQixZQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ2pCLGFBQVEsR0FBRyw2Q0FBNkMsQ0FBQztRQUN6RCxZQUFPLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FDN0MsSUFBSTthQUNELGNBQWMsQ0FBQyxJQUFJLENBQUM7YUFDcEIsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNsQixJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSw4R0FBOEcsMEJBQVM7aUJBQzFILEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQkFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1NBQ2pCLENBQUM7YUFDRCxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQ3RCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLDBCQUEwQjtTQUNqQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLHFCQUFxQixFQUFFO1lBQzdCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLGlDQUFpQztTQUN4QyxDQUFDO2FBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLGdFQUFnRTtTQUN2RSxDQUFDO2FBQ0QsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLGtEQUFrRDtZQUN4RCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7YUFDRCxNQUFNLENBQUMsZUFBZSxFQUFFO1lBQ3ZCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLHdEQUF3RDtZQUM5RCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87U0FDckIsQ0FBQzthQUNELE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtZQUNoQyxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSwyR0FBMkc7U0FDbEgsQ0FBQzthQUNELE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtZQUNoQyxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxtSEFBbUg7U0FDMUgsQ0FBQzthQUNELE1BQU0sRUFBRSxDQUFDO0lBUWhCLENBQUM7SUFOUSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQVM7UUFDbEMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4Qiw2RkFBNkY7UUFDN0YsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5cbmltcG9ydCB7IHRlbXBsYXRlcyB9IGZyb20gXCIuL2hlbHBlci9pbml0LXRlbXBsYXRlc1wiO1xuaW1wb3J0IHsgcmVhZFBhY2thZ2VKc29uLCByZXF1aXJlSGFuZGxlcnMgfSBmcm9tIFwiLi9oZWxwZXIvdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBFcnJvcnMgfSBmcm9tIFwiLi4vLi4vbGliL2Vycm9yc1wiO1xuaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi9oZWxwZXIvYmFzZS1jb21tYW5kXCI7XG5cbmNvbnN0IHBrZyA9IHJlYWRQYWNrYWdlSnNvbigpO1xuXG5jbGFzcyBDb21tYW5kIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiaW5pdFwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPSBcIkNyZWF0ZSBhIG5ldyBjZGt0ZiBwcm9qZWN0IGZyb20gYSB0ZW1wbGF0ZS5cIjtcbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcbiAgICAgIC5vcHRpb24oXCJ0ZW1wbGF0ZVwiLCB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IGBUaGUgdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBjcmVhdGUgYSBuZXcgcHJvamVjdC4gRWl0aGVyIFVSTCB0byB6aXAgZmlsZSBvciBvbmUgb2YgdGhlIGJ1aWx0LWluIHRlbXBsYXRlczogWyR7dGVtcGxhdGVzXG4gICAgICAgICAgLm1hcCgodCkgPT4gYFwiJHt0fVwiYClcbiAgICAgICAgICAuam9pbihcIiwgXCIpfV1gLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJwcm9qZWN0LW5hbWVcIiwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBkZXNjOiBcIlRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0LlwiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJwcm9qZWN0LWRlc2NyaXB0aW9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHByb2plY3QuXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImRpc3RcIiwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBkZXNjOiAnSW5zdGFsbCBkZXBlbmRlbmNpZXMgZnJvbSBhIFwiZGlzdFwiIGRpcmVjdG9yeSAoZm9yIGRldmVsb3BtZW50KScsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImxvY2FsXCIsIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgIGRlc2M6IFwiVXNlIGxvY2FsIHN0YXRlIHN0b3JhZ2UgZm9yIGdlbmVyYXRlZCBUZXJyYWZvcm0uXCIsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJjZGt0Zi12ZXJzaW9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJUaGUgY2RrdGYgdmVyc2lvbiB0byB1c2Ugd2hpbGUgY3JlYXRpbmcgYSBuZXcgcHJvamVjdC5cIixcbiAgICAgICAgZGVmYXVsdDogcGtnLnZlcnNpb24sXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImZyb20tdGVycmFmb3JtLXByb2plY3RcIiwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBkZXNjOiBcIlVzZSBhIHRlcnJhZm9ybSBwcm9qZWN0IGFzIHRoZSBiYXNpcywgQ0RLIGNvbnN0cnVjdHMgd2lsbCBiZSBnZW5lcmF0ZWQgYmFzZWQgb24gdGhlIC50ZiBmaWxlcyBpbiB0aGUgcGF0aFwiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJlbmFibGUtY3Jhc2gtcmVwb3J0aW5nXCIsIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgIGRlc2M6IFwiRW5hYmxlIGNyYXNoIHJlcG9ydGluZyBmb3IgdGhlIENMSSwgc2VlIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9jZGt0Zi90ZWxlbWV0cnkjY3Jhc2gtcmVwb3J0aW5nIGZvciBtb3JlIGRldGFpbHNcIixcbiAgICAgIH0pXG4gICAgICAuc3RyaWN0KCk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZUNvbW1hbmQoYXJndjogYW55KSB7XG4gICAgRXJyb3JzLnNldFNjb3BlKFwiaW5pdFwiKTtcbiAgICAvLyBkZWZlcnJlZCByZXF1aXJlIHRvIGtlZXAgY2RrdGYtY2xpIG1haW4gZW50cnlwb2ludCBzbWFsbCAoZS5nLiBmb3IgZmFzdCBzaGVsbCBjb21wbGV0aW9ucylcbiAgICBjb25zdCBhcGkgPSByZXF1aXJlSGFuZGxlcnMoKTtcbiAgICBhd2FpdCBhcGkuaW5pdChhcmd2KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=