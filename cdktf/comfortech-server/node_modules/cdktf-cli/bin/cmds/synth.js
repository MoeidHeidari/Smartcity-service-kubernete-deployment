"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const config = provider_generator_1.config.readConfigSync();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "synth";
        this.describe = "Synthesizes Terraform code for the given app in a directory.";
        this.aliases = ["synthesize"];
        this.builder = (args) => args
            .option("app", {
            default: config.app,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            desc: "Output directory for the synthesized Terraform config",
            alias: "o",
        })
            .option("check-code-maker-output", {
            type: "boolean",
            desc: "Should `codeMakerOutput` existence check be performed? By default it will be checked if providers or modules are configured.",
            default: provider_generator_1.config.shouldCheckCodeMakerOutput(config),
        })
            .showHelpOnFail(true);
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("synth");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.synth(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzeW50aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGtFQUEwRDtBQUMxRCxrREFBcUQ7QUFDckQsNkNBQTBDO0FBQzFDLHdEQUFvRDtBQUVwRCxNQUFNLE1BQU0sR0FBRywyQkFBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRXBDLE1BQU0sT0FBUSxTQUFRLDBCQUFXO0lBQWpDOztRQUNrQixZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGFBQVEsR0FDdEIsOERBQThELENBQUM7UUFDakQsWUFBTyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFekIsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ25CLElBQUksRUFBRSw4Q0FBOEM7WUFDcEQsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDdEIsSUFBSSxFQUFFLHVEQUF1RDtZQUM3RCxLQUFLLEVBQUUsR0FBRztTQUNYLENBQUM7YUFDRCxNQUFNLENBQUMseUJBQXlCLEVBQUU7WUFDakMsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsOEhBQThIO1lBQ3BJLE9BQU8sRUFBRSwyQkFBRyxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQztTQUNoRCxDQUFDO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBUTVCLENBQUM7SUFOUSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQVM7UUFDbEMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6Qiw2RkFBNkY7UUFDN0YsTUFBTSxHQUFHLEdBQUcsMkJBQWUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgeyBjb25maWcgYXMgY2ZnIH0gZnJvbSBcIkBjZGt0Zi9wcm92aWRlci1nZW5lcmF0b3JcIjtcbmltcG9ydCB7IHJlcXVpcmVIYW5kbGVycyB9IGZyb20gXCIuL2hlbHBlci91dGlsaXRpZXNcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi8uLi9saWIvZXJyb3JzXCI7XG5pbXBvcnQgeyBCYXNlQ29tbWFuZCB9IGZyb20gXCIuL2hlbHBlci9iYXNlLWNvbW1hbmRcIjtcblxuY29uc3QgY29uZmlnID0gY2ZnLnJlYWRDb25maWdTeW5jKCk7XG5cbmNsYXNzIENvbW1hbmQgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XG4gIHB1YmxpYyByZWFkb25seSBjb21tYW5kID0gXCJzeW50aFwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPVxuICAgIFwiU3ludGhlc2l6ZXMgVGVycmFmb3JtIGNvZGUgZm9yIHRoZSBnaXZlbiBhcHAgaW4gYSBkaXJlY3RvcnkuXCI7XG4gIHB1YmxpYyByZWFkb25seSBhbGlhc2VzID0gW1wic3ludGhlc2l6ZVwiXTtcblxuICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRlciA9IChhcmdzOiB5YXJncy5Bcmd2KSA9PlxuICAgIGFyZ3NcbiAgICAgIC5vcHRpb24oXCJhcHBcIiwge1xuICAgICAgICBkZWZhdWx0OiBjb25maWcuYXBwLFxuICAgICAgICBkZXNjOiBcIkNvbW1hbmQgdG8gdXNlIGluIG9yZGVyIHRvIGV4ZWN1dGUgY2RrdGYgYXBwXCIsXG4gICAgICAgIGFsaWFzOiBcImFcIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwib3V0cHV0XCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLm91dHB1dCxcbiAgICAgICAgZGVzYzogXCJPdXRwdXQgZGlyZWN0b3J5IGZvciB0aGUgc3ludGhlc2l6ZWQgVGVycmFmb3JtIGNvbmZpZ1wiLFxuICAgICAgICBhbGlhczogXCJvXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcImNoZWNrLWNvZGUtbWFrZXItb3V0cHV0XCIsIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgIGRlc2M6IFwiU2hvdWxkIGBjb2RlTWFrZXJPdXRwdXRgIGV4aXN0ZW5jZSBjaGVjayBiZSBwZXJmb3JtZWQ/IEJ5IGRlZmF1bHQgaXQgd2lsbCBiZSBjaGVja2VkIGlmIHByb3ZpZGVycyBvciBtb2R1bGVzIGFyZSBjb25maWd1cmVkLlwiLFxuICAgICAgICBkZWZhdWx0OiBjZmcuc2hvdWxkQ2hlY2tDb2RlTWFrZXJPdXRwdXQoY29uZmlnKSxcbiAgICAgIH0pXG4gICAgICAuc2hvd0hlbHBPbkZhaWwodHJ1ZSk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZUNvbW1hbmQoYXJndjogYW55KSB7XG4gICAgRXJyb3JzLnNldFNjb3BlKFwic3ludGhcIik7XG4gICAgLy8gZGVmZXJyZWQgcmVxdWlyZSB0byBrZWVwIGNka3RmLWNsaSBtYWluIGVudHJ5cG9pbnQgc21hbGwgKGUuZy4gZm9yIGZhc3Qgc2hlbGwgY29tcGxldGlvbnMpXG4gICAgY29uc3QgYXBpID0gcmVxdWlyZUhhbmRsZXJzKCk7XG4gICAgYXdhaXQgYXBpLnN5bnRoKGFyZ3YpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==