"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const utilities_1 = require("./helper/utilities");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
function readCdktfJson(cwd = process.cwd()) {
    try {
        const cdktfJsonPath = path.join(cwd, "cdktf.json");
        return fs.readJsonSync(cdktfJsonPath);
    }
    catch (e) {
        return undefined;
    }
}
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "convert";
        this.describe = "Converts a single file of HCL configuration to CDK for Terraform. Takes the file to be converted on stdin.";
        this.builder = (args) => {
            var _a;
            return args
                .example("cat main.tf | cdktf convert  --provider integrations/github", "Takes the HCL content of main.tf and converts it to CDK for Terraform content and prints it")
                .example("cat main.tf | cdktf convert --provider hashicorp/aws > imported.ts", "Takes the HCL content of main.tf and converts it to CDK for Terraform content in imported.ts")
                .example("cat main.tf | cdktf convert --provider 'hashicorp/aws@ ~>3.62.0' 'integrations/github@ ~>4.16.0' --language python > imported.py", "Takes the HCL content of main.tf and converts it to CDK for Terraform content in imported.ts")
                .option("language", {
                choices: ["typescript", "python", "csharp", "java"],
                default: ((_a = readCdktfJson()) === null || _a === void 0 ? void 0 : _a.language) || "typescript",
            })
                .option("provider", {
                describe: "The conversion needs to know which providers are used in addition to the ones in your cdktf.json file. We search for a cdktf.json below your current working directory.",
                type: "array",
                default: [],
            })
                .showHelpOnFail(true);
        };
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("convert");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.convert(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnZlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsNkNBQTBDO0FBQzFDLHdEQUFvRDtBQUNwRCxrREFBcUQ7QUFDckQsMkNBQTZCO0FBQzdCLDZDQUErQjtBQUUvQixTQUFTLGFBQWEsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUN4QyxJQUFJO1FBQ0YsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkQsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3ZDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLFNBQVMsQ0FBQztLQUNsQjtBQUNILENBQUM7QUFFRCxNQUFNLE9BQVEsU0FBUSwwQkFBVztJQUFqQzs7UUFDa0IsWUFBTyxHQUFHLFNBQVMsQ0FBQztRQUNwQixhQUFRLEdBQ3RCLDRHQUE0RyxDQUFDO1FBRS9GLFlBQU8sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRTs7WUFDN0MsT0FBQSxJQUFJO2lCQUNELE9BQU8sQ0FDTiw2REFBNkQsRUFDN0QsNkZBQTZGLENBQzlGO2lCQUNBLE9BQU8sQ0FDTixvRUFBb0UsRUFDcEUsOEZBQThGLENBQy9GO2lCQUNBLE9BQU8sQ0FDTixrSUFBa0ksRUFDbEksOEZBQThGLENBQy9GO2lCQUNBLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQztnQkFDbkQsT0FBTyxFQUFFLE9BQUEsYUFBYSxFQUFFLDBDQUFFLFFBQVEsS0FBSSxZQUFZO2FBQ25ELENBQUM7aUJBQ0QsTUFBTSxDQUFDLFVBQVUsRUFBRTtnQkFDbEIsUUFBUSxFQUNOLHlLQUF5SztnQkFDM0ssSUFBSSxFQUFFLE9BQU87Z0JBQ2IsT0FBTyxFQUFFLEVBQUU7YUFDWixDQUFDO2lCQUNELGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUFBLENBQUM7SUFRNUIsQ0FBQztJQU5RLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBUztRQUNsQyxlQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNCLDZGQUE2RjtRQUM3RixNQUFNLEdBQUcsR0FBRywyQkFBZSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YXJncyBmcm9tIFwieWFyZ3NcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi8uLi9saWIvZXJyb3JzXCI7XG5pbXBvcnQgeyBCYXNlQ29tbWFuZCB9IGZyb20gXCIuL2hlbHBlci9iYXNlLWNvbW1hbmRcIjtcbmltcG9ydCB7IHJlcXVpcmVIYW5kbGVycyB9IGZyb20gXCIuL2hlbHBlci91dGlsaXRpZXNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuXG5mdW5jdGlvbiByZWFkQ2RrdGZKc29uKGN3ZCA9IHByb2Nlc3MuY3dkKCkpOiB7IGxhbmd1YWdlOiBzdHJpbmcgfSB8IHVuZGVmaW5lZCB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2RrdGZKc29uUGF0aCA9IHBhdGguam9pbihjd2QsIFwiY2RrdGYuanNvblwiKTtcbiAgICByZXR1cm4gZnMucmVhZEpzb25TeW5jKGNka3RmSnNvblBhdGgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5jbGFzcyBDb21tYW5kIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiY29udmVydFwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPVxuICAgIFwiQ29udmVydHMgYSBzaW5nbGUgZmlsZSBvZiBIQ0wgY29uZmlndXJhdGlvbiB0byBDREsgZm9yIFRlcnJhZm9ybS4gVGFrZXMgdGhlIGZpbGUgdG8gYmUgY29udmVydGVkIG9uIHN0ZGluLlwiO1xuXG4gIHB1YmxpYyByZWFkb25seSBidWlsZGVyID0gKGFyZ3M6IHlhcmdzLkFyZ3YpID0+XG4gICAgYXJnc1xuICAgICAgLmV4YW1wbGUoXG4gICAgICAgIFwiY2F0IG1haW4udGYgfCBjZGt0ZiBjb252ZXJ0ICAtLXByb3ZpZGVyIGludGVncmF0aW9ucy9naXRodWJcIixcbiAgICAgICAgXCJUYWtlcyB0aGUgSENMIGNvbnRlbnQgb2YgbWFpbi50ZiBhbmQgY29udmVydHMgaXQgdG8gQ0RLIGZvciBUZXJyYWZvcm0gY29udGVudCBhbmQgcHJpbnRzIGl0XCJcbiAgICAgIClcbiAgICAgIC5leGFtcGxlKFxuICAgICAgICBcImNhdCBtYWluLnRmIHwgY2RrdGYgY29udmVydCAtLXByb3ZpZGVyIGhhc2hpY29ycC9hd3MgPiBpbXBvcnRlZC50c1wiLFxuICAgICAgICBcIlRha2VzIHRoZSBIQ0wgY29udGVudCBvZiBtYWluLnRmIGFuZCBjb252ZXJ0cyBpdCB0byBDREsgZm9yIFRlcnJhZm9ybSBjb250ZW50IGluIGltcG9ydGVkLnRzXCJcbiAgICAgIClcbiAgICAgIC5leGFtcGxlKFxuICAgICAgICBcImNhdCBtYWluLnRmIHwgY2RrdGYgY29udmVydCAtLXByb3ZpZGVyICdoYXNoaWNvcnAvYXdzQCB+PjMuNjIuMCcgJ2ludGVncmF0aW9ucy9naXRodWJAIH4+NC4xNi4wJyAtLWxhbmd1YWdlIHB5dGhvbiA+IGltcG9ydGVkLnB5XCIsXG4gICAgICAgIFwiVGFrZXMgdGhlIEhDTCBjb250ZW50IG9mIG1haW4udGYgYW5kIGNvbnZlcnRzIGl0IHRvIENESyBmb3IgVGVycmFmb3JtIGNvbnRlbnQgaW4gaW1wb3J0ZWQudHNcIlxuICAgICAgKVxuICAgICAgLm9wdGlvbihcImxhbmd1YWdlXCIsIHtcbiAgICAgICAgY2hvaWNlczogW1widHlwZXNjcmlwdFwiLCBcInB5dGhvblwiLCBcImNzaGFycFwiLCBcImphdmFcIl0sXG4gICAgICAgIGRlZmF1bHQ6IHJlYWRDZGt0Zkpzb24oKT8ubGFuZ3VhZ2UgfHwgXCJ0eXBlc2NyaXB0XCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcInByb3ZpZGVyXCIsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgXCJUaGUgY29udmVyc2lvbiBuZWVkcyB0byBrbm93IHdoaWNoIHByb3ZpZGVycyBhcmUgdXNlZCBpbiBhZGRpdGlvbiB0byB0aGUgb25lcyBpbiB5b3VyIGNka3RmLmpzb24gZmlsZS4gV2Ugc2VhcmNoIGZvciBhIGNka3RmLmpzb24gYmVsb3cgeW91ciBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LlwiLFxuICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgfSlcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlQ29tbWFuZChhcmd2OiBhbnkpIHtcbiAgICBFcnJvcnMuc2V0U2NvcGUoXCJjb252ZXJ0XCIpO1xuICAgIC8vIGRlZmVycmVkIHJlcXVpcmUgdG8ga2VlcCBjZGt0Zi1jbGkgbWFpbiBlbnRyeXBvaW50IHNtYWxsIChlLmcuIGZvciBmYXN0IHNoZWxsIGNvbXBsZXRpb25zKVxuICAgIGNvbnN0IGFwaSA9IHJlcXVpcmVIYW5kbGVycygpO1xuICAgIGF3YWl0IGFwaS5jb252ZXJ0KGFyZ3YpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==