"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const config = provider_generator_1.config.readConfigSync();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "list";
        this.describe = "List stacks in app.";
        this.builder = (args) => args
            .option("app", {
            default: config.app,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            desc: "Output directory for the synthesized Terraform config",
            alias: "o",
        })
            .showHelpOnFail(true);
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("list");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.list(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxrRUFBMEQ7QUFDMUQsa0RBQXFEO0FBQ3JELDZDQUEwQztBQUMxQyx3REFBb0Q7QUFFcEQsTUFBTSxNQUFNLEdBQUcsMkJBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUVwQyxNQUFNLE9BQVEsU0FBUSwwQkFBVztJQUFqQzs7UUFDa0IsWUFBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixhQUFRLEdBQUcscUJBQXFCLENBQUM7UUFFakMsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ25CLElBQUksRUFBRSw4Q0FBOEM7WUFDcEQsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDdEIsSUFBSSxFQUFFLHVEQUF1RDtZQUM3RCxLQUFLLEVBQUUsR0FBRztTQUNYLENBQUM7YUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFRNUIsQ0FBQztJQU5RLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBUztRQUNsQyxlQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLDZGQUE2RjtRQUM3RixNQUFNLEdBQUcsR0FBRywyQkFBZSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YXJncyBmcm9tIFwieWFyZ3NcIjtcbmltcG9ydCB7IGNvbmZpZyBhcyBjZmcgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgcmVxdWlyZUhhbmRsZXJzIH0gZnJvbSBcIi4vaGVscGVyL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4uLy4uL2xpYi9lcnJvcnNcIjtcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vaGVscGVyL2Jhc2UtY29tbWFuZFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBleHRlbmRzIEJhc2VDb21tYW5kIHtcbiAgcHVibGljIHJlYWRvbmx5IGNvbW1hbmQgPSBcImxpc3RcIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID0gXCJMaXN0IHN0YWNrcyBpbiBhcHAuXCI7XG5cbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAub3B0aW9uKFwiYXBwXCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLmFwcCxcbiAgICAgICAgZGVzYzogXCJDb21tYW5kIHRvIHVzZSBpbiBvcmRlciB0byBleGVjdXRlIGNka3RmIGFwcFwiLFxuICAgICAgICBhbGlhczogXCJhXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcIm91dHB1dFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5vdXRwdXQsXG4gICAgICAgIGRlc2M6IFwiT3V0cHV0IGRpcmVjdG9yeSBmb3IgdGhlIHN5bnRoZXNpemVkIFRlcnJhZm9ybSBjb25maWdcIixcbiAgICAgICAgYWxpYXM6IFwib1wiLFxuICAgICAgfSlcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlQ29tbWFuZChhcmd2OiBhbnkpIHtcbiAgICBFcnJvcnMuc2V0U2NvcGUoXCJsaXN0XCIpO1xuICAgIC8vIGRlZmVycmVkIHJlcXVpcmUgdG8ga2VlcCBjZGt0Zi1jbGkgbWFpbiBlbnRyeXBvaW50IHNtYWxsIChlLmcuIGZvciBmYXN0IHNoZWxsIGNvbXBsZXRpb25zKVxuICAgIGNvbnN0IGFwaSA9IHJlcXVpcmVIYW5kbGVycygpO1xuICAgIGF3YWl0IGFwaS5saXN0KGFyZ3YpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==