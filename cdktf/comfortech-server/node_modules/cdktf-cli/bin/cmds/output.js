"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("./helper/utilities");
const errors_1 = require("../../lib/errors");
const base_command_1 = require("./helper/base-command");
const config = provider_generator_1.config.readConfigSync();
class Command extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.command = "output [stacks..]";
        this.describe = "Prints the output of stacks";
        this.aliases = ["outputs"];
        this.builder = (args) => args
            .positional("stacks", {
            desc: "Get outputs of the stacks matching the given ids. Required when more than one stack is present in the app",
            type: "string",
        })
            .option("app", {
            default: config.app,
            required: true,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            required: true,
            desc: "Output directory for the synthesized Terraform config",
            alias: "o",
        })
            .option("outputs-file", {
            type: "string",
            required: false,
            desc: "Path to file where stack outputs will be written as JSON",
            requiresArg: true,
        })
            .option("outputs-file-include-sensitive-outputs", {
            type: "boolean",
            required: false,
            desc: "Whether to include sensitive outputs in the output file",
            default: false,
        })
            .showHelpOnFail(true);
    }
    async handleCommand(argv) {
        errors_1.Errors.setScope("output");
        // deferred require to keep cdktf-cli main entrypoint small (e.g. for fast shell completions)
        const api = utilities_1.requireHandlers();
        await api.output(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib3V0cHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0VBQTBEO0FBQzFELGtEQUFxRDtBQUNyRCw2Q0FBMEM7QUFDMUMsd0RBQW9EO0FBRXBELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFRLFNBQVEsMEJBQVc7SUFBakM7O1FBQ2tCLFlBQU8sR0FBRyxtQkFBbUIsQ0FBQztRQUM5QixhQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDekMsWUFBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEIsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQ3BCLElBQUksRUFBRSwyR0FBMkc7WUFDakgsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO2FBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSTtZQUNkLElBQUksRUFBRSw4Q0FBOEM7WUFDcEQsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDdEIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsdURBQXVEO1lBQzdELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQzthQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSwwREFBMEQ7WUFDaEUsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQzthQUNELE1BQU0sQ0FBQyx3Q0FBd0MsRUFBRTtZQUNoRCxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxLQUFLO1lBQ2YsSUFBSSxFQUFFLHlEQUF5RDtZQUMvRCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7YUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFRNUIsQ0FBQztJQU5RLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBUztRQUNsQyxlQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLDZGQUE2RjtRQUM3RixNQUFNLEdBQUcsR0FBRywyQkFBZSxFQUFFLENBQUM7UUFDOUIsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHlhcmdzIGZyb20gXCJ5YXJnc1wiO1xuaW1wb3J0IHsgY29uZmlnIGFzIGNmZyB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyByZXF1aXJlSGFuZGxlcnMgfSBmcm9tIFwiLi9oZWxwZXIvdXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBFcnJvcnMgfSBmcm9tIFwiLi4vLi4vbGliL2Vycm9yc1wiO1xuaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi9oZWxwZXIvYmFzZS1jb21tYW5kXCI7XG5cbmNvbnN0IGNvbmZpZyA9IGNmZy5yZWFkQ29uZmlnU3luYygpO1xuXG5jbGFzcyBDb21tYW5kIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwib3V0cHV0IFtzdGFja3MuLl1cIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID0gXCJQcmludHMgdGhlIG91dHB1dCBvZiBzdGFja3NcIjtcbiAgcHVibGljIHJlYWRvbmx5IGFsaWFzZXMgPSBbXCJvdXRwdXRzXCJdO1xuXG4gIHB1YmxpYyByZWFkb25seSBidWlsZGVyID0gKGFyZ3M6IHlhcmdzLkFyZ3YpID0+XG4gICAgYXJnc1xuICAgICAgLnBvc2l0aW9uYWwoXCJzdGFja3NcIiwge1xuICAgICAgICBkZXNjOiBcIkdldCBvdXRwdXRzIG9mIHRoZSBzdGFja3MgbWF0Y2hpbmcgdGhlIGdpdmVuIGlkcy4gUmVxdWlyZWQgd2hlbiBtb3JlIHRoYW4gb25lIHN0YWNrIGlzIHByZXNlbnQgaW4gdGhlIGFwcFwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJhcHBcIiwge1xuICAgICAgICBkZWZhdWx0OiBjb25maWcuYXBwLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgZGVzYzogXCJDb21tYW5kIHRvIHVzZSBpbiBvcmRlciB0byBleGVjdXRlIGNka3RmIGFwcFwiLFxuICAgICAgICBhbGlhczogXCJhXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcIm91dHB1dFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5vdXRwdXQsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBkZXNjOiBcIk91dHB1dCBkaXJlY3RvcnkgZm9yIHRoZSBzeW50aGVzaXplZCBUZXJyYWZvcm0gY29uZmlnXCIsXG4gICAgICAgIGFsaWFzOiBcIm9cIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwib3V0cHV0cy1maWxlXCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBkZXNjOiBcIlBhdGggdG8gZmlsZSB3aGVyZSBzdGFjayBvdXRwdXRzIHdpbGwgYmUgd3JpdHRlbiBhcyBKU09OXCIsXG4gICAgICAgIHJlcXVpcmVzQXJnOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJvdXRwdXRzLWZpbGUtaW5jbHVkZS1zZW5zaXRpdmUtb3V0cHV0c1wiLCB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIGRlc2M6IFwiV2hldGhlciB0byBpbmNsdWRlIHNlbnNpdGl2ZSBvdXRwdXRzIGluIHRoZSBvdXRwdXQgZmlsZVwiLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAuc2hvd0hlbHBPbkZhaWwodHJ1ZSk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZUNvbW1hbmQoYXJndjogYW55KSB7XG4gICAgRXJyb3JzLnNldFNjb3BlKFwib3V0cHV0XCIpO1xuICAgIC8vIGRlZmVycmVkIHJlcXVpcmUgdG8ga2VlcCBjZGt0Zi1jbGkgbWFpbiBlbnRyeXBvaW50IHNtYWxsIChlLmcuIGZvciBmYXN0IHNoZWxsIGNvbXBsZXRpb25zKVxuICAgIGNvbnN0IGFwaSA9IHJlcXVpcmVIYW5kbGVycygpO1xuICAgIGF3YWl0IGFwaS5vdXRwdXQoYXJndik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQ29tbWFuZCgpO1xuIl19