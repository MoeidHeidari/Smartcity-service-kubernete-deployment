"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
const path_1 = __importDefault(require("path"));
const cdktf_project_1 = require("./cdktf-project");
const errors_1 = require("./errors");
const fs = __importStar(require("fs"));
const chokidar = __importStar(require("chokidar"));
const logging_1 = require("./logging");
// In this very first iteration we will find out which files to watch by asking the user to provide the files
// We default to something reasonable per language and write it into the cdkt.json file
// Mid-Term we might want to add a WatchFile / WatchDir construct that we can use (e.g. in assets) and that a user can use to specify their watch behaviour
// See https://github.com/hashicorp/terraform-cdk/issues/1668
function getOrWriteDefaultWatchConfig(projectPath = process.cwd()) {
    const cdktfJsonPath = path_1.default.resolve(projectPath, "cdktf.json");
    logging_1.logger.debug(`Getting files to watch from cdktf.json at ${cdktfJsonPath}`);
    let cdktfJson;
    try {
        cdktfJson = require(cdktfJsonPath);
    }
    catch (err) {
        throw errors_1.Errors.Internal(`Could not find cdktf.json file in ${projectPath}`);
    }
    if (cdktfJson.watchPattern) {
        logging_1.logger.debug(`Found watchPattern in cdktf.json: ${cdktfJson.watchPattern}`);
        return cdktfJson.watchPattern;
    }
    const language = cdktfJson.language;
    if (!language) {
        throw errors_1.Errors.Usage(`No language specified in cdktf.json, please either specify a language or watchPattern to use the watch command`);
    }
    const defaultWatchPattern = {
        typescript: ["./**/*.ts"],
        python: ["./**/*.py"],
        java: ["src/**/*.java"],
        csharp: ["./**/*.cs"],
        go: ["./**/*.go"],
    }[language];
    fs.writeFileSync(cdktfJsonPath, JSON.stringify({ ...cdktfJson, watchPattern: defaultWatchPattern }, null, 2));
    logging_1.logger.debug(`Write default watchPattern for ${language} in cdktf.json.`);
    return defaultWatchPattern;
}
const projectStatus = (project) => {
    if (!(project === null || project === void 0 ? void 0 : project.stacksToRun.length)) {
        return {
            inProgress: [],
            finished: [],
            pending: [],
        };
    }
    const inProgress = project.stacksToRun.filter((s) => s.isRunning);
    const finished = project.stacksToRun.filter((s) => s.isDone);
    const pending = project.stacksToRun.filter((s) => s.isPending);
    return { inProgress, finished, pending };
};
async function watch(projectOptions, executionOptions, abortSignal, onStateChange) {
    const patterns = getOrWriteDefaultWatchConfig();
    const watcher = chokidar.watch(patterns, {
        ignoreInitial: true,
    });
    let state = { type: "waiting" };
    const changeState = (newState) => {
        state = newState;
        onStateChange(state);
    };
    async function run() {
        logging_1.logger.debug("Running cdktf deploy");
        const project = new cdktf_project_1.CdktfProject({
            ...projectOptions,
            onLog: (log) => {
                if (projectOptions.onLog) {
                    projectOptions.onLog(log);
                }
                if (state.type === "running") {
                    changeState({ ...state, ...projectStatus(project) });
                }
            },
        });
        const abort = () => project.hardAbort();
        abortSignal.addEventListener("abort", abort);
        await project.deploy(executionOptions);
        abortSignal.removeEventListener("abort", abort);
        logging_1.logger.debug("cdktf deploy finished");
        if (state.type !== "running") {
            throw errors_1.Errors.Internal("Watch was in a state where the state was not running in the run phase");
        }
        if (state.nextRunQueued) {
            logging_1.logger.debug("Next run was queued, starting it now");
            changeState({
                ...state,
                nextRunQueued: false,
                currentRun: run(),
                ...projectStatus(project),
            });
        }
        else {
            logging_1.logger.debug("Nothing queued, waiting for changes");
            changeState({ type: "waiting" });
        }
    }
    abortSignal.addEventListener("abort", () => {
        logging_1.logger.debug("Abort signal received, stopping watch");
        watcher.close();
        changeState({ type: "stopped" });
    });
    const onFileChange = () => {
        if (state.type === "stopped") {
            return;
        }
        if (state.type === "running") {
            changeState({ ...state, nextRunQueued: true });
            return;
        }
        changeState({
            type: "running",
            nextRunQueued: false,
            currentRun: run(),
            ...projectStatus(),
        });
    };
    watcher.on("all", onFileChange);
    // initially run once
    onFileChange();
}
exports.watch = watch;
//# sourceMappingURL=data:application/json;base64,