"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfStack = void 0;
const output_1 = require("./output");
const logging_1 = require("./logging");
const terraform_logs_1 = require("./server/terraform-logs");
const terraform_cloud_1 = require("./models/terraform-cloud");
const terraform_cli_1 = require("./models/terraform-cli");
async function getTerraformClient(abortSignal, stack, isSpeculative, createTerraformLogHandler) {
    var _a, _b;
    const parsedStack = JSON.parse(stack.content);
    if ((_b = (_a = parsedStack.terraform) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.remote) {
        const tfClient = new terraform_cloud_1.TerraformCloud(abortSignal, stack, parsedStack.terraform.backend.remote, isSpeculative, createTerraformLogHandler);
        if (await tfClient.isRemoteWorkspace()) {
            return tfClient;
        }
    }
    return new terraform_cli_1.TerraformCli(abortSignal, stack, createTerraformLogHandler);
}
class CdktfStack {
    constructor(options) {
        this.options = options;
        this.stopped = false;
        this.currentState = "idle";
        this.stack = options.stack;
    }
    get isPending() {
        return this.currentState === "idle" && !this.stopped;
    }
    get isDone() {
        return (this.currentState === "done" ||
            this.currentState === "error" ||
            this.stopped);
    }
    get isRunning() {
        return !this.isPending && !this.isDone;
    }
    updateState(update) {
        logging_1.logger.debug(`[${this.stack.name}]: ${update.type}`);
        this.currentState = update.type;
        switch (update.type) {
            case "idle":
            case "done":
            case "error":
                break;
            case "outputs fetched":
            case "deployed":
                logging_1.logger.debug(`Outputs: ${JSON.stringify(update.outputs)}`);
                logging_1.logger.debug(`OutputsByConstructId: ${JSON.stringify(update.outputsByConstructId)}`);
                this.outputs = update.outputs;
                this.outputsByConstructId = update.outputsByConstructId;
                this.options.onUpdate(update);
                break;
            default:
                this.options.onUpdate(update);
                break;
        }
    }
    createTerraformLogHandler(phase) {
        const onLog = this.options.onLog;
        return (msg, isError = false) => {
            const message = terraform_logs_1.extractJsonLogIfPresent(msg);
            logging_1.logger.debug(`[${this.options.stack.name}](${phase}): ${msg}`);
            if (onLog) {
                onLog({ message, isError });
            }
        };
    }
    waitForApproval(plan) {
        return new Promise((resolve) => {
            this.updateState({
                type: "waiting for stack approval",
                stackName: this.stack.name,
                plan: plan,
                approve: () => {
                    resolve(true);
                },
                reject: () => {
                    resolve(false);
                },
            });
        });
    }
    async initalizeTerraform({ isSpeculative, }) {
        const terraform = await getTerraformClient(this.options.abortSignal, this.options.stack, isSpeculative, this.createTerraformLogHandler.bind(this));
        await terraform.init();
        return terraform;
    }
    async run(cb) {
        if (this.stopped) {
            return;
        }
        try {
            this.currentWorkPromise = cb();
            await this.currentWorkPromise;
            this.updateState({ type: "done" });
        }
        catch (e) {
            this.currentWorkPromise = undefined;
            this.updateState({
                type: "errored",
                stackName: this.stack.name,
                error: String(e),
            });
        }
        this.currentWorkPromise = undefined;
    }
    async diff({ refreshOnly }) {
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.initalizeTerraform({ isSpeculative: false });
            const plan = await terraform.plan(false, refreshOnly);
            this.currentPlan = plan;
            this.updateState({ type: "planned", stackName: this.stack.name, plan });
        });
    }
    async deploy(refreshOnly) {
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.initalizeTerraform({ isSpeculative: false });
            const plan = await terraform.plan(false, refreshOnly);
            this.updateState({ type: "planned", stackName: this.stack.name, plan });
            const approved = this.options.autoApprove
                ? true
                : await this.waitForApproval(plan);
            if (!approved) {
                this.updateState({ type: "dismissed", stackName: this.stack.name });
                return;
            }
            this.updateState({ type: "deploying", stackName: this.stack.name });
            if (plan.needsApply) {
                await terraform.deploy(plan.planFile, refreshOnly);
            }
            const outputs = await terraform.output();
            const outputsByConstructId = output_1.getConstructIdsForOutputs(JSON.parse(this.stack.content), outputs);
            this.updateState({
                type: "deployed",
                stackName: this.stack.name,
                outputs,
                outputsByConstructId,
            });
        });
    }
    async destroy() {
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.initalizeTerraform({ isSpeculative: false });
            const plan = await terraform.plan(true);
            this.updateState({ type: "planned", stackName: this.stack.name, plan });
            const approved = this.options.autoApprove
                ? true
                : await this.waitForApproval(plan);
            if (!approved) {
                this.updateState({ type: "dismissed", stackName: this.stack.name });
                return;
            }
            this.updateState({ type: "destroying", stackName: this.stack.name });
            await terraform.destroy();
            this.updateState({
                type: "destroyed",
                stackName: this.stack.name,
            });
        });
    }
    async fetchOutputs() {
        await this.run(async () => {
            const terraform = await this.initalizeTerraform({ isSpeculative: false });
            const outputs = await terraform.output();
            const outputsByConstructId = output_1.getConstructIdsForOutputs(JSON.parse(this.stack.content), outputs);
            this.updateState({
                type: "outputs fetched",
                stackName: this.stack.name,
                outputs,
                outputsByConstructId,
            });
        });
        return this.outputs;
    }
    async stop() {
        this.stopped = true;
    }
}
exports.CdktfStack = CdktfStack;
//# sourceMappingURL=data:application/json;base64,