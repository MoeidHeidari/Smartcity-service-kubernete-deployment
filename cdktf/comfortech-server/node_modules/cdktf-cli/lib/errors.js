"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Errors = exports.IsErrorType = void 0;
const checkpoint_1 = require("./checkpoint");
const version_1 = require("./version");
const Sentry = __importStar(require("@sentry/node"));
// Errors that will emit telemetry events
async function report(command, payload) {
    const reportParams = {
        command,
        product: "cdktf",
        version: `${version_1.DISPLAY_VERSION}`,
        dateTime: new Date(),
        payload,
    };
    await checkpoint_1.ReportRequest(reportParams);
}
function IsErrorType(error, type) {
    return error && error.__type === type;
}
exports.IsErrorType = IsErrorType;
function reportPrefixedError(type, command) {
    return (message, context) => {
        report(command, { ...context, message, type });
        const err = new Error(`${type} Error: ${message}`);
        Object.entries(context || {}).forEach(([key, value]) => {
            err[key] = value;
        });
        err.__type = type;
        return err;
    };
}
// The CLI only deals with one command at a time, so we can just use the same
// scope for all errors and set it once during initialization.
let errorScope = "unknown";
exports.Errors = {
    // Error within our control
    Internal: reportPrefixedError("Internal", errorScope),
    // Error in the usage
    Usage: reportPrefixedError("Usage", errorScope),
    // Error outside of our control (e.g. terraform failed)
    External: reportPrefixedError("External", errorScope),
    // Set the scope for all errors
    setScope(scope) {
        errorScope = scope;
        Sentry.configureScope((s) => s.setTransactionName(scope));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBMkQ7QUFDM0QsdUNBQTRDO0FBQzVDLHFEQUF1QztBQUV2Qyx5Q0FBeUM7QUFDekMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxPQUFlLEVBQUUsT0FBNEI7SUFDakUsTUFBTSxZQUFZLEdBQWlCO1FBQ2pDLE9BQU87UUFDUCxPQUFPLEVBQUUsT0FBTztRQUNoQixPQUFPLEVBQUUsR0FBRyx5QkFBZSxFQUFFO1FBQzdCLFFBQVEsRUFBRSxJQUFJLElBQUksRUFBRTtRQUNwQixPQUFPO0tBQ1IsQ0FBQztJQUVGLE1BQU0sMEJBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBR0QsU0FBZ0IsV0FBVyxDQUFDLEtBQVUsRUFBRSxJQUFlO0lBQ3JELE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDO0FBQ3hDLENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQVMsbUJBQW1CLENBQUMsSUFBZSxFQUFFLE9BQWU7SUFDM0QsT0FBTyxDQUFDLE9BQWUsRUFBRSxPQUE2QixFQUFFLEVBQUU7UUFDeEQsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sR0FBRyxHQUFRLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxXQUFXLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNyRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsNkVBQTZFO0FBQzdFLDhEQUE4RDtBQUM5RCxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDZCxRQUFBLE1BQU0sR0FBRztJQUNwQiwyQkFBMkI7SUFDM0IsUUFBUSxFQUFFLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7SUFDckQscUJBQXFCO0lBQ3JCLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDO0lBQy9DLHVEQUF1RDtJQUN2RCxRQUFRLEVBQUUsbUJBQW1CLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztJQUVyRCwrQkFBK0I7SUFDL0IsUUFBUSxDQUFDLEtBQWE7UUFDcEIsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcG9ydFBhcmFtcywgUmVwb3J0UmVxdWVzdCB9IGZyb20gXCIuL2NoZWNrcG9pbnRcIjtcbmltcG9ydCB7IERJU1BMQVlfVkVSU0lPTiB9IGZyb20gXCIuL3ZlcnNpb25cIjtcbmltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS9ub2RlXCI7XG5cbi8vIEVycm9ycyB0aGF0IHdpbGwgZW1pdCB0ZWxlbWV0cnkgZXZlbnRzXG5hc3luYyBmdW5jdGlvbiByZXBvcnQoY29tbWFuZDogc3RyaW5nLCBwYXlsb2FkOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSB7XG4gIGNvbnN0IHJlcG9ydFBhcmFtczogUmVwb3J0UGFyYW1zID0ge1xuICAgIGNvbW1hbmQsXG4gICAgcHJvZHVjdDogXCJjZGt0ZlwiLFxuICAgIHZlcnNpb246IGAke0RJU1BMQVlfVkVSU0lPTn1gLFxuICAgIGRhdGVUaW1lOiBuZXcgRGF0ZSgpLFxuICAgIHBheWxvYWQsXG4gIH07XG5cbiAgYXdhaXQgUmVwb3J0UmVxdWVzdChyZXBvcnRQYXJhbXMpO1xufVxuXG50eXBlIEVycm9yVHlwZSA9IFwiSW50ZXJuYWxcIiB8IFwiRXh0ZXJuYWxcIiB8IFwiVXNhZ2VcIjtcbmV4cG9ydCBmdW5jdGlvbiBJc0Vycm9yVHlwZShlcnJvcjogYW55LCB0eXBlOiBFcnJvclR5cGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIGVycm9yICYmIGVycm9yLl9fdHlwZSA9PT0gdHlwZTtcbn1cblxuZnVuY3Rpb24gcmVwb3J0UHJlZml4ZWRFcnJvcih0eXBlOiBFcnJvclR5cGUsIGNvbW1hbmQ6IHN0cmluZykge1xuICByZXR1cm4gKG1lc3NhZ2U6IHN0cmluZywgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHtcbiAgICByZXBvcnQoY29tbWFuZCwgeyAuLi5jb250ZXh0LCBtZXNzYWdlLCB0eXBlIH0pO1xuICAgIGNvbnN0IGVycjogYW55ID0gbmV3IEVycm9yKGAke3R5cGV9IEVycm9yOiAke21lc3NhZ2V9YCk7XG4gICAgT2JqZWN0LmVudHJpZXMoY29udGV4dCB8fCB7fSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBlcnJba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGVyci5fX3R5cGUgPSB0eXBlO1xuICAgIHJldHVybiBlcnI7XG4gIH07XG59XG5cbi8vIFRoZSBDTEkgb25seSBkZWFscyB3aXRoIG9uZSBjb21tYW5kIGF0IGEgdGltZSwgc28gd2UgY2FuIGp1c3QgdXNlIHRoZSBzYW1lXG4vLyBzY29wZSBmb3IgYWxsIGVycm9ycyBhbmQgc2V0IGl0IG9uY2UgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxubGV0IGVycm9yU2NvcGUgPSBcInVua25vd25cIjtcbmV4cG9ydCBjb25zdCBFcnJvcnMgPSB7XG4gIC8vIEVycm9yIHdpdGhpbiBvdXIgY29udHJvbFxuICBJbnRlcm5hbDogcmVwb3J0UHJlZml4ZWRFcnJvcihcIkludGVybmFsXCIsIGVycm9yU2NvcGUpLFxuICAvLyBFcnJvciBpbiB0aGUgdXNhZ2VcbiAgVXNhZ2U6IHJlcG9ydFByZWZpeGVkRXJyb3IoXCJVc2FnZVwiLCBlcnJvclNjb3BlKSxcbiAgLy8gRXJyb3Igb3V0c2lkZSBvZiBvdXIgY29udHJvbCAoZS5nLiB0ZXJyYWZvcm0gZmFpbGVkKVxuICBFeHRlcm5hbDogcmVwb3J0UHJlZml4ZWRFcnJvcihcIkV4dGVybmFsXCIsIGVycm9yU2NvcGUpLFxuXG4gIC8vIFNldCB0aGUgc2NvcGUgZm9yIGFsbCBlcnJvcnNcbiAgc2V0U2NvcGUoc2NvcGU6IHN0cmluZykge1xuICAgIGVycm9yU2NvcGUgPSBzY29wZTtcbiAgICBTZW50cnkuY29uZmlndXJlU2NvcGUoKHMpID0+IHMuc2V0VHJhbnNhY3Rpb25OYW1lKHNjb3BlKSk7XG4gIH0sXG59O1xuIl19