"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConstructIdsForOutputs = exports.parseOutput = exports.normalizeOutputPath = exports.saveOutputs = void 0;
const z = __importStar(require("zod"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const logging_1 = require("./logging");
const schema_1 = require("./models/schema");
const terraform_1 = require("./models/terraform");
function unpackTerraformOutput(outputs, includeSensitiveOutputs) {
    return Object.entries(outputs).reduce((acc, [key, entry]) => ({
        ...acc,
        [key]: terraform_1.isTerraformOutput(entry)
            ? !entry.sensitive || includeSensitiveOutputs
                ? entry.value
                : undefined
            : unpackTerraformOutput(entry, includeSensitiveOutputs),
    }), {});
}
async function saveOutputs(filePath, outputs, includeSensitiveOutputs) {
    fs.writeFileSync(filePath, JSON.stringify(unpackTerraformOutput(outputs, includeSensitiveOutputs), null, 2));
}
exports.saveOutputs = saveOutputs;
function normalizeOutputPath(filePath) {
    return path.isAbsolute(filePath)
        ? filePath
        : path.join(process.cwd(), filePath);
}
exports.normalizeOutputPath = normalizeOutputPath;
const mapActionToState = (action, done) => {
    switch (action) {
        case "create":
        case "update":
            return done
                ? terraform_1.DeployingResourceApplyState.CREATED
                : terraform_1.DeployingResourceApplyState.CREATING;
        case "delete":
            return done
                ? terraform_1.DeployingResourceApplyState.DESTROYED
                : terraform_1.DeployingResourceApplyState.DESTROYING;
        default:
            return terraform_1.DeployingResourceApplyState.WAITING;
    }
};
// This is deprecated and will be removed in a future version.
const parseJsonOutputLine = (line) => {
    let json, message;
    try {
        json = JSON.parse(line);
    }
    catch (_a) {
        logging_1.logger.trace(`Could not parse line as JSON: ${line}`);
        return;
    }
    try {
        message = schema_1.schema.parse(json);
    }
    catch (err) {
        if (err instanceof z.ZodError) {
            logging_1.logger.trace(`Error parsing line into schema: ${JSON.stringify(err.errors)} => ${line}`);
        }
        return;
    }
    switch (message.type) {
        case "apply_start":
        case "apply_progress":
            return {
                id: message.hook.resource.resource,
                applyState: mapActionToState(message.hook.action, false),
            };
        case "apply_complete":
            return {
                id: message.hook.resource.resource,
                applyState: mapActionToState(message.hook.action, true),
            };
        default:
            return;
    }
};
const parseTextOutputLine = (line) => {
    if (/^Outputs:/.test(line)) {
        return;
    }
    if (/^Plan:/.test(line)) {
        return;
    }
    if (/^data\..*/.test(line)) {
        return;
    }
    const resourceMatch = line.match(/^([a-zA-Z_][a-zA-Z\d_\-.]*):/);
    let applyState;
    switch (true) {
        case /Creating.../.test(line):
        case /Still creating.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.CREATING;
            break;
        case /Creation complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.CREATED;
            break;
        case /Modifying.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.UPDATING;
            break;
        case /Modifications complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.UPDATED;
            break;
        case /Destroying.../.test(line):
        case /Still destroying.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.DESTROYING;
            break;
        case /Destruction complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.DESTROYED;
            break;
        default:
            return;
    }
    if (resourceMatch &&
        resourceMatch.length >= 0 &&
        resourceMatch[1] != "Warning") {
        return {
            id: resourceMatch[1],
            applyState,
        };
    }
    else {
        return;
    }
};
exports.parseOutput = (str) => {
    const lines = strip_ansi_1.default(str.toString()).split("\n");
    const resources = lines.map((line) => {
        const parsed = parseJsonOutputLine(line) || parseTextOutputLine(line);
        if (parsed === undefined) {
            return;
        }
        const { id, applyState } = parsed;
        return {
            id,
            applyState,
            action: terraform_1.PlannedResourceAction.CREATE,
        };
    });
    return resources.reduce((acc, resource) => {
        if (resource) {
            acc.push(resource);
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/no-array-constructor
    }, new Array());
};
const isObjectEmpty = (obj) => {
    if (typeof obj !== "object") {
        return false;
    }
    return (Object.keys(obj).length === 0 ||
        Object.values(obj).every((v) => v === undefined || v === null || isObjectEmpty(v)));
};
exports.getConstructIdsForOutputs = (stackContent, outputs) => {
    // Older cdktf versions might not have the output metadata
    if (!("//" in stackContent) || !("outputs" in stackContent["//"])) {
        return outputs;
    }
    const outputsMapping = stackContent["//"].outputs;
    const mapOutputs = (value) => {
        return Object.entries(value).reduce((acc, [key, value]) => {
            if (typeof value === "string") {
                return { ...acc, [key]: outputs[value] };
            }
            const mapped = mapOutputs(value);
            if (isObjectEmpty(mapped)) {
                return acc;
            }
            return {
                ...acc,
                [key]: mapped,
            };
        }, {});
    };
    return mapOutputs(outputsMapping);
};
//# sourceMappingURL=data:application/json;base64,