"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectDebugInformation = exports.getPackageVersion = exports.getNodeVersion = exports.getGoVersion = exports.getPipenvVersion = exports.getPipVersion = exports.getPythonVersion = exports.getMavenVersion = exports.getJavaVersion = exports.getDotnetVersion = exports.getLanguage = void 0;
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const logging_1 = require("./logging");
const util_1 = require("./util");
const terraform_1 = require("./terraform");
const version_1 = require("./version");
function getLanguage(projectPath = process.cwd()) {
    try {
        const cdktfJson = require(path.resolve(projectPath, "cdktf.json"));
        return cdktfJson.language;
    }
    catch (_a) {
        // We can not detect the language
        logging_1.logger.debug(`Unable to detect language in ${projectPath}`);
        return undefined;
    }
}
exports.getLanguage = getLanguage;
async function getBinaryVersion(binary, versionCommand) {
    const noOp = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function
    try {
        const result = await util_1.exec(binary, [versionCommand], { env: process.env, stdio: [undefined, undefined, "ignore"] }, noOp, noOp);
        return result.trim().replace(/\r?\n|\r/g, "");
    }
    catch (e) {
        logging_1.logger.debug(`Failed to run ${binary} ${versionCommand}: ${e}`);
        return undefined;
    }
}
function getDotnetVersion() {
    return getBinaryVersion("dotnet", "--version");
}
exports.getDotnetVersion = getDotnetVersion;
function getJavaVersion() {
    return getBinaryVersion("java", "-version");
}
exports.getJavaVersion = getJavaVersion;
function getMavenVersion() {
    return getBinaryVersion("mvn", "--version");
}
exports.getMavenVersion = getMavenVersion;
async function getPythonVersion() {
    return ((await getBinaryVersion("python3", "--version")) ||
        (await getBinaryVersion("python", "--version")));
}
exports.getPythonVersion = getPythonVersion;
function getPipVersion() {
    return getBinaryVersion("pip", "--version");
}
exports.getPipVersion = getPipVersion;
function getPipenvVersion() {
    return getBinaryVersion("pipenv", "--version");
}
exports.getPipenvVersion = getPipenvVersion;
function getGoVersion() {
    return getBinaryVersion("go", "version");
}
exports.getGoVersion = getGoVersion;
function getNodeVersion() {
    return getBinaryVersion("node", "--version");
}
exports.getNodeVersion = getNodeVersion;
async function getNodeModuleVersion(packageName) {
    let output;
    try {
        output = await util_1.exec("npm", ["list", packageName, "--json"], {
            env: { ...process.env },
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'npm list ${packageName} --json': ${e}`);
        return undefined;
    }
    let json;
    try {
        json = JSON.parse(output);
    }
    catch (e) {
        logging_1.logger.debug(`Unable to parse output of 'npm list ${packageName} --json': ${e}`);
        return undefined;
    }
    if (!json.dependencies ||
        !json.dependencies[packageName] ||
        !json.dependencies[packageName].version) {
        logging_1.logger.debug(`Unable to find '${packageName}' in 'npm list ${packageName} --json': ${output}`);
        return undefined;
    }
    return json.dependencies[packageName].version;
}
async function getPythonPackageVersion(packageName) {
    let output;
    try {
        output = await util_1.exec("pipenv", ["run", "pip", "show", packageName], {
            env: process.env,
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'pipenv run pip show ${packageName}': ${e}`);
    }
    // If we couldn't get the output using pipenv, try to get it using pip directly
    if (!output) {
        try {
            output = await util_1.exec("pip", ["show", packageName], {
                env: process.env,
            });
        }
        catch (e) {
            logging_1.logger.debug(`Unable to run 'pip show ${packageName}': ${e}`);
        }
    }
    if (!output) {
        return undefined;
    }
    const versionInfo = output
        .split(/\r\n|\r|\n/)
        .find((line) => line.startsWith("Version:"));
    if (!versionInfo) {
        logging_1.logger.debug(`Unable to find version in output of 'pipenv run pip show ${packageName}' / 'pip show ${packageName}': ${output}`);
        return undefined;
    }
    const version = versionInfo.split(":")[1].trim();
    return version;
}
// Once https://github.com/NuGet/Home/issues/7752 gets resolved we can also try with --json
async function getCSharpPackageVersion(packageName) {
    const translationMap = {
        jsii: "Amazon.JSII.Runtime",
        constructs: "Constructs",
        cdktf: "HashiCorp.Cdktf",
    };
    const cSharpPackageName = translationMap[packageName] || packageName;
    let output;
    try {
        output = await util_1.exec("dotnet", ["list", "package", "--include-transitive"], {
            env: process.env,
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'dotnet list package --include-transitive': ${e}`);
        return undefined;
    }
    const versionLine = output
        .split(/\r\n|\r|\n/)
        .find((line) => line.includes(`> ${cSharpPackageName}`));
    if (!versionLine) {
        logging_1.logger.debug(`Unable to find version for '${cSharpPackageName}' in output of 'dotnet list package --include-transitive': ${output}`);
        return undefined;
    }
    // A line might look like this:
    //   Transitive Package                                           Resolved
    //   > Amazon.JSII.Runtime                                        1.17.1
    // Therefore we reverse split by whitespace and reverse
    // so that the first thing we find is the version number
    return versionLine
        .split(" ")
        .reverse()
        .find((part) => part !== "");
}
async function getGoPackageVersion(packageName) {
    const translationMap = {
        jsii: "jsii-runtime-go",
        cdktf: "github.com/hashicorp/terraform-cdk-go",
    };
    const goPackageName = translationMap[packageName] || packageName;
    let output;
    try {
        output = await util_1.exec("go", ["list", "-m", "all"], {
            env: process.env,
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'go list -m all': ${e}`);
        return undefined;
    }
    let versionLine = output
        .split(/\r\n|\r|\n/)
        .find((line) => line.includes(goPackageName));
    if (!versionLine) {
        logging_1.logger.debug(`Unable to find version for '${goPackageName}' in output of 'go list -m all': ${output}`);
        return undefined;
    }
    // We are dealing with a local version
    if (versionLine.includes("=>")) {
        logging_1.logger.debug(`Found local version for '${goPackageName}': ${versionLine}`);
        versionLine = versionLine.split("=>")[0].trim();
    }
    return versionLine.split(" ").pop();
}
async function getJavaPackageVersion(packageName) {
    const translationMap = {
        jsii: "jsii-runtime",
    };
    const javaPackageName = translationMap[packageName] || packageName;
    let output;
    try {
        output = await util_1.exec("mvn", ["dependency:list"], {
            env: process.env,
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'mvn dependency:list': ${e}`);
        return undefined;
    }
    const resolutionPart = output.split("The following files have been resolved")[1];
    if (!resolutionPart) {
        logging_1.logger.debug(`Unable to find resolution passage in output of 'mvn dependency:list': ${output}`);
        return undefined;
    }
    const versionLine = resolutionPart
        .split(/\r\n|\r|\n/)
        .find((line) => line.includes(javaPackageName));
    if (!versionLine) {
        logging_1.logger.debug(`Unable to find version for '${javaPackageName}' in output of 'mvn dependency:list': ${output}`);
        return undefined;
    }
    // Example line: [INFO]    com.hashicorp:cdktf:jar:0.0.0:compile
    const versionStartDelimiter = `${javaPackageName}:jar:`;
    const versionStart = versionLine.indexOf(versionStartDelimiter) + versionStartDelimiter.length;
    const versionEndDelemiter = ":compile";
    const versionEnd = versionLine.indexOf(versionEndDelemiter);
    return versionLine.substring(versionStart, versionEnd);
}
async function getPackageVersion(language, packageName) {
    const noOp = async () => undefined; // eslint-disable-line @typescript-eslint/no-empty-function
    const getLibraryVersionMap = {
        typescript: getNodeModuleVersion,
        python: getPythonPackageVersion,
        go: getGoPackageVersion,
        csharp: getCSharpPackageVersion,
        java: getJavaPackageVersion,
    };
    const libVersion = await (getLibraryVersionMap[language] || noOp)(packageName);
    return libVersion !== null && libVersion !== void 0 ? libVersion : undefined;
}
exports.getPackageVersion = getPackageVersion;
async function collectDebugInformation() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const debugOutput = {};
    const language = getLanguage();
    debugOutput["language"] = language !== null && language !== void 0 ? language : null;
    debugOutput["cdktf-cli"] = version_1.DISPLAY_VERSION;
    const node = getNodeVersion();
    debugOutput["node"] = (_a = (await node)) !== null && _a !== void 0 ? _a : null;
    if (language) {
        const cdktf = getPackageVersion(language, "cdktf");
        const constructs = getPackageVersion(language, "constructs");
        const jsii = getPackageVersion(language, "jsii");
        debugOutput["cdktf"] = (_b = (await cdktf)) !== null && _b !== void 0 ? _b : null;
        debugOutput["constructs"] = (_c = (await constructs)) !== null && _c !== void 0 ? _c : null;
        debugOutput["jsii"] = (_d = (await jsii)) !== null && _d !== void 0 ? _d : null;
    }
    debugOutput["terraform"] = await terraform_1.terraformVersion;
    debugOutput["arch"] = os.arch();
    debugOutput["os"] = `${os.platform()} ${os.release()}`;
    switch (language) {
        case "python":
            {
                const python = getPythonVersion();
                const pip = getPipVersion();
                const pipenv = getPipenvVersion();
                debugOutput["python"] = (_e = (await python)) !== null && _e !== void 0 ? _e : null;
                debugOutput["pip"] = (_f = (await pip)) !== null && _f !== void 0 ? _f : null;
                debugOutput["pipenv"] = (_g = (await pipenv)) !== null && _g !== void 0 ? _g : null;
            }
            break;
        case "java":
            {
                const java = getJavaVersion();
                const maven = getMavenVersion();
                debugOutput["java"] = (_h = (await java)) !== null && _h !== void 0 ? _h : null;
                debugOutput["maven"] = (_j = (await maven)) !== null && _j !== void 0 ? _j : null;
            }
            break;
        case "csharp":
            debugOutput["dotnet"] = (_k = (await getDotnetVersion())) !== null && _k !== void 0 ? _k : null;
            break;
        case "go":
            debugOutput["go"] = (_l = (await getGoVersion())) !== null && _l !== void 0 ? _l : null;
            break;
    }
    return debugOutput;
}
exports.collectDebugInformation = collectDebugInformation;
//# sourceMappingURL=data:application/json;base64,