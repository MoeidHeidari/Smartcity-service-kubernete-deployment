"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfConfig = void 0;
const fs = __importStar(require("fs"));
const provider_generator_1 = require("@cdktf/provider-generator");
const utilities_1 = require("../bin/cmds/helper/utilities");
const errors_1 = require("./errors");
const path_1 = __importDefault(require("path"));
const logging_1 = require("./logging");
const config_1 = require("@cdktf/provider-generator/lib/config");
// TODO: move this to some common package from where it is used by @cdktf/provider-generator, cdktf, and cdktf-cli
// (might end up in cdktf)
// tracked here https://github.com/hashicorp/terraform-cdk/issues/1814
class CdktfConfig {
    constructor(cdktfConfigPath) {
        this.cdktfConfigPath = cdktfConfigPath;
    }
    readCdktfConfig() {
        const cdktfConfig = require(this.cdktfConfigPath);
        if (typeof cdktfConfig !== "object" || cdktfConfig === null) {
            throw errors_1.Errors.External("cdktf.json is malformed. The root must be a JSON object."); // TODO: define a schema and validate against it
        }
        return cdktfConfig;
    }
    writeCdktfConfig(cdktfConfig) {
        const cdktfConfigString = JSON.stringify(cdktfConfig, null, 2);
        fs.writeFileSync(this.cdktfConfigPath, cdktfConfigString);
    }
    getProperty(property) {
        const cdktfConfig = this.readCdktfConfig();
        return cdktfConfig[property] || config_1.CONFIG_DEFAULTS[property];
    }
    get language() {
        const rawLanguage = this.getProperty("language");
        const language = Object.values(provider_generator_1.Language).find((value) => value === rawLanguage);
        if (!language)
            throw errors_1.Errors.Usage(`${rawLanguage} is not a valid language. It must be one of ${Object.values(provider_generator_1.Language)}`);
        return language;
    }
    get codeMakerOutput() {
        return this.getProperty("codeMakerOutput");
    }
    get terraformProviders() {
        const providers = this.getProperty("terraformProviders");
        if (!Array.isArray(providers))
            return [];
        return providers;
    }
    writeTerraformProviders(providers) {
        const cdktfConfig = this.readCdktfConfig();
        cdktfConfig.terraformProviders = providers;
        this.writeCdktfConfig(cdktfConfig);
    }
    get projectDirectory() {
        return path_1.default.dirname(this.cdktfConfigPath);
    }
    static read(path = process.cwd()) {
        const cdktfConfigPath = utilities_1.findFileAboveCwd("cdktf.json", path);
        if (!cdktfConfigPath) {
            throw errors_1.Errors.External("Could not find cdktf.json. Make sure there is a cdktf.json file in the current directory or one of its parents.");
        }
        logging_1.logger.trace(`cdktf.json found at ${cdktfConfigPath}`);
        return new CdktfConfig(cdktfConfigPath);
    }
}
exports.CdktfConfig = CdktfConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrdGYtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrdGYtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBeUI7QUFDekIsa0VBQXFEO0FBQ3JELDREQUFnRTtBQUNoRSxxQ0FBa0M7QUFDbEMsZ0RBQXdCO0FBQ3hCLHVDQUFtQztBQUNuQyxpRUFBdUU7QUFTdkUsa0hBQWtIO0FBQ2xILDBCQUEwQjtBQUMxQixzRUFBc0U7QUFDdEUsTUFBYSxXQUFXO0lBQ3RCLFlBQW9CLGVBQXVCO1FBQXZCLG9CQUFlLEdBQWYsZUFBZSxDQUFRO0lBQUcsQ0FBQztJQUV2QyxlQUFlO1FBQ3JCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEQsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLElBQUksV0FBVyxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLGVBQU0sQ0FBQyxRQUFRLENBQ25CLDBEQUEwRCxDQUMzRCxDQUFDLENBQUMsZ0RBQWdEO1NBQ3BEO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFdBQW9DO1FBQzNELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxXQUFXLENBQUMsUUFBZ0I7UUFDbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzNDLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFLLHdCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLDZCQUFRLENBQUMsQ0FBQyxJQUFJLENBQzNDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUNqQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVE7WUFDWCxNQUFNLGVBQU0sQ0FBQyxLQUFLLENBQ2hCLEdBQUcsV0FBVywrQ0FBK0MsTUFBTSxDQUFDLE1BQU0sQ0FDeEUsNkJBQVEsQ0FDVCxFQUFFLENBQ0osQ0FBQztRQUVKLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFXLGVBQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFXLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQVcsa0JBQWtCO1FBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUN6QyxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU0sdUJBQXVCLENBQzVCLFNBQThDO1FBRTlDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQyxXQUFXLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO1FBQzNDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDN0MsTUFBTSxlQUFlLEdBQUcsNEJBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsTUFBTSxlQUFNLENBQUMsUUFBUSxDQUNuQixpSEFBaUgsQ0FDbEgsQ0FBQztTQUNIO1FBQ0QsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUF2RUQsa0NBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyBmaW5kRmlsZUFib3ZlQ3dkIH0gZnJvbSBcIi4uL2Jpbi9jbWRzL2hlbHBlci91dGlsaXRpZXNcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuL2Vycm9yc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCB7IENPTkZJR19ERUZBVUxUUyB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yL2xpYi9jb25maWdcIjtcblxuZXhwb3J0IHR5cGUgUHJvdmlkZXJEZXBlbmRlbmN5U3BlYyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBzb3VyY2U6IHN0cmluZztcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgbmFtZXNwYWNlPzogc3RyaW5nO1xufTtcblxuLy8gVE9ETzogbW92ZSB0aGlzIHRvIHNvbWUgY29tbW9uIHBhY2thZ2UgZnJvbSB3aGVyZSBpdCBpcyB1c2VkIGJ5IEBjZGt0Zi9wcm92aWRlci1nZW5lcmF0b3IsIGNka3RmLCBhbmQgY2RrdGYtY2xpXG4vLyAobWlnaHQgZW5kIHVwIGluIGNka3RmKVxuLy8gdHJhY2tlZCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXNoaWNvcnAvdGVycmFmb3JtLWNkay9pc3N1ZXMvMTgxNFxuZXhwb3J0IGNsYXNzIENka3RmQ29uZmlnIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZGt0ZkNvbmZpZ1BhdGg6IHN0cmluZykge31cblxuICBwcml2YXRlIHJlYWRDZGt0ZkNvbmZpZygpOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgY29uc3QgY2RrdGZDb25maWcgPSByZXF1aXJlKHRoaXMuY2RrdGZDb25maWdQYXRoKTtcbiAgICBpZiAodHlwZW9mIGNka3RmQ29uZmlnICE9PSBcIm9iamVjdFwiIHx8IGNka3RmQ29uZmlnID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcnMuRXh0ZXJuYWwoXG4gICAgICAgIFwiY2RrdGYuanNvbiBpcyBtYWxmb3JtZWQuIFRoZSByb290IG11c3QgYmUgYSBKU09OIG9iamVjdC5cIlxuICAgICAgKTsgLy8gVE9ETzogZGVmaW5lIGEgc2NoZW1hIGFuZCB2YWxpZGF0ZSBhZ2FpbnN0IGl0XG4gICAgfVxuICAgIHJldHVybiBjZGt0ZkNvbmZpZztcbiAgfVxuXG4gIHByaXZhdGUgd3JpdGVDZGt0ZkNvbmZpZyhjZGt0ZkNvbmZpZzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZ1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNka3RmQ29uZmlnLCBudWxsLCAyKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHRoaXMuY2RrdGZDb25maWdQYXRoLCBjZGt0ZkNvbmZpZ1N0cmluZyk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb3BlcnR5KHByb3BlcnR5OiBzdHJpbmcpOiB1bmtub3duIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZyA9IHRoaXMucmVhZENka3RmQ29uZmlnKCk7XG4gICAgcmV0dXJuIGNka3RmQ29uZmlnW3Byb3BlcnR5XSB8fCAoQ09ORklHX0RFRkFVTFRTIGFzIGFueSlbcHJvcGVydHldO1xuICB9XG5cbiAgcHVibGljIGdldCBsYW5ndWFnZSgpOiBMYW5ndWFnZSB7XG4gICAgY29uc3QgcmF3TGFuZ3VhZ2UgPSB0aGlzLmdldFByb3BlcnR5KFwibGFuZ3VhZ2VcIik7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBPYmplY3QudmFsdWVzKExhbmd1YWdlKS5maW5kKFxuICAgICAgKHZhbHVlKSA9PiB2YWx1ZSA9PT0gcmF3TGFuZ3VhZ2VcbiAgICApO1xuICAgIGlmICghbGFuZ3VhZ2UpXG4gICAgICB0aHJvdyBFcnJvcnMuVXNhZ2UoXG4gICAgICAgIGAke3Jhd0xhbmd1YWdlfSBpcyBub3QgYSB2YWxpZCBsYW5ndWFnZS4gSXQgbXVzdCBiZSBvbmUgb2YgJHtPYmplY3QudmFsdWVzKFxuICAgICAgICAgIExhbmd1YWdlXG4gICAgICAgICl9YFxuICAgICAgKTtcblxuICAgIHJldHVybiBsYW5ndWFnZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29kZU1ha2VyT3V0cHV0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvcGVydHkoXCJjb2RlTWFrZXJPdXRwdXRcIikgYXMgc3RyaW5nO1xuICB9XG5cbiAgcHVibGljIGdldCB0ZXJyYWZvcm1Qcm92aWRlcnMoKTogKFByb3ZpZGVyRGVwZW5kZW5jeVNwZWMgfCBzdHJpbmcpW10ge1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IHRoaXMuZ2V0UHJvcGVydHkoXCJ0ZXJyYWZvcm1Qcm92aWRlcnNcIik7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3ZpZGVycykpIHJldHVybiBbXTtcbiAgICByZXR1cm4gcHJvdmlkZXJzO1xuICB9XG5cbiAgcHVibGljIHdyaXRlVGVycmFmb3JtUHJvdmlkZXJzKFxuICAgIHByb3ZpZGVyczogKFByb3ZpZGVyRGVwZW5kZW5jeVNwZWMgfCBzdHJpbmcpW11cbiAgKSB7XG4gICAgY29uc3QgY2RrdGZDb25maWcgPSB0aGlzLnJlYWRDZGt0ZkNvbmZpZygpO1xuICAgIGNka3RmQ29uZmlnLnRlcnJhZm9ybVByb3ZpZGVycyA9IHByb3ZpZGVycztcbiAgICB0aGlzLndyaXRlQ2RrdGZDb25maWcoY2RrdGZDb25maWcpO1xuICB9XG5cbiAgcHVibGljIGdldCBwcm9qZWN0RGlyZWN0b3J5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHBhdGguZGlybmFtZSh0aGlzLmNka3RmQ29uZmlnUGF0aCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlYWQocGF0aDogc3RyaW5nID0gcHJvY2Vzcy5jd2QoKSk6IENka3RmQ29uZmlnIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZ1BhdGggPSBmaW5kRmlsZUFib3ZlQ3dkKFwiY2RrdGYuanNvblwiLCBwYXRoKTtcbiAgICBpZiAoIWNka3RmQ29uZmlnUGF0aCkge1xuICAgICAgdGhyb3cgRXJyb3JzLkV4dGVybmFsKFxuICAgICAgICBcIkNvdWxkIG5vdCBmaW5kIGNka3RmLmpzb24uIE1ha2Ugc3VyZSB0aGVyZSBpcyBhIGNka3RmLmpzb24gZmlsZSBpbiB0aGUgY3VycmVudCBkaXJlY3Rvcnkgb3Igb25lIG9mIGl0cyBwYXJlbnRzLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBsb2dnZXIudHJhY2UoYGNka3RmLmpzb24gZm91bmQgYXQgJHtjZGt0ZkNvbmZpZ1BhdGh9YCk7XG5cbiAgICByZXR1cm4gbmV3IENka3RmQ29uZmlnKGNka3RmQ29uZmlnUGF0aCk7XG4gIH1cbn1cbiJdfQ==