"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfProject = exports.getStackWithNoUnmetDependencies = exports.getMultipleStacks = void 0;
const node_abort_controller_1 = require("node-abort-controller"); // polyfill until we update to node 16
const synth_stack_1 = require("./synth-stack");
const synth_1 = require("./synth");
const cdktf_stack_1 = require("./cdktf-stack");
const errors_1 = require("./errors");
const logging_1 = require("./logging");
const minimatch_1 = __importDefault(require("minimatch"));
const execution_logs_1 = require("./execution-logs");
function getSingleStack(stacks, stackName, targetAction) {
    if (!stacks) {
        throw errors_1.Errors.Internal("Trying to access a stack before it has been synthesized");
    }
    if (stackName) {
        const stack = stacks.find((s) => s.name === stackName);
        if (!stack) {
            throw errors_1.Errors.Usage("Could not find stack: " + stackName);
        }
        return stack;
    }
    if (stacks.length === 1) {
        return stacks[0];
    }
    throw errors_1.Errors.Usage(`Found more than one stack, please specify a target stack. Run cdktf ${targetAction || "<verb>"} <stack> with one of these stacks: ${stacks
        .map((s) => s.name)
        .join(", ")} `);
}
function getMultipleStacks(stacks, patterns, targetAction) {
    if (!patterns || !patterns.length) {
        if (stacks.length === 1) {
            return [stacks[0]];
        }
        throw errors_1.Errors.Usage(`Found more than one stack, please specify a target stack. Run cdktf ${targetAction || "<verb>"} <stack> with one of these stacks: ${stacks
            .map((s) => s.name)
            .join(", ")} `);
    }
    return patterns.flatMap((pattern) => {
        const matchingStacks = stacks.filter((stack) => minimatch_1.default(stack.name, pattern));
        if (matchingStacks.length === 0) {
            throw errors_1.Errors.Usage(`Could not find stack for pattern '${pattern}'`);
        }
        return matchingStacks;
    });
}
exports.getMultipleStacks = getMultipleStacks;
// Returns the first stack that has no unmet dependencies
// An unmet dependency is a dependency that has not been deployed yet
// If there is no unfinished stack, returns undefined
// If there is no stack ready to be worked on, it returns a promise that will resolve as soon as there is a follow-up stack available
async function getStackWithNoUnmetDependencies(stackExecutors) {
    logging_1.logger.debug("Checking for stacks with unmet dependencies");
    logging_1.logger.debug("stack executors:", stackExecutors);
    const pendingStacks = stackExecutors.filter((executor) => executor.isPending);
    logging_1.logger.debug("pending stacks:", stackExecutors);
    if (pendingStacks.length === 0) {
        return undefined;
    }
    const currentlyReadyStack = pendingStacks.find((executor) => executor.stack.dependencies.every((dependency) => {
        var _a;
        return ((_a = stackExecutors.find((executor) => executor.stack.name === dependency)) === null || _a === void 0 ? void 0 : _a.currentState) === "done";
    }));
    if (currentlyReadyStack) {
        logging_1.logger.debug("Found a stack with no unmet dependencies");
        return currentlyReadyStack;
    }
    const stackExecutionPromises = stackExecutors
        .filter((ex) => ex.currentWorkPromise)
        .map((ex) => ex.currentWorkPromise);
    logging_1.logger.debug(`${stackExecutionPromises.length} stacks are currently busy, waiting for one to finish`);
    if (!stackExecutionPromises.length) {
        return undefined;
    }
    await Promise.race(stackExecutionPromises);
    return await getStackWithNoUnmetDependencies(stackExecutors);
}
exports.getStackWithNoUnmetDependencies = getStackWithNoUnmetDependencies;
function findAllDependantStacks(stackExecutors, stackName) {
    return stackExecutors.filter((innerExecutor) => innerExecutor.stack.dependencies.includes(stackName));
}
function findAllNestedDependantStacks(stackExecutors, stackName, knownDependantStackNames = new Set()) {
    const dependantStacks = findAllDependantStacks(stackExecutors, stackName);
    dependantStacks.forEach((stack) => {
        if (knownDependantStackNames.has(stack.stack.name)) {
            return;
        }
        knownDependantStackNames.add(stack.stack.name);
        findAllNestedDependantStacks(stackExecutors, stack.stack.name, knownDependantStackNames);
    });
    return stackExecutors.filter((executor) => knownDependantStackNames.has(executor.stack.name));
}
// Returns the first stack that has no dependents that need to be destroyed first
async function getStackWithNoUnmetDependants(stackExecutors) {
    logging_1.logger.debug("Checking for stacks with unmet dependants");
    logging_1.logger.debug("stack executors:", stackExecutors);
    const pendingStacks = stackExecutors.filter((executor) => executor.isPending);
    logging_1.logger.debug("pending stacks:", stackExecutors);
    if (pendingStacks.length === 0) {
        return undefined;
    }
    const currentlyReadyStack = pendingStacks.find((executor) => {
        const dependantStacks = findAllDependantStacks(stackExecutors, executor.stack.name);
        return dependantStacks.every((stack) => stack.currentState === "done");
    });
    if (currentlyReadyStack) {
        logging_1.logger.debug("Found a stack with no unmet dependants");
        return currentlyReadyStack;
    }
    const stackExecutionPromises = stackExecutors
        .filter((ex) => ex.currentWorkPromise)
        .map((ex) => ex.currentWorkPromise);
    logging_1.logger.debug(`${stackExecutionPromises.length} stacks are currently busy, waiting for one to finish`);
    if (!stackExecutionPromises.length) {
        return undefined;
    }
    await Promise.race(stackExecutionPromises);
    return await getStackWithNoUnmetDependants(stackExecutors);
}
// Throws an error if there is a dependant stack that is not included
function checkIfAllDependantsAreIncluded(stacksToRun, allStacks) {
    const allDependants = new Set();
    stacksToRun
        .map((stack) => allStacks.filter((s) => s.dependencies.includes(stack.name)))
        .flat()
        .forEach((dependant) => allDependants.add(dependant.name));
    const stackNames = stacksToRun.map((stack) => stack.name);
    const missingDependants = [...allDependants].filter((dependant) => !stackNames.includes(dependant));
    if (missingDependants.length > 0) {
        throw errors_1.Errors.Usage(`The following dependant stacks are not included in the stacks to run: ${missingDependants.join(", ")}. Either add them or add the --ignore-missing-stack-dependencies flag.`);
    }
}
// Throws an error if there is a dependency that is not included
// Cycles are detected on dependency creation at synthesis time
// Running this prevents us from being in a situation where we have to wait for a stack to be deployed
// that is not included to be run
function checkIfAllDependenciesAreIncluded(stacksToRun) {
    const allDependencies = new Set();
    stacksToRun
        .map((stack) => stack.dependencies)
        .flat()
        .forEach((dependency) => allDependencies.add(dependency));
    const stackNames = stacksToRun.map((stack) => stack.name);
    const missingDependencies = [...allDependencies].filter((dependency) => !stackNames.includes(dependency));
    if (missingDependencies.length > 0) {
        throw errors_1.Errors.Usage(`The following dependencies are not included in the stacks to run: ${missingDependencies.join(", ")}. Either add them or add the --ignore-missing-stack-dependencies flag.`);
    }
}
class CdktfProject {
    constructor({ synthCommand, outDir, onUpdate, onLog, workingDirectory = process.cwd(), }) {
        // Set during deploy / destroy
        this.stacksToRun = [];
        // This means sth different in deploy / destroy
        this.stopAllStacksThatCanNotRunWithout = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function
        // Pauses all progress / status events from being forwarded to the user
        // If set from true to false, the events will be sent through the channels they came in
        // (until a waiting for approval event is sent)
        this.waitingForApproval = false;
        this.eventBuffer = [];
        this.synthCommand = synthCommand;
        this.outDir = outDir;
        this.workingDirectory = workingDirectory;
        this.onUpdate = onUpdate;
        this.onLog = onLog;
        const ac = new node_abort_controller_1.AbortController();
        this.abortSignal = ac.signal;
        this.hardAbort = ac.abort.bind(ac);
    }
    stopAllStacks() {
        this.stacksToRun.forEach((stack) => stack.stop());
        this.eventBuffer = this.eventBuffer.filter((event) => event.type === "projectUpdate"
            ? event.value.type !== "waiting for approval" // we want to filter out the waiting for approval events
            : true // we want all other types
        );
    }
    waitForApproval() {
        this.waitingForApproval = true;
    }
    resumeAfterApproval() {
        // We first need to flush all events, we can not resume if there is a new waiting for approval update
        let event = this.eventBuffer.shift();
        while (event) {
            if (event.type === "projectUpdate") {
                event.cb(event.value);
                if (event.value.type === "waiting for approval") {
                    // We have to wait for approval again, therefore we can not resume
                    return;
                }
            }
            if (event.type === "logMessage") {
                event.cb(event.value);
            }
            event = this.eventBuffer.shift();
        }
        // If we reach this point there was no waiting for approval event, so we can safely resume
        this.waitingForApproval = false;
    }
    handleApprovalProcess(cb) {
        return (update) => {
            const bufferCb = (bufferedUpdate) => {
                this.eventBuffer.push({
                    cb,
                    value: bufferedUpdate,
                    type: "projectUpdate",
                });
            };
            const bufferableCb = this.waitingForApproval ? bufferCb : cb;
            if (update.type === "waiting for stack approval") {
                const callbacks = (update) => ({
                    approve: () => {
                        update.approve();
                        this.resumeAfterApproval();
                    },
                    dismiss: () => {
                        update.reject();
                        this.stopAllStacksThatCanNotRunWithout(update.stackName);
                        this.resumeAfterApproval();
                    },
                    stop: () => {
                        update.reject();
                        this.stopAllStacks();
                        this.resumeAfterApproval();
                    },
                });
                this.waitForApproval();
                bufferableCb({
                    type: "waiting for approval",
                    stackName: update.stackName,
                    plan: update.plan,
                    ...callbacks(update),
                });
            }
            else {
                bufferableCb(update);
            }
        };
    }
    bufferWhileWaitingForApproval(cb) {
        if (!cb) {
            return undefined;
        }
        return (msg) => {
            if (this.waitingForApproval) {
                this.eventBuffer.push({
                    cb,
                    value: msg,
                    type: "logMessage",
                });
            }
            else {
                cb(msg);
            }
        };
    }
    getStackExecutor(stack, opts = {}) {
        const enhanceLogMessage = execution_logs_1.createEnhanceLogMessage(stack);
        const onLog = this.bufferWhileWaitingForApproval(this.onLog);
        return new cdktf_stack_1.CdktfStack({
            ...opts,
            stack,
            onUpdate: this.handleApprovalProcess(this.onUpdate),
            onLog: onLog
                ? ({ message }) => onLog({
                    stackName: stack.name,
                    message,
                    messageWithConstructPath: enhanceLogMessage(message),
                })
                : undefined,
            abortSignal: this.abortSignal,
        });
    }
    get outputsByConstructId() {
        return this.stacksToRun.reduce((acc, stack) => ({
            ...acc,
            ...stack.outputsByConstructId,
        }), {});
    }
    async synth() {
        this.onUpdate({
            type: "synthesizing",
        });
        const stacks = await synth_stack_1.SynthStack.synth(this.abortSignal, this.synthCommand, this.outDir, this.workingDirectory);
        synth_1.printAnnotations(stacks);
        this.onUpdate({
            type: "synthesized",
            stacks,
        });
        return stacks;
    }
    async diff(opts) {
        const stacks = await this.synth();
        const stack = this.getStackExecutor(getSingleStack(stacks, opts === null || opts === void 0 ? void 0 : opts.stackName, "diff"));
        await stack.diff({ refreshOnly: opts === null || opts === void 0 ? void 0 : opts.refreshOnly });
        if (!stack.currentPlan)
            throw errors_1.Errors.External(`Stack failed to plan: ${stack.stack.name}. Please check the logs for more information.`);
        return stack.currentPlan;
    }
    async execute(method, next, parallelism, refreshOnly) {
        // We only support refresh only on deploy, a bit of a leaky abstraction here
        if (refreshOnly && method !== "deploy") {
            throw errors_1.Errors.Internal(`Refresh only is only supported on deploy`);
        }
        const maxParallelRuns = parallelism === -1 ? Infinity : parallelism;
        while (this.stacksToRun.filter((stack) => stack.isPending).length > 0) {
            const runningStacks = this.stacksToRun.filter((stack) => stack.isRunning);
            if (runningStacks.length >= maxParallelRuns) {
                await Promise.race(runningStacks.map((s) => s.currentWorkPromise));
            }
            else {
                const nextRunningExecutor = await next();
                if (!nextRunningExecutor) {
                    // In this case we have no pending stacks, but we also can not find a new executor
                    break;
                }
                method === "deploy"
                    ? nextRunningExecutor.deploy(refreshOnly)
                    : nextRunningExecutor.destroy();
            }
        }
        // We end the loop when all stacks are started, now we need to wait for them to be done
        await Promise.all(this.stacksToRun
            .filter((ex) => ex.currentWorkPromise)
            .map((ex) => ex.currentWorkPromise));
    }
    async deploy(opts = {}) {
        const parallelism = opts.parallelism || -1;
        const stacks = await this.synth();
        const stacksToRun = getMultipleStacks(stacks, opts.stackNames, "deploy");
        if (!opts.ignoreMissingStackDependencies) {
            checkIfAllDependenciesAreIncluded(stacksToRun);
        }
        this.stopAllStacksThatCanNotRunWithout = (stackName) => {
            findAllNestedDependantStacks(this.stacksToRun, stackName).forEach((stack) => stack.stop());
        };
        this.stacksToRun = stacksToRun.map((stack) => this.getStackExecutor(stack, opts));
        const next = opts.ignoreMissingStackDependencies
            ? () => Promise.resolve(this.stacksToRun.filter((stack) => stack.isPending)[0])
            : () => getStackWithNoUnmetDependencies(this.stacksToRun);
        await this.execute("deploy", next, parallelism, opts.refreshOnly);
        const unprocessedStacks = this.stacksToRun.filter((executor) => executor.isPending);
        if (unprocessedStacks.length > 0) {
            throw errors_1.Errors.External(`Some stacks failed to deploy: ${unprocessedStacks
                .map((s) => s.stack.name)
                .join(", ")}. Please check the logs for more information.`);
        }
    }
    async destroy(opts = {}) {
        const parallelism = opts.parallelism || -1;
        const stacks = await this.synth();
        const stacksToRun = getMultipleStacks(stacks, opts.stackNames, "destroy");
        if (!opts.ignoreMissingStackDependencies) {
            checkIfAllDependantsAreIncluded(stacksToRun, stacks);
        }
        this.stopAllStacksThatCanNotRunWithout = (stackName) => {
            const stackExecutor = this.stacksToRun.find((s) => s.stack.name === stackName);
            if (!stackExecutor) {
                throw errors_1.Errors.Internal(`Could not find stack "${stackName}" that was stopped`);
            }
            stackExecutor.stack.dependencies.forEach((dependant) => {
                this.stopAllStacksThatCanNotRunWithout(dependant);
                const dependantStack = this.stacksToRun.find((s) => s.stack.name === dependant);
                if (!dependantStack) {
                    throw errors_1.Errors.Internal(`Could not find stack "${dependant}" that was stopped`);
                }
                dependantStack.stop();
            });
        };
        this.stacksToRun = stacksToRun.map((stack) => this.getStackExecutor(stack, opts));
        const next = opts.ignoreMissingStackDependencies
            ? () => Promise.resolve(this.stacksToRun.filter((stack) => stack.currentState !== "done")[0])
            : () => getStackWithNoUnmetDependants(this.stacksToRun);
        await this.execute("destroy", next, parallelism);
        const unprocessedStacks = this.stacksToRun.filter((executor) => executor.isPending);
        if (unprocessedStacks.length > 0) {
            throw errors_1.Errors.External(`Some stacks failed to destroy: ${unprocessedStacks
                .map((s) => s.stack.name)
                .join(", ")}. Please check the logs for more information.`);
        }
    }
    async fetchOutputs(opts) {
        const stacks = await this.synth();
        const stacksToRun = getMultipleStacks(stacks, opts.stackNames || [], "deploy");
        if (stacksToRun.length === 0) {
            throw new Error("No stacks to fetch outputs for specified");
        }
        this.stacksToRun = stacksToRun.map((stack) => this.getStackExecutor(stack, opts));
        const outputs = await Promise.all(this.stacksToRun.map(async (s) => {
            const output = await s.fetchOutputs();
            return {
                [s.stack.name]: output,
            };
        }));
        return outputs.reduce((acc, curr) => ({ ...acc, ...curr }), {});
    }
}
exports.CdktfProject = CdktfProject;
//# sourceMappingURL=data:application/json;base64,