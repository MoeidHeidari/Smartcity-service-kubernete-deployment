"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = exports.GetStatus = void 0;
const provider_generator_1 = require("@cdktf/provider-generator");
const fs = __importStar(require("fs-extra"));
const logging_1 = require("./logging");
var GetStatus;
(function (GetStatus) {
    GetStatus["STARTING"] = "starting";
    GetStatus["DOWNLOADING"] = "downloading and generating modules and providers";
    GetStatus["DONE"] = "done";
    GetStatus["ERROR"] = "error";
})(GetStatus = exports.GetStatus || (exports.GetStatus = {}));
async function get({ constructsOptions, constraints, onUpdate = () => { }, // eslint-disable-line @typescript-eslint/no-empty-function
reportTelemetry = () => { }, }) {
    logging_1.logger.debug(`Starting get, removing output directory: '${constructsOptions.codeMakerOutput}'`);
    await fs.remove(constructsOptions.codeMakerOutput);
    const constructsMaker = new provider_generator_1.ConstructsMaker(constructsOptions, constraints, // ConstructsMaker handles both string and extended form, but is not consistent type wise
    reportTelemetry);
    onUpdate(GetStatus.DOWNLOADING);
    logging_1.logger.debug("Generating provider bindings");
    await constructsMaker.generate();
    logging_1.logger.debug("Provider bindings generated");
    if (!(await fs.pathExists(constructsOptions.codeMakerOutput))) {
        onUpdate(GetStatus.ERROR);
        logging_1.logger.debug("Failed to generate provider bindings");
    }
    else {
        onUpdate(GetStatus.DONE);
        logging_1.logger.debug("Provider bindings generated");
    }
}
exports.get = get;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrRUFBZ0Y7QUFFaEYsNkNBQStCO0FBQy9CLHVDQUFtQztBQUVuQyxJQUFZLFNBS1g7QUFMRCxXQUFZLFNBQVM7SUFDbkIsa0NBQXFCLENBQUE7SUFDckIsNkVBQWdFLENBQUE7SUFDaEUsMEJBQWEsQ0FBQTtJQUNiLDRCQUFlLENBQUE7QUFDakIsQ0FBQyxFQUxXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBS3BCO0FBaUJNLEtBQUssVUFBVSxHQUFHLENBQUMsRUFDeEIsaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCxRQUFRLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFFLDJEQUEyRDtBQUNoRixlQUFlLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxHQUNoQjtJQUNWLGdCQUFNLENBQUMsS0FBSyxDQUNWLDZDQUE2QyxpQkFBaUIsQ0FBQyxlQUFlLEdBQUcsQ0FDbEYsQ0FBQztJQUNGLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRCxNQUFNLGVBQWUsR0FBRyxJQUFJLG9DQUFlLENBQ3pDLGlCQUFpQixFQUNqQixXQUFxRCxFQUFFLHlGQUF5RjtJQUNoSixlQUFlLENBQ2hCLENBQUM7SUFDRixRQUFRLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hDLGdCQUFNLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDN0MsTUFBTSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUU1QyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRTtRQUM3RCxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLGdCQUFNLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7S0FDdEQ7U0FBTTtRQUNMLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztLQUM3QztBQUNILENBQUM7QUEzQkQsa0JBMkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0c01ha2VyLCBHZXRPcHRpb25zLCBjb25maWcgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHt9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yL2xpYi9jb25maWdcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2luZ1wiO1xuXG5leHBvcnQgZW51bSBHZXRTdGF0dXMge1xuICBTVEFSVElORyA9IFwic3RhcnRpbmdcIixcbiAgRE9XTkxPQURJTkcgPSBcImRvd25sb2FkaW5nIGFuZCBnZW5lcmF0aW5nIG1vZHVsZXMgYW5kIHByb3ZpZGVyc1wiLFxuICBET05FID0gXCJkb25lXCIsXG4gIEVSUk9SID0gXCJlcnJvclwiLFxufVxuXG50eXBlIFN0cmluZ0RlcGVuZGVuY3lDb25zdHJhaW50ID0gc3RyaW5nOyAvLyBlLmcuIGhhc2hpY29ycC9hd3NAIH4+IDIuMFxudHlwZSBEZXBlbmRlbmN5Q29uc3RyYWludCA9XG4gIHwgY29uZmlnLlRlcnJhZm9ybURlcGVuZGVuY3lDb25zdHJhaW50XG4gIHwgU3RyaW5nRGVwZW5kZW5jeUNvbnN0cmFpbnQ7XG5cbmludGVyZmFjZSBHZXRDb25maWcge1xuICBjb25zdHJhaW50czogRGVwZW5kZW5jeUNvbnN0cmFpbnRbXTtcbiAgY29uc3RydWN0c09wdGlvbnM6IEdldE9wdGlvbnM7XG4gIG9uVXBkYXRlPzogKHBheWxvYWQ6IEdldFN0YXR1cykgPT4gdm9pZDtcbiAgcmVwb3J0VGVsZW1ldHJ5PzogKHRlbGVtZXRyeToge1xuICAgIHRhcmdldExhbmd1YWdlOiBzdHJpbmc7XG4gICAgdHJhY2tpbmdQYXlsb2FkOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICB9KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0KHtcbiAgY29uc3RydWN0c09wdGlvbnMsXG4gIGNvbnN0cmFpbnRzLFxuICBvblVwZGF0ZSA9ICgpID0+IHt9LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICByZXBvcnRUZWxlbWV0cnkgPSAoKSA9PiB7fSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbn06IEdldENvbmZpZykge1xuICBsb2dnZXIuZGVidWcoXG4gICAgYFN0YXJ0aW5nIGdldCwgcmVtb3Zpbmcgb3V0cHV0IGRpcmVjdG9yeTogJyR7Y29uc3RydWN0c09wdGlvbnMuY29kZU1ha2VyT3V0cHV0fSdgXG4gICk7XG4gIGF3YWl0IGZzLnJlbW92ZShjb25zdHJ1Y3RzT3B0aW9ucy5jb2RlTWFrZXJPdXRwdXQpO1xuICBjb25zdCBjb25zdHJ1Y3RzTWFrZXIgPSBuZXcgQ29uc3RydWN0c01ha2VyKFxuICAgIGNvbnN0cnVjdHNPcHRpb25zLFxuICAgIGNvbnN0cmFpbnRzIGFzIGNvbmZpZy5UZXJyYWZvcm1EZXBlbmRlbmN5Q29uc3RyYWludFtdLCAvLyBDb25zdHJ1Y3RzTWFrZXIgaGFuZGxlcyBib3RoIHN0cmluZyBhbmQgZXh0ZW5kZWQgZm9ybSwgYnV0IGlzIG5vdCBjb25zaXN0ZW50IHR5cGUgd2lzZVxuICAgIHJlcG9ydFRlbGVtZXRyeVxuICApO1xuICBvblVwZGF0ZShHZXRTdGF0dXMuRE9XTkxPQURJTkcpO1xuICBsb2dnZXIuZGVidWcoXCJHZW5lcmF0aW5nIHByb3ZpZGVyIGJpbmRpbmdzXCIpO1xuICBhd2FpdCBjb25zdHJ1Y3RzTWFrZXIuZ2VuZXJhdGUoKTtcbiAgbG9nZ2VyLmRlYnVnKFwiUHJvdmlkZXIgYmluZGluZ3MgZ2VuZXJhdGVkXCIpO1xuXG4gIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoY29uc3RydWN0c09wdGlvbnMuY29kZU1ha2VyT3V0cHV0KSkpIHtcbiAgICBvblVwZGF0ZShHZXRTdGF0dXMuRVJST1IpO1xuICAgIGxvZ2dlci5kZWJ1ZyhcIkZhaWxlZCB0byBnZW5lcmF0ZSBwcm92aWRlciBiaW5kaW5nc1wiKTtcbiAgfSBlbHNlIHtcbiAgICBvblVwZGF0ZShHZXRTdGF0dXMuRE9ORSk7XG4gICAgbG9nZ2VyLmRlYnVnKFwiUHJvdmlkZXIgYmluZGluZ3MgZ2VuZXJhdGVkXCIpO1xuICB9XG59XG4iXX0=