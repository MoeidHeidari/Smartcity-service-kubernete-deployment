"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageManager = void 0;
const provider_generator_1 = require("@cdktf/provider-generator");
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const util_1 = require("../util");
const xml_js_1 = require("xml-js");
const errors_1 = require("../errors");
const fs = __importStar(require("fs-extra"));
/**
 * manages installing, updating, and removing dependencies
 * in the package system used by the target language of a CDKTF
 * project
 */
class PackageManager {
    constructor(workingDirectory) {
        this.workingDirectory = workingDirectory;
    }
    static forLanguage(language, workingDirectory) {
        switch (language) {
            case provider_generator_1.Language.GO:
                return new GoPackageManager(workingDirectory);
            case provider_generator_1.Language.TYPESCRIPT:
                return new NodePackageManager(workingDirectory);
            case provider_generator_1.Language.PYTHON:
                return new PythonPackageManager(workingDirectory);
            case provider_generator_1.Language.CSHARP:
                return new NugetPackageManager(workingDirectory);
            case provider_generator_1.Language.JAVA:
                return new MavenPackageManager(workingDirectory);
            default:
                throw new Error(`Unknown language: ${language}`);
        }
    }
}
exports.PackageManager = PackageManager;
class NodePackageManager extends PackageManager {
    hasYarnLockfile() {
        return fs_extra_1.existsSync(path_1.default.join(this.workingDirectory, "yarn.lock"));
    }
    async addPackage(packageName, packageVersion) {
        console.log(`Adding package ${packageName} @ ${packageVersion}`);
        // probe for package-lock.json or yarn.lock
        let command = "npm";
        let args = ["install"];
        if (this.hasYarnLockfile()) {
            command = "yarn";
            args = ["add"];
        }
        args.push(packageVersion ? packageName + "@" + packageVersion : packageName);
        console.log(`Installing package ${packageName} @ ${packageVersion} using ${command}.`);
        await util_1.exec(command, args, { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
}
class PythonPackageManager extends PackageManager {
    get appCommand() {
        try {
            return JSON.parse(fs.readFileSync(path_1.default.resolve(this.workingDirectory, "cdktf.json"), "utf8"))["app"];
        }
        catch (e) {
            throw errors_1.Errors.Usage(`Could not find find and parse cdktf.json in ${this.workingDirectory}`);
        }
    }
    async addPackage(packageName, packageVersion) {
        const usePipenv = this.appCommand.includes("pipenv");
        if (usePipenv) {
            console.log(`Installing package ${packageName} @ ${packageVersion} using pipenv.`);
            await util_1.exec("pipenv", ["install", `${packageName}~=${packageVersion}`], {
                cwd: this.workingDirectory,
                env: {
                    ...process.env,
                    PIPENV_QUIET: "1",
                },
                stdio: ["inherit", 1, 1],
            });
            console.log("Package installed.");
        }
        else {
            console.log(`Installing package ${packageName} @ ${packageVersion} using pip.`);
            const requirementsFilePath = path_1.default.join(this.workingDirectory, "requirements.txt");
            if (!fs.existsSync(requirementsFilePath)) {
                throw errors_1.Errors.Usage(`Could not find requirements.txt in ${this.workingDirectory}`);
            }
            const requirements = await fs.readFile(requirementsFilePath, "utf8");
            if (requirements.includes(packageName)) {
                console.log(`Package ${packageName} already installed. Skipping installation.`);
                return;
            }
            const newRequirements = requirements +
                `\n${packageName}${packageVersion ? `~=${packageVersion}` : ""}`;
            await fs.writeFile(requirementsFilePath, newRequirements, "utf8");
            await util_1.exec("pip", ["install", "-r", "requirements.txt"], {
                cwd: this.workingDirectory,
                stdio: ["inherit", 1, 1],
            });
            console.log("Package installed.");
        }
    }
}
class NugetPackageManager extends PackageManager {
    async addPackage(packageName, packageVersion) {
        const command = "dotnet";
        const args = ["add", "package", packageName];
        if (packageVersion) {
            args.push("--version", packageVersion);
        }
        console.log(`Installing package ${packageName} @ ${packageVersion} using "${command} ${args.join(" ")}".`);
        await util_1.exec(command, args, { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
}
class MavenPackageManager extends PackageManager {
    async addPackage(packageName, packageVersion = "LATEST" // the latest option is deprecated in maven 3.5
    ) {
        var _a, _b, _c, _d, _e;
        console.log(`Adding ${packageName} @ ${packageVersion} to pom.xml`);
        // Assert pom.xml exists
        const pomPath = path_1.default.join(this.workingDirectory, "pom.xml");
        if (!fs_extra_1.existsSync(pomPath)) {
            throw errors_1.Errors.Usage("No pom.xml found in current working directory. Please run the command from the root of your project.");
        }
        const pom = await fs.readFile(pomPath, "utf8");
        const pomXml = (await xml_js_1.xml2js(pom, {}));
        // Mutate dependencies
        const nameParts = packageName.split(".");
        const groupId = nameParts.slice(0, nameParts.length - 1).join(".");
        const artifactId = nameParts[nameParts.length - 1];
        const newDependency = (await xml_js_1.xml2js(`<dependency>
    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <version>${packageVersion}</version>
</dependency>`));
        (_e = (_d = (_c = (_b = (_a = pomXml.elements) === null || _a === void 0 ? void 0 : _a.find((el) => el.name === "project")) === null || _b === void 0 ? void 0 : _b.elements) === null || _c === void 0 ? void 0 : _c.find((el) => el.name === "dependencies")) === null || _d === void 0 ? void 0 : _d.elements) === null || _e === void 0 ? void 0 : _e.push(newDependency.elements[0]);
        // Write new pom.xml
        await fs.writeFile(pomPath, xml_js_1.js2xml(pomXml, { spaces: 2 }));
        // Install
        await util_1.exec("mvn", ["install"], { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
}
class GoPackageManager extends PackageManager {
    async addPackage(packageName, packageVersion) {
        console.log(`Adding package ${packageName} @ ${packageVersion}`);
        // Install
        await util_1.exec("go", ["get", packageName], { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
}
//# sourceMappingURL=data:application/json;base64,