"use strict";
// TODO: introduce caching for the calls to NPM
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrebuiltProviderVersion = exports.getNpmPackageName = void 0;
const https_proxy_agent_1 = require("https-proxy-agent");
const node_fetch_1 = __importDefault(require("node-fetch"));
const semver = __importStar(require("semver"));
const logging_1 = require("../logging");
const dependency_manager_1 = require("./dependency-manager");
const version_constraints_1 = require("./version-constraints");
const proxy = process.env.http_proxy || process.env.HTTP_PROXY;
let agent;
if (proxy) {
    agent = new https_proxy_agent_1.HttpsProxyAgent(proxy);
}
// uses https://github.com/hashicorp/cdktf-repository-manager/blob/main/provider.json
const providersMapUrl = `https://raw.githubusercontent.com/hashicorp/cdktf-repository-manager/main/provider.json`;
async function getNpmPackageName(constraint) {
    const providers = (await (await node_fetch_1.default(providersMapUrl, {
        agent,
        headers: { "User-Agent": "HashiCorp/cdktf-cli" },
    })).json());
    const entry = Object.entries(providers).find(([, p]) => dependency_manager_1.ProviderConstraint.fromConfigEntry(p).source === constraint.source);
    if (!entry) {
        return undefined; // no pre-built provider found for this constraint
    }
    const name = entry[0];
    return `@cdktf/provider-${name}`;
}
exports.getNpmPackageName = getNpmPackageName;
async function getPrebuiltProviderVersions(packageName) {
    const url = `https://registry.npmjs.org/${packageName}`;
    const result = (await (await node_fetch_1.default(url, {
        agent,
        headers: { "User-Agent": "HashiCorp/cdktf-cli" },
    })).json()); // TODO: handle 404 and other errors (abort on other errors)
    const versions = Object.entries(result.versions)
        .map(([version, packageJson]) => {
        var _a, _b;
        const provider = (_a = packageJson.cdktf) === null || _a === void 0 ? void 0 : _a.provider;
        if (!provider || !((_b = packageJson.peerDependencies) === null || _b === void 0 ? void 0 : _b.cdktf)) {
            logging_1.logger.trace(`skipping version ${version} of ${packageName} as it does not have a cdktf.provider or peerDependencies.cdktf in package.json`);
            return undefined;
        }
        return {
            packageVersion: version,
            providerVersion: provider.version,
            cdktfPeerDependencyConstraint: packageJson.peerDependencies.cdktf,
        };
    })
        .filter((v) => v !== undefined);
    // latest version first, sorted by packageVersion as that
    // one always increases while the providerVersion may not
    versions.sort((a, b) => {
        if (semver.gt(a.packageVersion, b.packageVersion)) {
            return -1;
        }
        if (semver.lt(a.packageVersion, b.packageVersion)) {
            return 1;
        }
        return 0;
    });
    return versions;
}
function cdktfVersionMatches(cdktfVersion, cdktfPeerDependencyConstraint) {
    return semver.satisfies(cdktfVersion, cdktfPeerDependencyConstraint);
}
async function getPrebuiltProviderVersion(constraint, cdktfVersion) {
    const providerName = await getNpmPackageName(constraint); // TODO: add lots of debug logs to this call
    // no pre-built provider exists
    if (!providerName) {
        return null;
    }
    const versions = await getPrebuiltProviderVersions(providerName);
    // find first the version that matches the requested provider version and cdktf version
    const matchingVersion = versions.find((v) => {
        if (!cdktfVersionMatches(cdktfVersion, v.cdktfPeerDependencyConstraint)) {
            return false; // skip if cdktf version does not match
        }
        if (constraint.version) {
            return version_constraints_1.versionMatchesConstraint(v.providerVersion, constraint.version);
        }
        return true; // if no version constraint is passed, return true on the first match
    });
    if (matchingVersion) {
        return matchingVersion.packageVersion;
    }
    return null;
}
exports.getPrebuiltProviderVersion = getPrebuiltProviderVersion;
//# sourceMappingURL=data:application/json;base64,