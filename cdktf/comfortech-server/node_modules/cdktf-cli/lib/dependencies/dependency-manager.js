"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyManager = exports.ProviderConstraint = void 0;
const provider_generator_1 = require("@cdktf/provider-generator");
const codemaker_1 = require("codemaker");
const errors_1 = require("../errors");
const logging_1 = require("../logging");
const cdktf_config_manager_1 = require("./cdktf-config-manager");
const package_manager_1 = require("./package-manager");
const prebuilt_providers_1 = require("./prebuilt-providers");
const registry_api_1 = require("./registry-api");
const version_constraints_1 = require("./version-constraints");
const semver = __importStar(require("semver"));
// ref: https://www.terraform.io/language/providers/requirements#source-addresses
const DEFAULT_HOSTNAME = "registry.terraform.io";
const DEFAULT_NAMESPACE = "hashicorp";
function normalizeProviderSource(source) {
    // returns <HOSTNAME>/<NAMESPACE>/<TYPE>
    const slashes = source.split("/").length - 1;
    switch (slashes) {
        case 0:
            return `${DEFAULT_HOSTNAME}/${DEFAULT_NAMESPACE}/${source}`;
        case 1:
            return `${DEFAULT_HOSTNAME}/${source}`;
        default:
            return source;
    }
}
class ProviderConstraint {
    // TODO: add examples to cli command description (i.e. =,~>.> etc.)
    // if no version constraint is specified, we assume the latest version
    // if specific version is specified without e.g. =, we allow patch level increments (e.g. ~>2.12 for "2.12")
    constructor(source, version) {
        this.version = version;
        this.source = normalizeProviderSource(source);
    }
    static fromConfigEntry(provider) {
        if (typeof provider === "string") {
            const [src, version] = provider.split("@");
            return new ProviderConstraint(src.trim(), version ? version.trim() : undefined);
        }
        const src = (provider.namespace ? `${provider.namespace}/` : "") +
            (provider.source || provider.name);
        return new ProviderConstraint(src, provider.version);
    }
    isFromTerraformRegistry() {
        return this.hostname === DEFAULT_HOSTNAME;
    }
    /**
     * the namespace of the provider
     * e.g. "hashicorp" or "kreuzwerker"
     */
    get namespace() {
        return this.source.split("/")[1];
    }
    /**
     * the name of the provider
     * e.g. "aws"
     */
    get name() {
        return this.source.split("/")[2];
    }
    /**
     * the hostname of the provider
     * e.g. "registry.terraform.io"
     */
    get hostname() {
        return this.source.split("/")[0];
    }
    /**
     * returns a simplified provider name, dropping namespace and hostname
     * if they match the defaults
     */
    get simplifiedName() {
        return this.source
            .split("/")
            .filter((part) => part !== DEFAULT_HOSTNAME && part !== DEFAULT_NAMESPACE)
            .join("/");
    }
    /**
     * checks if the version constraint matches the given version
     * @param version an actual version (e.g. "4.12.1")
     * @returns true if the version is compatible with the constraint
     */
    matchesVersion(version) {
        if (this.version) {
            return version_constraints_1.versionMatchesConstraint(version, this.version);
        }
        return true;
    }
    toString() {
        return `${this.source}${this.version ? `@ ${this.version}` : ""}`;
    }
}
exports.ProviderConstraint = ProviderConstraint;
/**
 * manages dependencies of a CDKTF project (e.g. terraform providers)
 */
class DependencyManager {
    constructor(targetLanguage, cdktfVersion, projectDirectory) {
        this.targetLanguage = targetLanguage;
        this.cdktfVersion = cdktfVersion;
        this.projectDirectory = projectDirectory;
        this.packageManager = package_manager_1.PackageManager.forLanguage(targetLanguage, this.projectDirectory);
    }
    async addProvider(constraint) {
        if (await this.hasPrebuiltProvider(constraint)) {
            await this.addPrebuiltProvider(constraint);
            return { addedLocalProvider: false };
        }
        else {
            await this.addLocalProvider(constraint);
            return { addedLocalProvider: true };
        }
    }
    async hasPrebuiltProvider(constraint) {
        logging_1.logger.debug(`determining whether pre-built provider exists for ${constraint.source} with version constraint ${constraint.version} and cdktf version ${this.cdktfVersion}`);
        console.log(`Checking whether pre-built provider exists for the following constraints:
  provider: ${constraint.simplifiedName}
  version : ${constraint.version || "latest"}
  language: ${this.targetLanguage}
  cdktf   : ${this.cdktfVersion}
`);
        if (this.targetLanguage === provider_generator_1.Language.GO &&
            semver.lt(this.cdktfVersion, "0.12.0")) {
            console.log(`Before CDKTF 0.12.0 there were no pre-built providers published for Go.`);
            return false;
        }
        const v = await prebuilt_providers_1.getPrebuiltProviderVersion(constraint, this.cdktfVersion);
        const exists = v !== null;
        if (exists) {
            console.log(`Found pre-built provider.`);
        }
        else {
            console.log(`Pre-built provider does not exist for the given constraints.`);
        }
        return exists;
    }
    async addPrebuiltProvider(constraint) {
        logging_1.logger.debug(`adding pre-built provider ${constraint.source} with version constraint ${constraint.version} for cdktf version ${this.cdktfVersion}`);
        const npmPackageName = await prebuilt_providers_1.getNpmPackageName(constraint);
        if (!npmPackageName) {
            throw errors_1.Errors.Usage(`Could not find pre-built provider for ${constraint.source}`);
        }
        const packageName = this.convertPackageName(npmPackageName);
        const prebuiltProviderVersion = await prebuilt_providers_1.getPrebuiltProviderVersion(constraint, this.cdktfVersion);
        if (!prebuiltProviderVersion) {
            throw errors_1.Errors.Usage(`No pre-built provider found for ${constraint.source} with version constraint ${constraint.version} and cdktf version ${this.cdktfVersion}`);
        }
        const packageVersion = prebuiltProviderVersion;
        await this.packageManager.addPackage(packageName, packageVersion);
        // TODO: more debug logs
    }
    async addLocalProvider(constraint) {
        console.log(`Adding local provider ${constraint.source} with version constraint ${constraint.version} to cdktf.json`);
        if (!constraint.version && constraint.isFromTerraformRegistry()) {
            const v = await registry_api_1.getLatestVersion(constraint);
            if (v) {
                constraint = new ProviderConstraint(constraint.source, 
                // "1.3.2" -> "~> 1.3"
                `~> ${v.split(".").slice(0, 2).join(".")}`);
            }
            else {
                throw errors_1.Errors.Usage(`Could not find a version for the provider '${constraint}' in the public registry. This could be due to a typo, please take a look at https://cdk.tf/registry-providers to find all supported providers.`);
            }
        }
        await new cdktf_config_manager_1.CdktfConfigManager().addProvider(constraint);
    }
    /**
     * Converts an NPM package name of a pre-built provider package to the name in the target language
     */
    convertPackageName(name) {
        const providerName = name.replace("@cdktf/provider-", "");
        switch (this.targetLanguage) {
            case provider_generator_1.Language.GO: // e.g. github.com/hashicorp/cdktf-provider-opentelekomcloud-go/opentelekomcloud
                return `github.com/hashicorp/cdktf-provider-${providerName}-go/${providerName}`;
            case provider_generator_1.Language.TYPESCRIPT: // e.g. @cdktf/provider-random
                return name; // already the correct name
            case provider_generator_1.Language.CSHARP: // e.g. HashiCorp.Cdktf.Providers.Opentelekomcloud
                return `HashiCorp.Cdktf.Providers.` + codemaker_1.toPascalCase(providerName);
            case provider_generator_1.Language.JAVA: // e.g. com.hashicorp.opentelekomcloud
                return `com.hashicorp.cdktf-provider-${providerName}`;
            case provider_generator_1.Language.PYTHON: // e.g. cdktf-cdktf-provider-opentelekomcloud
                return `cdktf-cdktf-provider-${providerName}`;
            default:
                throw new Error(`converting package name for language ${this.targetLanguage} not implemented yet`);
        }
    }
}
exports.DependencyManager = DependencyManager;
//# sourceMappingURL=data:application/json;base64,