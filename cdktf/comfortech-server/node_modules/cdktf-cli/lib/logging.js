"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logFileName = exports.processLoggerError = exports.processLoggerDebug = exports.logger = void 0;
const log4js_1 = require("log4js");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const Sentry = __importStar(require("@sentry/node"));
const provider_generator_1 = require("@cdktf/provider-generator");
const hcl2cdk_1 = require("@cdktf/hcl2cdk");
const cliLogger = log4js_1.getLogger();
const logger = {
    trace(message, ...args) {
        cliLogger.trace(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Debug,
        });
    },
    debug(message, ...args) {
        cliLogger.debug(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Debug,
        });
    },
    info(message, ...args) {
        cliLogger.info(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Info,
        });
    },
    warn(message, ...args) {
        cliLogger.warn(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Warning,
        });
    },
    error(message, ...args) {
        cliLogger.error(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Error,
        });
    },
    fatal(message, ...args) {
        cliLogger.fatal(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: Sentry.Severity.Critical,
        });
    },
};
exports.logger = logger;
cliLogger.level = process.env.CDKTF_LOG_LEVEL || "INFO";
const logFileName = "cdktf.log";
exports.logFileName = logFileName;
if (process.env.CDKTF_LOG_FILE_DIRECTORY &&
    fs.existsSync(process.env.CDKTF_LOG_FILE_DIRECTORY) &&
    fs.statSync(process.env.CDKTF_LOG_FILE_DIRECTORY).isDirectory()) {
    log4js_1.configure({
        appenders: {
            cdktf: {
                type: "file",
                filename: path.join(process.env.CDKTF_LOG_FILE_DIRECTORY, logFileName),
            },
        },
        categories: { default: { appenders: ["cdktf"], level: "debug" } },
    });
}
const processLoggerDebug = (chunk) => {
    logger.debug(chunk.toString());
};
exports.processLoggerDebug = processLoggerDebug;
const processLoggerError = (chunk) => {
    logger.error(chunk.toString());
};
exports.processLoggerError = processLoggerError;
// We have this mechanism to allow loggers from sub-packages to hook into this logging mechanism
hcl2cdk_1.setLogger(logger);
provider_generator_1.setLogger(logger);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1DQUE4QztBQUM5Qyw2Q0FBK0I7QUFDL0IsMkNBQTZCO0FBQzdCLHFEQUF1QztBQUV2QyxrRUFBb0Y7QUFDcEYsNENBQTJEO0FBRTNELE1BQU0sU0FBUyxHQUFHLGtCQUFTLEVBQUUsQ0FBQztBQUM5QixNQUFNLE1BQU0sR0FBRztJQUNiLEtBQUssQ0FBQyxPQUFZLEVBQUUsR0FBRyxJQUFXO1FBQ2hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQztZQUNuQixPQUFPO1lBQ1AsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSztTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQVksRUFBRSxHQUFHLElBQVc7UUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ25CLE9BQU87WUFDUCxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUMvQixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkIsT0FBTztZQUNQLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUk7U0FDNUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFZLEVBQUUsR0FBRyxJQUFXO1FBQy9CLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLGFBQWEsQ0FBQztZQUNuQixPQUFPO1lBQ1AsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTztTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQVksRUFBRSxHQUFHLElBQVc7UUFDaEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ25CLE9BQU87WUFDUCxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUNoQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkIsT0FBTztZQUNQLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVE7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUM7QUFnQ08sd0JBQU07QUE5QmYsU0FBUyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUM7QUFDeEQsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBNkJ5QixrQ0FBVztBQTNCcEUsSUFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QjtJQUNwQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7SUFDbkQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUMsV0FBVyxFQUFFLEVBQy9EO0lBQ0Esa0JBQVMsQ0FBQztRQUNSLFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLFdBQVcsQ0FBQzthQUN2RTtTQUNGO1FBQ0QsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO0tBQ2xFLENBQUMsQ0FBQztDQUNKO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQW1DLEVBQUUsRUFBRTtJQUNqRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQVNlLGdEQUFrQjtBQVJuQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBbUMsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBTW1DLGdEQUFrQjtBQUp2RCxnR0FBZ0c7QUFDaEcsbUJBQVksQ0FBQyxNQUFhLENBQUMsQ0FBQztBQUM1Qiw4QkFBMEIsQ0FBQyxNQUFhLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3VyZSwgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZzRqc1wiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuXG5pbXBvcnQgeyBzZXRMb2dnZXIgYXMgc2V0UHJvdmlkZXJHZW5lcmF0b3JMb2dnZXIgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgc2V0TG9nZ2VyIGFzIHNldEhjbExvZ2dlciB9IGZyb20gXCJAY2RrdGYvaGNsMmNka1wiO1xuXG5jb25zdCBjbGlMb2dnZXIgPSBnZXRMb2dnZXIoKTtcbmNvbnN0IGxvZ2dlciA9IHtcbiAgdHJhY2UobWVzc2FnZTogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNsaUxvZ2dlci50cmFjZShtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBTZW50cnkuYWRkQnJlYWRjcnVtYih7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbGV2ZWw6IFNlbnRyeS5TZXZlcml0eS5EZWJ1ZyxcbiAgICB9KTtcbiAgfSxcblxuICBkZWJ1ZyhtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLmRlYnVnKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogU2VudHJ5LlNldmVyaXR5LkRlYnVnLFxuICAgIH0pO1xuICB9LFxuXG4gIGluZm8obWVzc2FnZTogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNsaUxvZ2dlci5pbmZvKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogU2VudHJ5LlNldmVyaXR5LkluZm8sXG4gICAgfSk7XG4gIH0sXG5cbiAgd2FybihtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLndhcm4obWVzc2FnZSwgLi4uYXJncyk7XG4gICAgU2VudHJ5LmFkZEJyZWFkY3J1bWIoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIGxldmVsOiBTZW50cnkuU2V2ZXJpdHkuV2FybmluZyxcbiAgICB9KTtcbiAgfSxcblxuICBlcnJvcihtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLmVycm9yKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogU2VudHJ5LlNldmVyaXR5LkVycm9yLFxuICAgIH0pO1xuICB9LFxuXG4gIGZhdGFsKG1lc3NhZ2U6IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgICBjbGlMb2dnZXIuZmF0YWwobWVzc2FnZSwgLi4uYXJncyk7XG4gICAgU2VudHJ5LmFkZEJyZWFkY3J1bWIoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIGxldmVsOiBTZW50cnkuU2V2ZXJpdHkuQ3JpdGljYWwsXG4gICAgfSk7XG4gIH0sXG59O1xuXG5jbGlMb2dnZXIubGV2ZWwgPSBwcm9jZXNzLmVudi5DREtURl9MT0dfTEVWRUwgfHwgXCJJTkZPXCI7XG5jb25zdCBsb2dGaWxlTmFtZSA9IFwiY2RrdGYubG9nXCI7XG5cbmlmIChcbiAgcHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZICYmXG4gIGZzLmV4aXN0c1N5bmMocHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZKSAmJlxuICBmcy5zdGF0U3luYyhwcm9jZXNzLmVudi5DREtURl9MT0dfRklMRV9ESVJFQ1RPUlkpLmlzRGlyZWN0b3J5KClcbikge1xuICBjb25maWd1cmUoe1xuICAgIGFwcGVuZGVyczoge1xuICAgICAgY2RrdGY6IHtcbiAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZLCBsb2dGaWxlTmFtZSksXG4gICAgICB9LFxuICAgIH0sXG4gICAgY2F0ZWdvcmllczogeyBkZWZhdWx0OiB7IGFwcGVuZGVyczogW1wiY2RrdGZcIl0sIGxldmVsOiBcImRlYnVnXCIgfSB9LFxuICB9KTtcbn1cblxuY29uc3QgcHJvY2Vzc0xvZ2dlckRlYnVnID0gKGNodW5rOiBCdWZmZXIgfCBzdHJpbmcgfCBVaW50OEFycmF5KSA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhjaHVuay50b1N0cmluZygpKTtcbn07XG5jb25zdCBwcm9jZXNzTG9nZ2VyRXJyb3IgPSAoY2h1bms6IEJ1ZmZlciB8IHN0cmluZyB8IFVpbnQ4QXJyYXkpID0+IHtcbiAgbG9nZ2VyLmVycm9yKGNodW5rLnRvU3RyaW5nKCkpO1xufTtcblxuLy8gV2UgaGF2ZSB0aGlzIG1lY2hhbmlzbSB0byBhbGxvdyBsb2dnZXJzIGZyb20gc3ViLXBhY2thZ2VzIHRvIGhvb2sgaW50byB0aGlzIGxvZ2dpbmcgbWVjaGFuaXNtXG5zZXRIY2xMb2dnZXIobG9nZ2VyIGFzIGFueSk7XG5zZXRQcm92aWRlckdlbmVyYXRvckxvZ2dlcihsb2dnZXIgYXMgYW55KTtcblxuZXhwb3J0IHsgbG9nZ2VyLCBwcm9jZXNzTG9nZ2VyRGVidWcsIHByb2Nlc3NMb2dnZXJFcnJvciwgbG9nRmlsZU5hbWUgfTtcbiJdfQ==