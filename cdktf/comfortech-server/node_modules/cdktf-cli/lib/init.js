"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineDeps = exports.init = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const utilities_1 = require("../bin/cmds/helper/utilities");
const errors_1 = require("./errors");
const sscaff_1 = require("sscaff");
const features_1 = require("cdktf/lib/features");
const pkg = utilities_1.readPackageJson();
const constructsVersion = pkg.dependencies.constructs;
async function init({ cdktfVersion, destination, dist, projectId, projectInfo, templatePath, sendCrashReports, }) {
    const deps = await determineDeps(cdktfVersion, dist);
    const futureFlags = Object.entries(features_1.FUTURE_FLAGS)
        .map(([key, value]) => `    "${key}": "${value}"`)
        .join(`,\n`);
    await sscaff_1.sscaff(templatePath, destination, {
        ...deps,
        ...projectInfo,
        futureFlags,
        projectId,
        sendCrashReports,
    });
}
exports.init = init;
async function determineDeps(version = pkg.version, dist) {
    // TS: cdktf-0.10.1-dev.2160938258
    // Py: cdktf-0.10.1.dev1658821493.tar.gz
    const pythonVersion = version
        .replace(/-pre\./g, ".dev")
        .replace(/-dev\./g, ".dev");
    if (dist) {
        const ret = {
            npm_cdktf: path.resolve(dist, "js", `cdktf@${version}.jsii.tgz`),
            npm_cdktf_cli: path.resolve(dist, "js", `cdktf-cli-${version}.tgz`),
            pypi_cdktf: path.resolve(dist, "python", `cdktf-${pythonVersion}.tar.gz`),
            mvn_cdktf: path.resolve(dist, "java", `com/hashicorp/cdktf/${version}/cdktf-${version}.jar`),
            nuget_cdktf: path.resolve(dist, "dotnet", `HashiCorp.Cdktf.${version}.nupkg`),
            go_cdktf: path.resolve(dist, "go", `cdktf`),
        };
        for (const file of Object.values(ret)) {
            if (!(await fs.pathExists(file))) {
                throw errors_1.Errors.Internal(`unable to find ${file} under the "dist" directory (${dist})`, { version });
            }
        }
        const versions = {
            cdktf_version: version,
            constructs_version: constructsVersion,
        };
        return {
            ...ret,
            ...versions,
        };
    }
    if (version === "0.0.0") {
        throw errors_1.Errors.Usage(`cannot use version 0.0.0, use --cdktf-version, --dist or CDKTF_DIST to install from a "dist" directory`, {});
    }
    // determine if we want a specific pinned version or a version range we take
    // a pinned version if version includes a hyphen which means it is a
    // pre-release (e.g. "0.12.0-pre.e6834d3"). otherwise, we require a caret
    // version.
    const ver = version.includes("-") ? version : `^${version}`;
    return {
        cdktf_version: version,
        constructs_version: constructsVersion,
        npm_cdktf: `cdktf@${ver}`,
        npm_cdktf_cli: `cdktf-cli@${ver}`,
        pypi_cdktf: `cdktf~=${pythonVersion}`,
        mvn_cdktf: version,
        nuget_cdktf: version,
        go_cdktf: `v${version}`,
    };
}
exports.determineDeps = determineDeps;
//# sourceMappingURL=data:application/json;base64,