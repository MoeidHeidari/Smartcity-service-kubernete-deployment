"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.captureException = exports.initializErrorReporting = exports.askForCrashReportingConsent = exports.persistReportCrashReportDecision = exports.shouldReportCrash = void 0;
const Sentry = __importStar(require("@sentry/node"));
const checkpoint_1 = require("./checkpoint");
const debug_1 = require("./debug");
const logging_1 = require("./logging");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const ci_detect_1 = __importDefault(require("@npmcli/ci-detect"));
const inquirer_1 = __importDefault(require("inquirer"));
const version_1 = require("./version");
function shouldReportCrash(projectPath = process.cwd()) {
    try {
        const cdktfJson = JSON.parse(fs.readFileSync(path.resolve(projectPath, "cdktf.json"), "utf8"));
        return typeof cdktfJson.sendCrashReports === "boolean"
            ? cdktfJson.sendCrashReports
            : cdktfJson.sendCrashReports === "true";
    }
    catch (e) {
        logging_1.logger.debug(`Error determining if crash reporting should be enabled, defaulting to false: ${e}`);
        return false;
    }
}
exports.shouldReportCrash = shouldReportCrash;
function persistReportCrashReportDecision(decision, projectPath = process.cwd()) {
    const cdktfJson = JSON.parse(fs.readFileSync(path.resolve(projectPath, "cdktf.json"), "utf8"));
    cdktfJson.sendCrashReports = decision;
    fs.writeFileSync(path.resolve(projectPath, "cdktf.json"), JSON.stringify(cdktfJson, null, 2));
}
exports.persistReportCrashReportDecision = persistReportCrashReportDecision;
async function askForCrashReportingConsent() {
    const answer = await inquirer_1.default.prompt({
        name: "reportCrash",
        message: "Do you want to send crash reports to the CDKTF team? See https://www.terraform.io/cdktf/create-and-deploy/configuration-file#enable-crash-reporting-for-the-cli for more information",
        type: "confirm",
        default: true,
    });
    return answer.reportCrash;
}
exports.askForCrashReportingConsent = askForCrashReportingConsent;
function isPromise(p) {
    return (typeof p === "object" &&
        typeof p.then === "function" &&
        typeof p.catch === "function");
}
async function initializErrorReporting(askForConsent = false) {
    let shouldReport = shouldReportCrash();
    const ci = ci_detect_1.default();
    // We have no info yet, so we need to ask the user
    if (shouldReport === undefined && askForConsent) {
        // But only if it's a user
        if (ci) {
            return;
        }
        shouldReport = await askForCrashReportingConsent();
        persistReportCrashReportDecision(shouldReport);
    }
    if (!shouldReport) {
        logging_1.logger.debug("Error reporting disabled");
        return;
    }
    if (!process.env.SENTRY_DSN) {
        logging_1.logger.info("Error reporting disabled: SENTRY_DSN not set");
        return;
    }
    logging_1.logger.debug("Initializing error reporting");
    Sentry.init({
        autoSessionTracking: true,
        dsn: process.env.SENTRY_DSN,
        release: `cdktf-cli-${version_1.DISPLAY_VERSION}`,
        async beforeSend(event, hint) {
            if (!hint) {
                return event;
            }
            // The promise character is not documented, but it happens
            const originalException = hint.originalException;
            let error;
            if (isPromise(originalException)) {
                originalException.catch((e) => (error = e));
                await Promise.allSettled([originalException]);
            }
            else {
                error = originalException;
            }
            const errorMessage = (error === null || error === void 0 ? void 0 : error.toString()) || "";
            if (errorMessage.includes("Usage Error")) {
                // This is a usage error, so we don't want to report it
                return null;
            }
            return event;
        },
    });
    Sentry.configureScope(function (scope) {
        scope.setUser({
            id: checkpoint_1.getUserId(),
        });
        scope.setTag("projectId", checkpoint_1.getProjectId());
    });
    logging_1.logger.debug("Collecting environment information for error reporting");
    debug_1.collectDebugInformation().then((debugOutput) => {
        Sentry.setContext("environment", debugOutput);
    });
}
exports.initializErrorReporting = initializErrorReporting;
function captureException({ message, type, command, context, }) {
    if (process.env.SENTRY_DSN && shouldReportCrash()) {
        Sentry.captureException(new Error(message), {
            tags: {
                context: JSON.stringify(context),
                type,
                command,
            },
        });
    }
}
exports.captureException = captureException;
//# sourceMappingURL=data:application/json;base64,