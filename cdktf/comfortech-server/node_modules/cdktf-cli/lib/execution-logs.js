"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEnhanceLogMessage = void 0;
const logging_1 = require("./logging");
function createEnhanceLogMessage(stack) {
    // we never want to throw, if it does not work we just do as if it did not happen
    const pathMapping = {};
    try {
        const json = JSON.parse(stack.content);
        ["data", "resource"].forEach((type) => {
            Object.entries(json[type] || {}).forEach(([resourceType, resourceInstances]) => {
                Object.entries(resourceInstances || {}).forEach(([resourceName, resource]) => {
                    // Some constructs don't have this metadata
                    if (resource["//"] &&
                        resource["//"].metadata &&
                        resource["//"].metadata.path) {
                        pathMapping[`${resourceType}.${resourceName}`] = resource["//"].metadata.path.replace(`${stack.name}/`, "");
                    }
                });
            });
        });
    }
    catch (e) {
        logging_1.logger.debug(`Could not enhance log message: ${e}`);
    }
    return (message) => {
        return message
            .split("\n")
            .map((line) => {
            const matchingEntry = Object.entries(pathMapping).find(([tfIdentifier]) => line.includes(tfIdentifier));
            if (!matchingEntry) {
                return line;
            }
            const [id, cdkPath] = matchingEntry;
            return line.replace(id, `${id} (${cdkPath})`);
        })
            .join("\n");
    };
}
exports.createEnhanceLogMessage = createEnhanceLogMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0aW9uLWxvZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleGVjdXRpb24tbG9ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBbUM7QUFvQm5DLFNBQWdCLHVCQUF1QixDQUNyQyxLQUF1QjtJQUV2QixpRkFBaUY7SUFDakYsTUFBTSxXQUFXLEdBQTRDLEVBQUUsQ0FBQztJQUNoRSxJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFXLENBQUM7UUFFakQsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBMkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDN0QsQ0FBQyxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUM3QyxDQUFDLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUU7b0JBQzNCLDJDQUEyQztvQkFDM0MsSUFDRSxRQUFRLENBQUMsSUFBSSxDQUFDO3dCQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO3dCQUN2QixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFDNUI7d0JBQ0EsV0FBVyxDQUFDLEdBQUcsWUFBWSxJQUFJLFlBQVksRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUN2RCxJQUFJLENBQ0wsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDL0M7Z0JBQ0gsQ0FBQyxDQUNGLENBQUM7WUFDSixDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLGdCQUFNLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JEO0lBRUQsT0FBTyxDQUFDLE9BQWUsRUFBRSxFQUFFO1FBQ3pCLE9BQU8sT0FBTzthQUNYLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDWCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNaLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUNwRCxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ2hELENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNsQixPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxhQUFhLENBQUM7WUFDcEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUM7QUFDSixDQUFDO0FBL0NELDBEQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCB7IFN5bnRoZXNpemVkU3RhY2sgfSBmcm9tIFwiLi9zeW50aC1zdGFja1wiO1xudHlwZSBURklkZW50aWZpZXIgPSBzdHJpbmc7XG50eXBlIENES1RGUmVzb3VyY2VQYXRoID0gc3RyaW5nO1xudHlwZSBUZlJlc291cmNlID0gUmVjb3JkPFxuICBzdHJpbmcsXG4gIHtcbiAgICBbXCIvL1wiXT86IHtcbiAgICAgIG1ldGFkYXRhPzoge1xuICAgICAgICBwYXRoPzogc3RyaW5nO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG4+O1xudHlwZSBUZlJlc291cmNlVHlwZSA9IFJlY29yZDxzdHJpbmcsIFRmUmVzb3VyY2U+O1xudHlwZSBURkpzb24gPSB7XG4gIGRhdGE6IFRmUmVzb3VyY2VUeXBlO1xuICByZXNvdXJjZTogVGZSZXNvdXJjZVR5cGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW5oYW5jZUxvZ01lc3NhZ2UoXG4gIHN0YWNrOiBTeW50aGVzaXplZFN0YWNrXG4pOiAobWVzc2FnZTogc3RyaW5nKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAvLyB3ZSBuZXZlciB3YW50IHRvIHRocm93LCBpZiBpdCBkb2VzIG5vdCB3b3JrIHdlIGp1c3QgZG8gYXMgaWYgaXQgZGlkIG5vdCBoYXBwZW5cbiAgY29uc3QgcGF0aE1hcHBpbmc6IFJlY29yZDxURklkZW50aWZpZXIsIENES1RGUmVzb3VyY2VQYXRoPiA9IHt9O1xuICB0cnkge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHN0YWNrLmNvbnRlbnQpIGFzIFRGSnNvbjtcblxuICAgIFtcImRhdGFcIiwgXCJyZXNvdXJjZVwiXS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhqc29uW3R5cGUgYXMgXCJkYXRhXCIgfCBcInJlc291cmNlXCJdIHx8IHt9KS5mb3JFYWNoKFxuICAgICAgICAoW3Jlc291cmNlVHlwZSwgcmVzb3VyY2VJbnN0YW5jZXNdKSA9PiB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMocmVzb3VyY2VJbnN0YW5jZXMgfHwge30pLmZvckVhY2goXG4gICAgICAgICAgICAoW3Jlc291cmNlTmFtZSwgcmVzb3VyY2VdKSA9PiB7XG4gICAgICAgICAgICAgIC8vIFNvbWUgY29uc3RydWN0cyBkb24ndCBoYXZlIHRoaXMgbWV0YWRhdGFcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHJlc291cmNlW1wiLy9cIl0gJiZcbiAgICAgICAgICAgICAgICByZXNvdXJjZVtcIi8vXCJdLm1ldGFkYXRhICYmXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VbXCIvL1wiXS5tZXRhZGF0YS5wYXRoXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHBhdGhNYXBwaW5nW2Ake3Jlc291cmNlVHlwZX0uJHtyZXNvdXJjZU5hbWV9YF0gPSByZXNvdXJjZVtcbiAgICAgICAgICAgICAgICAgIFwiLy9cIlxuICAgICAgICAgICAgICAgIF0ubWV0YWRhdGEucGF0aC5yZXBsYWNlKGAke3N0YWNrLm5hbWV9L2AsIFwiXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgQ291bGQgbm90IGVuaGFuY2UgbG9nIG1lc3NhZ2U6ICR7ZX1gKTtcbiAgfVxuXG4gIHJldHVybiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgLm1hcCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaGluZ0VudHJ5ID0gT2JqZWN0LmVudHJpZXMocGF0aE1hcHBpbmcpLmZpbmQoXG4gICAgICAgICAgKFt0ZklkZW50aWZpZXJdKSA9PiBsaW5lLmluY2x1ZGVzKHRmSWRlbnRpZmllcilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFtYXRjaGluZ0VudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2lkLCBjZGtQYXRoXSA9IG1hdGNoaW5nRW50cnk7XG4gICAgICAgIHJldHVybiBsaW5lLnJlcGxhY2UoaWQsIGAke2lkfSAoJHtjZGtQYXRofSlgKTtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlxcblwiKTtcbiAgfTtcbn1cbiJdfQ==