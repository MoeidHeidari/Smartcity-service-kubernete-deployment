"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformCloud = exports.TerraformCloudPlan = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const terraform_1 = require("./terraform");
const TerraformCloudClient = __importStar(require("@skorfmann/terraform-cloud"));
const archiver_1 = __importDefault(require("archiver"));
const stream_buffers_1 = require("stream-buffers");
const logging_1 = require("../logging");
const errors_1 = require("../errors");
const agent = __importStar(require("tunnel-agent"));
const url_1 = require("url");
class TerraformCloudPlan extends terraform_1.AbstractTerraformPlan {
    constructor(planFile, plan, url) {
        super(planFile, plan.resourceChanges, plan.outputChanges);
        this.planFile = planFile;
        this.plan = plan;
        this.url = url;
    }
}
exports.TerraformCloudPlan = TerraformCloudPlan;
const zipDirectory = (source) => {
    const archive = archiver_1.default("tar", { gzip: true });
    const stream = new stream_buffers_1.WritableStreamBuffer();
    return new Promise((resolve, reject) => {
        archive
            .directory(source, false)
            .on("error", (err) => reject(err))
            .on("end", () => resolve(stream.getContents()))
            .pipe(stream);
        archive.finalize();
    });
};
const wait = (ms = 1000) => {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
};
function BeautifyErrors(name) {
    return (target, propertyKey, descriptor) => {
        const isMethod = descriptor && descriptor.value instanceof Function;
        if (!isMethod)
            return;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const originalMethod = descriptor.value;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        descriptor.value = async function (...args) {
            var _a;
            try {
                return await originalMethod.apply(this, args);
            }
            catch (e) {
                if (e.response &&
                    e.response.status >= 400 &&
                    e.response.status <= 599) {
                    const errors = (_a = e.response.data) === null || _a === void 0 ? void 0 : _a.errors;
                    logging_1.logger.error(`Error in ${name}: ${JSON.stringify(e)}`);
                    if (errors) {
                        throw new Error(`${name}: Request to Terraform Cloud failed with status ${e.response.status}: ${errors.map((e) => JSON.stringify(e)).join(", ")}`);
                    }
                }
                else {
                    logging_1.logger.warn(`Error in ${name}: ${JSON.stringify(e)}`);
                }
                throw e;
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        Object.defineProperty(target, propertyKey, descriptor);
    };
}
class TerraformCloud {
    constructor(abortSignal, stack, config, isSpeculative = false, createTerraformLogHandler = (_phase) => (_stdout, _isErr = false) => { } // eslint-disable-line @typescript-eslint/no-empty-function
    ) {
        this.abortSignal = abortSignal;
        this.stack = stack;
        this.config = config;
        this.createTerraformLogHandler = createTerraformLogHandler;
        this.terraformConfigFilePath = path.join(os.homedir(), ".terraform.d", "credentials.tfrc.json");
        this.lastLogMessageLength = 0;
        if (!config.workspaces.name)
            throw new Error("Please provide a workspace name for Terraform Cloud");
        if (!config.organization)
            throw new Error("Please provide an organization for Terraform Cloud");
        this.workDir = stack.workingDirectory;
        this.hostname = config.hostname || "app.terraform.io";
        this.workspaceName = config.workspaces.name;
        this.organizationName = config.organization;
        this.isSpeculative = isSpeculative;
        if (config.token) {
            this.token = config.token;
        }
        else if (process.env.TERRAFORM_CLOUD_TOKEN) {
            this.token = process.env.TERRAFORM_CLOUD_TOKEN;
        }
        else {
            if (!fs.existsSync(this.terraformConfigFilePath))
                throw new Error("Please provide a token for Terraform Cloud");
            const configFile = JSON.parse(fs.readFileSync(this.terraformConfigFilePath, "utf8"));
            this.token = configFile.credentials[this.hostname].token;
        }
        this.client = new TerraformCloudClient.TerraformCloud(this.token, this.hostname);
        this.abortSignal.addEventListener("abort", () => {
            this.removeRun("cancel");
        });
        const httpProxy = process.env.http_proxy || process.env.HTTP_PROXY;
        if (httpProxy && httpProxy !== "undefined") {
            // ¯\_(ツ)_/¯
            const url = new url_1.URL(httpProxy);
            logging_1.logger.debug(`setting tunnel agent via hostname=${url.hostname} port=${url.port}`);
            this.client.client.defaults.httpsAgent = agent.httpsOverHttp({
                proxy: { host: url.hostname, port: url.port },
            });
        }
    }
    async isRemoteWorkspace() {
        const workspace = await this.workspace();
        return workspace.attributes.executionMode !== "local";
    }
    async init() {
        const sendLog = this.createTerraformLogHandler("init");
        if (fs.existsSync(path.join(process.cwd(), `terraform.${this.stack.name}.tfstate`)))
            throw new Error(`Found a "terraform.${this.stack.name}.tfstate" file in your current working directory. Please migrate the state manually to Terraform Cloud and delete the file afterwards. https://cdk.tf/migrate-state`);
        const workspace = await this.workspace();
        sendLog("Creating Terraform Cloud configuration version");
        const version = await this.client.ConfigurationVersion.create(workspace.id, {
            data: {
                type: "configuration-version",
                attributes: {
                    autoQueueRuns: false,
                    speculative: this.isSpeculative,
                },
            },
        });
        this.configurationVersionId = version.id;
        sendLog(`Created Terraform Cloud configuration version ${this.configurationVersionId}`);
        this.removeLocalTerraformDirectory();
        sendLog(`Zipping up the directory ${this.workDir}`);
        const zipBuffer = await zipDirectory(this.workDir);
        if (!zipBuffer)
            throw new Error("Couldn't upload directory to Terraform Cloud");
        sendLog(`Uploading the directory to Terraform Cloud`);
        await this.client.ConfigurationVersion.upload(version.attributes.uploadUrl, zipBuffer);
        sendLog(`Uploaded the directory to Terraform Cloud`);
        sendLog(`Waiting for configuration version to become ready...`);
        // we might get an HTTP 422 error if we don't wait for the processing and try to run too early. see #647
        await this.waitForConfigurationVersionToBeReady();
    }
    async plan(destroy = false, refreshOnly = false) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!this.configurationVersionId)
            throw new Error("Please create a ConfigurationVersion before planning");
        const sendLog = this.createTerraformLogHandler("plan");
        const workspace = await this.workspace();
        const workspaceUrl = `https://${this.hostname}/app/${this.organizationName}/workspaces/${this.workspaceName}`;
        if (workspace.attributes.locked &&
            ((_c = (_b = (_a = workspace.relationships) === null || _a === void 0 ? void 0 : _a.lockedBy) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.type) === "users") {
            throw new Error(`Can not plan, the workspace ${this.organizationName}/${this.workspaceName} is locked by a user. You can find more information at ${workspaceUrl}`);
        }
        if (workspace.attributes.locked &&
            ((_f = (_e = (_d = workspace.relationships) === null || _d === void 0 ? void 0 : _d.lockedBy) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.type) === "runs") {
            throw new Error(`Can not plan, the workspace ${this.organizationName}/${this.workspaceName} is locked by a previous run, please wait until it's done. You can find more information at ${workspaceUrl}`);
        }
        if (workspace.attributes.locked) {
            throw new Error(`Can not plan, the workspace ${this.organizationName}/${this.workspaceName} is locked for an unknown reason: ${JSON.stringify((_g = workspace.relationships) === null || _g === void 0 ? void 0 : _g.lockedBy)}. You can find more information at ${workspaceUrl}`);
        }
        sendLog(`Creating speculative Terraform Cloud run`);
        let result = await this.client.Runs.create({
            data: {
                attributes: {
                    isDestroy: destroy,
                    refreshOnly,
                    message: "cdktf",
                },
                relationships: {
                    configurationVersion: {
                        data: {
                            id: this.configurationVersionId,
                            type: "configuration-versions",
                        },
                    },
                    workspace: {
                        data: {
                            id: workspace.id,
                            type: "workspaces",
                        },
                    },
                },
            },
        });
        const url = `https://${this.hostname}/app/${this.organizationName}/workspaces/${this.workspaceName}/runs/${result.id}`;
        sendLog(`Created speculative Terraform Cloud run: ${url}`);
        const pendingStates = ["pending", "plan_queued", "planning"];
        while (pendingStates.includes(result.attributes.status)) {
            result = await this.update(this.client, result.id, "plan");
            await wait(1000);
        }
        sendLog(`Speculative Terraform Cloud run done`);
        if (result.attributes.status === "errored") {
            throw new Error(`Error planning the run, please take a look at ${url}`);
        }
        sendLog(`Getting plan output`);
        const plan = await this.client.Plans.jsonOutput(result.relationships.plan.data.id);
        this.run = result;
        return new TerraformCloudPlan("terraform-cloud", plan, url);
    }
    async update(client, runId, phase) {
        const sendLog = this.createTerraformLogHandler(phase);
        const res = await client.Runs.show(runId);
        // fetch logs and update UI in the background
        client.Applies.logs(res.relationships.apply.data.id).then(({ data }) => {
            // In rare cases the backend sends an empty chunk of data back.
            if (data && data.length) {
                const buffer = Buffer.from(data, "utf8");
                // We only want to send what we have not seen yet.
                const bufferWithoutLastKnown = buffer
                    .subarray(this.lastLogMessageLength)
                    .toString("utf8");
                if (bufferWithoutLastKnown.trim().length) {
                    sendLog(bufferWithoutLastKnown, false);
                    this.lastLogMessageLength = buffer.length;
                }
            }
        });
        return res;
    }
    async deploy(_planFile, _refreshOnly) {
        const sendLog = this.createTerraformLogHandler("deploy");
        if (!this.run)
            throw new Error("Please create a ConfigurationVersion / Plan before deploying");
        const deployingStates = ["confirmed", "apply_queued", "applying"];
        const runId = this.run.id;
        sendLog(`Deploying Terraform Cloud run`);
        await this.client.Runs.action("apply", runId);
        let result = await this.client.Runs.show(runId);
        while (deployingStates.includes(result.attributes.status)) {
            result = await this.update(this.client, runId, "deploy");
            await wait(1000);
        }
        switch (result.attributes.status) {
            case "applied":
                break;
            default:
                throw new Error(`error: ${result.attributes.status}`);
        }
    }
    async destroy() {
        if (!this.run)
            throw new Error("Please create a ConfigurationVersion / Plan before destroying");
        const sendLog = this.createTerraformLogHandler("destroy");
        const destroyingStates = ["confirmed", "apply_queued", "applying"];
        const runId = this.run.id;
        sendLog(`Applying Terraform Cloud run`);
        await this.client.Runs.action("apply", runId);
        let result = await this.client.Runs.show(runId);
        while (destroyingStates.includes(result.attributes.status)) {
            result = await this.update(this.client, runId, "destroy");
            await wait(1000);
        }
        switch (result.attributes.status) {
            case "applied":
                break;
            default:
                throw new Error(`error: ${result.attributes.status}`);
        }
    }
    async version() {
        return (await this.workspace()).attributes.terraformVersion;
    }
    async abort() {
        if (!this.run) {
            throw errors_1.Errors.Internal("No run is present to abort, this means we called abort before the plan was started");
        }
        await this.removeRun("discard");
    }
    async output() {
        const sendLog = this.createTerraformLogHandler("output");
        sendLog("Fetching Terraform Cloud outputs");
        const stateVersion = await this.client.StateVersions.current((await this.workspace()).id, true);
        if (!stateVersion.included)
            return {};
        const outputs = stateVersion.included.reduce((acc, output) => {
            acc[output.attributes.name] = {
                sensitive: output.attributes.sensitive,
                type: output.attributes.type,
                value: output.attributes.value,
            };
            return acc;
        }, {});
        return outputs;
    }
    async workspace() {
        var _a;
        try {
            return await this.client.Workspaces.showByName(this.organizationName, this.workspaceName);
        }
        catch (e) {
            if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                // return a more descriptive error message as http response is not descriptive enough
                // will not be touched by BeautifyErrors decorator
                throw new Error(`TerraformCloud returned an HTTP 404 error. Please make sure the configured organization (${this.organizationName}) and workspace (${this.workspaceName}) exist and you have the correct access rights.`);
            }
            throw e;
        }
    }
    async isConfigurationVersionReady() {
        if (!this.configurationVersionId)
            throw new Error("No ConfigurationVersionId known. Cannot wait for ConfigurationVersion to become ready");
        const configVersion = await this.client.ConfigurationVersion.show(this.configurationVersionId);
        const { status } = configVersion.attributes;
        switch (status) {
            case "uploaded":
                return true;
            case "errored": {
                const { error, errorMessage } = configVersion.attributes;
                logging_1.logger.error(`ConfigurationVersion in Terraform Cloud has status "${status}". Returned config version was ${JSON.stringify(configVersion)}`);
                throw new Error(`Terraform Cloud ConfigurationVersion ${this.configurationVersionId} has status "errored" ${JSON.stringify({ error, errorMessage })}`);
            }
            case "pending": // fallthrough
            default:
                logging_1.logger.debug(`ConfigurationVersion in Terraform Cloud not considered ready with status "${status}".`);
                return false;
        }
    }
    async removeRun(action) {
        if (!this.run) {
            logging_1.logger.debug("No run to remove");
            return;
        }
        const url = `https://${this.hostname}/app/${this.organizationName}/workspaces/${this.workspaceName}/runs/${this.run.id}`;
        logging_1.logger.info(`${action}ing run ${url}`);
        this.client.Runs.action(action, this.run.id)
            .then(() => {
            logging_1.logger.debug(`Cancelled run ${url}`);
        })
            .catch(() => {
            logging_1.logger.error(`Failed to cancel run, please cancel manually at ${url}`);
        });
    }
    async waitForConfigurationVersionToBeReady(timeoutMs = 60000) {
        logging_1.logger.debug("waiting for Configuration Version to be ready in Terraform Cloud");
        let timeoutReached = false;
        const ready = async () => {
            while (!((await this.isConfigurationVersionReady()) && !timeoutReached)) {
                await wait(1000);
            }
        };
        const timeout = async () => {
            await wait(timeoutMs);
            timeoutReached = true;
            throw new Error(`Waiting for Terraform Cloud ConfigurationVersion to become ready timed out (timeout was ${timeoutMs}ms)`);
        };
        await Promise.race([ready(), timeout()]);
        logging_1.logger.debug("Configuration Version is ready in Terraform Cloud");
    }
    removeLocalTerraformDirectory() {
        try {
            fs.rmSync(path.resolve(this.stack.workingDirectory, ".terraform"), {
                recursive: true,
            });
        }
        catch (error) {
            logging_1.logger.debug(`Could not remove .terraform folder`, error);
        }
    }
}
__decorate([
    BeautifyErrors("IsRemoteWorkspace")
], TerraformCloud.prototype, "isRemoteWorkspace", null);
__decorate([
    BeautifyErrors("Init")
], TerraformCloud.prototype, "init", null);
__decorate([
    BeautifyErrors("Plan")
], TerraformCloud.prototype, "plan", null);
__decorate([
    BeautifyErrors("Deploy")
], TerraformCloud.prototype, "deploy", null);
__decorate([
    BeautifyErrors("Destroy")
], TerraformCloud.prototype, "destroy", null);
__decorate([
    BeautifyErrors("Version")
], TerraformCloud.prototype, "version", null);
__decorate([
    BeautifyErrors("Abort")
], TerraformCloud.prototype, "abort", null);
__decorate([
    BeautifyErrors("Output")
], TerraformCloud.prototype, "output", null);
__decorate([
    BeautifyErrors("Workspace")
], TerraformCloud.prototype, "workspace", null);
exports.TerraformCloud = TerraformCloud;
//# sourceMappingURL=data:application/json;base64,