"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformCli = exports.TerraformCliPlan = void 0;
const util_1 = require("cdktf-cli/lib/util");
const terraform_1 = require("./terraform");
const terraform_2 = require("../terraform");
class TerraformCliPlan extends terraform_1.AbstractTerraformPlan {
    constructor(planFile, plan) {
        super(planFile, plan.resource_changes, plan.output_changes);
        this.planFile = planFile;
        this.plan = plan;
    }
}
exports.TerraformCliPlan = TerraformCliPlan;
class TerraformCli {
    constructor(abortSignal, stack, createTerraformLogHandler = (_phase) => (_stdout, _isErr = false) => { } // eslint-disable-line @typescript-eslint/no-empty-function
    ) {
        this.abortSignal = abortSignal;
        this.stack = stack;
        this.workdir = stack.workingDirectory;
        this.onStdout = (phase) => (stdout) => createTerraformLogHandler(phase)(stdout.toString());
        this.onStderr = (phase) => (stderr) => createTerraformLogHandler(phase)(stderr.toString(), true);
    }
    async init() {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, ["init", "-input=false"], {
            cwd: this.workdir,
            env: process.env,
            signal: this.abortSignal,
        }, this.onStdout("init"), this.onStderr("init"));
    }
    async plan(destroy = false, refreshOnly = false) {
        const planFile = "plan";
        const options = ["plan", "-input=false", "-out", planFile];
        if (destroy) {
            options.push("-destroy");
        }
        if (refreshOnly) {
            options.push("-refresh-only");
        }
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, options, {
            cwd: this.workdir,
            env: process.env,
            signal: this.abortSignal,
        }, this.onStdout("plan"), this.onStderr("plan"));
        const jsonPlan = await util_1.exec(terraform_2.terraformBinaryName, ["show", "-json", planFile], { cwd: this.workdir, env: process.env, signal: this.abortSignal }, 
        // we don't care about the output, this is just internally to compose a plan
        () => { }, // eslint-disable-line @typescript-eslint/no-empty-function
        this.onStderr("plan"));
        return new TerraformCliPlan(planFile, JSON.parse(jsonPlan));
    }
    async deploy(planFile, refreshOnly = false, extraOptions = []) {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, [
            "apply",
            "-auto-approve",
            "-input=false",
            ...extraOptions,
            // only appends planFile if not empty
            // this allows deploying without a plan (as used in watch)
            ...(planFile ? [planFile] : []),
            ...(refreshOnly ? ["-refresh-only"] : []),
        ], { cwd: this.workdir, env: process.env, signal: this.abortSignal }, this.onStdout("deploy"), this.onStderr("deploy"));
    }
    async destroy() {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, ["destroy", "-auto-approve", "-input=false"], { cwd: this.workdir, env: process.env, signal: this.abortSignal }, this.onStdout("destroy"), this.onStderr("destroy"));
    }
    async version() {
        try {
            return await util_1.exec(terraform_2.terraformBinaryName, ["-v"], {
                cwd: this.workdir,
                env: process.env,
                signal: this.abortSignal,
            }, this.onStdout("version"), this.onStderr("version"));
        }
        catch (_a) {
            throw new Error("Terraform CLI not present - Please install a current version https://learn.hashicorp.com/terraform/getting-started/install.html");
        }
    }
    async output() {
        const output = await util_1.exec(terraform_2.terraformBinaryName, ["output", "-json"], {
            cwd: this.workdir,
            env: process.env,
            signal: this.abortSignal,
        }, 
        // We don't need to log the output here since we use it later on
        () => { }, // eslint-disable-line @typescript-eslint/no-empty-function
        this.onStderr("output"));
        return JSON.parse(output);
    }
    async setUserAgent() {
        // Read the cdktf version from the 'cdk.tf.json' file
        // and set the user agent.
        const version = await util_1.readCDKTFVersion(this.workdir);
        if (version != "") {
            process.env.TF_APPEND_USER_AGENT =
                "cdktf/" + version + " (+https://github.com/hashicorp/terraform-cdk)";
        }
    }
    // We don't need to clean anything up for a running execution in the CLI since there is no left-over state in contrast to an open Terraform Cloud run
    async abort() {
        return;
    }
}
exports.TerraformCli = TerraformCli;
//# sourceMappingURL=data:application/json;base64,