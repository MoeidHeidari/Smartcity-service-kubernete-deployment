"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTerraformPlan = exports.isTerraformOutput = exports.DeployingResourceApplyState = exports.PlannedResourceAction = void 0;
var PlannedResourceAction;
(function (PlannedResourceAction) {
    PlannedResourceAction["CREATE"] = "create";
    PlannedResourceAction["UPDATE"] = "update";
    PlannedResourceAction["DELETE"] = "delete";
    PlannedResourceAction["READ"] = "read";
    PlannedResourceAction["NO_OP"] = "no-op";
})(PlannedResourceAction = exports.PlannedResourceAction || (exports.PlannedResourceAction = {}));
var DeployingResourceApplyState;
(function (DeployingResourceApplyState) {
    DeployingResourceApplyState["WAITING"] = "waiting";
    DeployingResourceApplyState["UPDATING"] = "updating";
    DeployingResourceApplyState["UPDATED"] = "updated";
    DeployingResourceApplyState["CREATING"] = "creating";
    DeployingResourceApplyState["CREATED"] = "created";
    DeployingResourceApplyState["DESTROYING"] = "destroying";
    DeployingResourceApplyState["DESTROYED"] = "destroyed";
    DeployingResourceApplyState["SUCCESS"] = "success";
    DeployingResourceApplyState["ERROR"] = "error";
})(DeployingResourceApplyState = exports.DeployingResourceApplyState || (exports.DeployingResourceApplyState = {}));
function isTerraformOutput(output) {
    return (typeof output === "object" &&
        typeof output.sensitive === "boolean" &&
        (typeof output.type === "string" || Array.isArray(output.type)));
}
exports.isTerraformOutput = isTerraformOutput;
function filterChangingResources(resources) {
    const applyActions = [
        PlannedResourceAction.UPDATE,
        PlannedResourceAction.CREATE,
        PlannedResourceAction.DELETE,
        PlannedResourceAction.READ,
    ];
    return resources.filter((resource) => applyActions.includes(resource.action));
}
class AbstractTerraformPlan {
    constructor(planFile, resourceChanges, outputChanges) {
        this.planFile = planFile;
        this.resourceChanges = resourceChanges;
        this.outputChanges = outputChanges;
    }
    get resources() {
        return (this.resourceChanges || []).map((resource) => {
            return {
                id: resource.address,
                action: resource.change.actions[0],
            };
        });
    }
    get applyableResources() {
        return filterChangingResources(this.resources);
    }
    get outputs() {
        return Object.entries(this.outputChanges || {}).map(([key, value]) => ({
            id: `output.${key}`,
            action: value.actions[0],
        }));
    }
    get changingOutputs() {
        return filterChangingResources(this.outputs);
    }
    get needsApply() {
        return (this.applyableResources.length > 0 || this.changingOutputs.length > 0);
    }
}
exports.AbstractTerraformPlan = AbstractTerraformPlan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQVkscUJBTVg7QUFORCxXQUFZLHFCQUFxQjtJQUMvQiwwQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBaUIsQ0FBQTtJQUNqQixzQ0FBYSxDQUFBO0lBQ2Isd0NBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFNaEM7QUFFRCxJQUFZLDJCQVVYO0FBVkQsV0FBWSwyQkFBMkI7SUFDckMsa0RBQW1CLENBQUE7SUFDbkIsb0RBQXFCLENBQUE7SUFDckIsa0RBQW1CLENBQUE7SUFDbkIsb0RBQXFCLENBQUE7SUFDckIsa0RBQW1CLENBQUE7SUFDbkIsd0RBQXlCLENBQUE7SUFDekIsc0RBQXVCLENBQUE7SUFDdkIsa0RBQW1CLENBQUE7SUFDbkIsOENBQWUsQ0FBQTtBQUNqQixDQUFDLEVBVlcsMkJBQTJCLEdBQTNCLG1DQUEyQixLQUEzQixtQ0FBMkIsUUFVdEM7QUFpQ0QsU0FBZ0IsaUJBQWlCLENBQUMsTUFBVztJQUMzQyxPQUFPLENBQ0wsT0FBTyxNQUFNLEtBQUssUUFBUTtRQUMxQixPQUFPLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUztRQUNyQyxDQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDaEUsQ0FBQztBQUNKLENBQUM7QUFORCw4Q0FNQztBQVNELFNBQVMsdUJBQXVCLENBQUMsU0FBNEI7SUFDM0QsTUFBTSxZQUFZLEdBQUc7UUFDbkIscUJBQXFCLENBQUMsTUFBTTtRQUM1QixxQkFBcUIsQ0FBQyxNQUFNO1FBQzVCLHFCQUFxQixDQUFDLE1BQU07UUFDNUIscUJBQXFCLENBQUMsSUFBSTtLQUMzQixDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFDRCxNQUFzQixxQkFBcUI7SUFDekMsWUFDa0IsUUFBZ0IsRUFDZixlQUFrQyxFQUNsQyxhQUFvRDtRQUZyRCxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2Ysb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUF1QztJQUNwRSxDQUFDO0lBRUosSUFBVyxTQUFTO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25ELE9BQU87Z0JBQ0wsRUFBRSxFQUFFLFFBQVEsQ0FBQyxPQUFPO2dCQUNwQixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2hCLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBVyxrQkFBa0I7UUFDM0IsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNyRSxFQUFFLEVBQUUsVUFBVSxHQUFHLEVBQUU7WUFDbkIsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3pCLENBQUMsQ0FBc0IsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxlQUFlO1FBQ3hCLE9BQU8sdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxDQUNMLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FDdEUsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBDRCxzREFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBQbGFubmVkUmVzb3VyY2VBY3Rpb24ge1xuICBDUkVBVEUgPSBcImNyZWF0ZVwiLFxuICBVUERBVEUgPSBcInVwZGF0ZVwiLFxuICBERUxFVEUgPSBcImRlbGV0ZVwiLFxuICBSRUFEID0gXCJyZWFkXCIsXG4gIE5PX09QID0gXCJuby1vcFwiLFxufVxuXG5leHBvcnQgZW51bSBEZXBsb3lpbmdSZXNvdXJjZUFwcGx5U3RhdGUge1xuICBXQUlUSU5HID0gXCJ3YWl0aW5nXCIsXG4gIFVQREFUSU5HID0gXCJ1cGRhdGluZ1wiLFxuICBVUERBVEVEID0gXCJ1cGRhdGVkXCIsXG4gIENSRUFUSU5HID0gXCJjcmVhdGluZ1wiLFxuICBDUkVBVEVEID0gXCJjcmVhdGVkXCIsXG4gIERFU1RST1lJTkcgPSBcImRlc3Ryb3lpbmdcIixcbiAgREVTVFJPWUVEID0gXCJkZXN0cm95ZWRcIixcbiAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuICBFUlJPUiA9IFwiZXJyb3JcIixcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGxhbm5lZFJlc291cmNlIHtcbiAgaWQ6IHN0cmluZztcbiAgYWN0aW9uOiBQbGFubmVkUmVzb3VyY2VBY3Rpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95aW5nUmVzb3VyY2UgZXh0ZW5kcyBQbGFubmVkUmVzb3VyY2Uge1xuICBhcHBseVN0YXRlOiBEZXBsb3lpbmdSZXNvdXJjZUFwcGx5U3RhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VDaGFuZ2VzQ2hhbmdlIHtcbiAgYWN0aW9uczogc3RyaW5nW107XG4gIGJlZm9yZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgYWZ0ZXI6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VDaGFuZ2VzIHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBtb2R1bGVfYWRkcmVzczogc3RyaW5nO1xuICBtb2RlOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBpbmRleDogbnVtYmVyO1xuICBwcm92aWRlcl9uYW1lOiBzdHJpbmc7XG4gIGNoYW5nZTogUmVzb3VyY2VDaGFuZ2VzQ2hhbmdlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybU91dHB1dCB7XG4gIHNlbnNpdGl2ZTogYm9vbGVhbjtcbiAgdHlwZTogc3RyaW5nIHwgQXJyYXk8YW55PjtcbiAgdmFsdWU6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgQXJyYXk8YW55Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVycmFmb3JtT3V0cHV0KG91dHB1dDogYW55KTogb3V0cHV0IGlzIFRlcnJhZm9ybU91dHB1dCB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG91dHB1dCA9PT0gXCJvYmplY3RcIiAmJlxuICAgIHR5cGVvZiBvdXRwdXQuc2Vuc2l0aXZlID09PSBcImJvb2xlYW5cIiAmJlxuICAgICh0eXBlb2Ygb3V0cHV0LnR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvdXRwdXQudHlwZSkpXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVycmFmb3JtUGxhbiB7XG4gIHJlYWRvbmx5IHJlc291cmNlczogUGxhbm5lZFJlc291cmNlW107XG4gIHJlYWRvbmx5IGFwcGx5YWJsZVJlc291cmNlczogUGxhbm5lZFJlc291cmNlW107XG4gIHJlYWRvbmx5IG5lZWRzQXBwbHk6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHBsYW5GaWxlOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNoYW5naW5nUmVzb3VyY2VzKHJlc291cmNlczogUGxhbm5lZFJlc291cmNlW10pIHtcbiAgY29uc3QgYXBwbHlBY3Rpb25zID0gW1xuICAgIFBsYW5uZWRSZXNvdXJjZUFjdGlvbi5VUERBVEUsXG4gICAgUGxhbm5lZFJlc291cmNlQWN0aW9uLkNSRUFURSxcbiAgICBQbGFubmVkUmVzb3VyY2VBY3Rpb24uREVMRVRFLFxuICAgIFBsYW5uZWRSZXNvdXJjZUFjdGlvbi5SRUFELFxuICBdO1xuICByZXR1cm4gcmVzb3VyY2VzLmZpbHRlcigocmVzb3VyY2UpID0+IGFwcGx5QWN0aW9ucy5pbmNsdWRlcyhyZXNvdXJjZS5hY3Rpb24pKTtcbn1cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFRlcnJhZm9ybVBsYW4gaW1wbGVtZW50cyBUZXJyYWZvcm1QbGFuIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHBsYW5GaWxlOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvdXJjZUNoYW5nZXM6IFJlc291cmNlQ2hhbmdlc1tdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0Q2hhbmdlczogUmVjb3JkPHN0cmluZywgUmVzb3VyY2VDaGFuZ2VzQ2hhbmdlPlxuICApIHt9XG5cbiAgcHVibGljIGdldCByZXNvdXJjZXMoKTogUGxhbm5lZFJlc291cmNlW10ge1xuICAgIHJldHVybiAodGhpcy5yZXNvdXJjZUNoYW5nZXMgfHwgW10pLm1hcCgocmVzb3VyY2UpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByZXNvdXJjZS5hZGRyZXNzLFxuICAgICAgICBhY3Rpb246IHJlc291cmNlLmNoYW5nZS5hY3Rpb25zWzBdLFxuICAgICAgfSBhcyBQbGFubmVkUmVzb3VyY2U7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFwcGx5YWJsZVJlc291cmNlcygpOiBQbGFubmVkUmVzb3VyY2VbXSB7XG4gICAgcmV0dXJuIGZpbHRlckNoYW5naW5nUmVzb3VyY2VzKHRoaXMucmVzb3VyY2VzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb3V0cHV0cygpOiBQbGFubmVkUmVzb3VyY2VbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMub3V0cHV0Q2hhbmdlcyB8fCB7fSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICBpZDogYG91dHB1dC4ke2tleX1gLFxuICAgICAgYWN0aW9uOiB2YWx1ZS5hY3Rpb25zWzBdLFxuICAgIH0pKSBhcyBQbGFubmVkUmVzb3VyY2VbXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2hhbmdpbmdPdXRwdXRzKCk6IFBsYW5uZWRSZXNvdXJjZVtdIHtcbiAgICByZXR1cm4gZmlsdGVyQ2hhbmdpbmdSZXNvdXJjZXModGhpcy5vdXRwdXRzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbmVlZHNBcHBseSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5hcHBseWFibGVSZXNvdXJjZXMubGVuZ3RoID4gMCB8fCB0aGlzLmNoYW5naW5nT3V0cHV0cy5sZW5ndGggPiAwXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybSB7XG4gIGluaXQ6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHBsYW46IChkZXN0cm95OiBib29sZWFuLCByZWZyZXNoT25seT86IGJvb2xlYW4pID0+IFByb21pc2U8VGVycmFmb3JtUGxhbj47XG4gIGRlcGxveShwbGFuRmlsZTogc3RyaW5nLCByZWZyZXNoT25seT86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuICBkZXN0cm95KCk6IFByb21pc2U8dm9pZD47XG4gIG91dHB1dCgpOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogVGVycmFmb3JtT3V0cHV0IH0+O1xuICBhYm9ydDogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbn1cbiJdfQ==