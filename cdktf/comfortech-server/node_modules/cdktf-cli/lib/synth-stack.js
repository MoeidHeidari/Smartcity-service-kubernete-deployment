"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthStack = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const chalk = __importStar(require("chalk"));
const indent_string_1 = __importDefault(require("indent-string"));
const cdktf_1 = require("cdktf");
const perf_hooks_1 = require("perf_hooks");
const checkpoint_1 = require("./checkpoint");
const util_1 = require("./util");
const chalkColour = new chalk.Instance();
class SynthStack {
    static async synth(abortSignal, command, outdir, workingDirectory = process.cwd(), graceful = false, // will not exit the process but rethrow the error instead
    synthOrigin) {
        // start performance timer
        const startTime = perf_hooks_1.performance.now();
        const isDirectory = (source) => fs.lstatSync(source).isDirectory();
        const getDirectories = (source) => {
            if (!fs.existsSync(source))
                return [];
            return fs
                .readdirSync(source)
                .map((name) => path.join(source, name))
                .filter(isDirectory);
        };
        const existingDirectories = getDirectories(path.join(outdir, cdktf_1.Manifest.stacksFolder));
        const env = Object.fromEntries(Object.entries(process.env).filter(
        // We don't want to pass Terraform variables to the synth command since they should only be used at execution time
        ([key]) => !key.startsWith("TF_VAR_")));
        // Increases the default memory available to Node.js when synthesizing a TypeScript CDK project.
        if (env.NODE_OPTIONS &&
            !env.NODE_OPTIONS.includes(`--max-old-space-size`)) {
            console.warn(`found NODE_OPTIONS environment variable without a setting for --max-old-space-size.
The synthesizing step for TypeScript may need an increased amount of memory if multiple large providers
are used with locally generated bindings. You can ignore this if you don't use CDKTF with TypeScript.
If not present, the cdktf-cli sets it to NODE_OPTIONS="--max-old-space-size=4048" by default. But as
your environment already contains a NODE_OPTIONS variable, we won't override it. Hence, the app command
might fail while synthesizing with an out of memory error.`);
        }
        else {
            // increase memory to allow ts-node (when using TypeScript) to handle large amounts of generated code in memory
            env.NODE_OPTIONS = "--max-old-space-size=4048";
        }
        try {
            await util_1.shell(command, [], {
                shell: true,
                env: {
                    ...env,
                    CDKTF_OUTDIR: outdir,
                    CDKTF_CONTINUE_SYNTH_ON_ERROR_ANNOTATIONS: "true",
                },
                cwd: workingDirectory,
                signal: abortSignal,
            });
        }
        catch (e) {
            const errorOutput = chalkColour `{redBright cdktf encountered an error while synthesizing}

Synth command: {blue ${command}}
Error:         {redBright ${e.message}}
${e.stderr
                ? chalkColour `
Command output on stderr:

{dim ${indent_string_1.default(e.stderr, 4)}}
`
                : ""}
${e.stdout
                ? chalkColour `
Command output on stdout:

{dim ${indent_string_1.default(e.stdout, 4)}}
`
                : ""}`;
            await this.synthErrorTelemetry(synthOrigin);
            if (graceful) {
                e.errorOutput = errorOutput;
                throw e;
            }
            console.error(errorOutput);
            process.exit(1);
        }
        if (!(await fs.pathExists(path.join(outdir, cdktf_1.Manifest.fileName)))) {
            const errorMessage = `ERROR: synthesis failed, app expected to create "${outdir}/${cdktf_1.Manifest.fileName}"`;
            if (graceful) {
                throw new Error(errorMessage);
            }
            console.error(errorMessage);
            process.exit(1);
        }
        // end performance timer
        const endTime = perf_hooks_1.performance.now();
        const stacks = [];
        const manifest = JSON.parse(fs.readFileSync(path.join(outdir, cdktf_1.Manifest.fileName)).toString());
        for (const stackName in manifest.stacks) {
            const stack = manifest.stacks[stackName];
            const filePath = path.join(outdir, stack.synthesizedStackPath);
            const jsonContent = JSON.parse(fs.readFileSync(filePath).toString());
            stacks.push({
                ...stack,
                workingDirectory: path.join(outdir, stack.workingDirectory),
                content: JSON.stringify(jsonContent, null, 2),
            });
        }
        await this.synthTelemetry(endTime - startTime, stacks, synthOrigin);
        if (stacks.length === 0) {
            console.error("ERROR: No Terraform code synthesized.");
        }
        const stackNames = stacks.map((s) => s.name);
        const orphanedDirectories = existingDirectories.filter((e) => !stackNames.includes(path.basename(e)));
        for (const orphanedDirectory of orphanedDirectories) {
            fs.rmSync(orphanedDirectory, { recursive: true });
        }
        return stacks;
    }
    static async synthTelemetry(totalTime, stacks, synthOrigin) {
        await checkpoint_1.sendTelemetry("synth", {
            totalTime: totalTime,
            synthOrigin,
            stackMetadata: stacks.map((stack) => JSON.parse(stack.content)["//"].metadata),
        });
    }
    static async synthErrorTelemetry(synthOrigin) {
        await checkpoint_1.sendTelemetry("synth", { error: true, synthOrigin });
    }
}
exports.SynthStack = SynthStack;
//# sourceMappingURL=data:application/json;base64,