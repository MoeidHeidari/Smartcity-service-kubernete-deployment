"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformElement = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const assert_1 = require("assert");
const constructs_1 = require("constructs");
const _1 = require(".");
const terraform_stack_1 = require("./terraform-stack");
const tfExpression_1 = require("./tfExpression");
class TerraformElement extends constructs_1.Construct {
    constructor(scope, id, elementType) {
        super(scope, id);
        this.rawOverrides = {};
        this._elementType = elementType;
        if (_1.Token.isUnresolved(id)) {
            throw new Error("You cannot use a Token (e.g. a reference to an attribute) as the id of a construct");
        }
        this.node.addMetadata("stacktrace", "trace");
        this.cdktfStack = terraform_stack_1.TerraformStack.of(this);
    }
    toTerraform() {
        return {};
    }
    toMetadata() {
        return {};
    }
    get fqn() {
        if (!this._fqnToken) {
            assert_1.ok(!!this._elementType, "Element type not set");
            this._fqnToken = _1.Token.asString(tfExpression_1.ref(`${this._elementType}.${this.friendlyUniqueId}`, this.cdktfStack));
        }
        return this._fqnToken;
    }
    get friendlyUniqueId() {
        if (!this._friendlyUniqueId) {
            if (this._logicalIdOverride) {
                this._friendlyUniqueId = this._logicalIdOverride;
            }
            else {
                this._friendlyUniqueId = this.cdktfStack.getLogicalId(this);
            }
        }
        return this._friendlyUniqueId;
    }
    /**
     * Overrides the auto-generated logical ID with a specific ID.
     * @param newLogicalId The new logical ID to use for this stack element.
     */
    overrideLogicalId(newLogicalId) {
        assert_1.ok(!this._fqnToken, "Logical ID may not be overriden once .fqn has been requested. Make sure to override the id before passing the construct to other constructs.");
        this._logicalIdOverride = newLogicalId;
    }
    /**
     * Resets a previously passed logical Id to use the auto-generated logical id again
     */
    resetOverrideLogicalId() {
        assert_1.ok(!this._fqnToken, "Logical ID may not be overriden once .fqn has been requested. You can only reset the override before you pass the construct to other constructs.");
        this._logicalIdOverride = undefined;
    }
    addOverride(path, value) {
        const parts = path.split(".");
        let curr = this.rawOverrides;
        while (parts.length > 1) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const key = parts.shift();
            // if we can't recurse further or the previous value is not an
            // object overwrite it with an object.
            const isObject = curr[key] != null &&
                typeof curr[key] === "object" &&
                !Array.isArray(curr[key]);
            if (!isObject) {
                curr[key] = {};
            }
            curr = curr[key];
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const lastKey = parts.shift();
        curr[lastKey] = value;
    }
    get constructNodeMetadata() {
        return {
            metadata: {
                path: this.node.path,
                uniqueId: this.friendlyUniqueId,
                stackTrace: this.node.metadata.find((e) => e.type === "stacktrace")
                    ?.trace,
            },
        };
    }
}
exports.TerraformElement = TerraformElement;
_a = JSII_RTTI_SYMBOL_1;
TerraformElement[_a] = { fqn: "cdktf.TerraformElement", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,