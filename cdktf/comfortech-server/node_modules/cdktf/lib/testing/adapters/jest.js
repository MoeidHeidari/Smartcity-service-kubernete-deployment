"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupJest = void 0;
const matchers_1 = require("../matchers");
const matchers_2 = require("../matchers");
// Jest supports asymetric matchers (https://github.com/facebook/jest/blob/main/packages/expect/src/asymmetricMatchers.ts)
// These matchers are great in expressing partial equality in a deeply nested way
// As we want to support more than one testing framework we can not use them everywhere
function jestPassEvaluation(items, assertedProperties) {
    if (Object.entries(assertedProperties).length === 0) {
        return items.length > 0;
    }
    else {
        if (global.expect) {
            const expect = global.expect;
            return expect
                .arrayContaining([expect.objectContaining(assertedProperties)])
                .asymmetricMatch(items);
        }
        else {
            throw new Error("expect is not defined, jest was not propely instantiated");
        }
    }
}
function setupJest() {
    if (!("expect" in global)) {
        throw new Error("setupJest called, but expect is not globally accessible");
    }
    const expect = global.expect;
    expect.extend({
        toHaveResource(received, resourceConstructor) {
            return matchers_2.returnMatcherToJest(matchers_2.getToHaveResourceWithProperties(jestPassEvaluation)(received, resourceConstructor, {}));
        },
        toHaveResourceWithProperties(received, resourceConstructor, properties) {
            return matchers_2.returnMatcherToJest(matchers_2.getToHaveResourceWithProperties(jestPassEvaluation)(received, resourceConstructor, properties));
        },
        toHaveDataSource(received, dataSourceConstructor) {
            return matchers_2.returnMatcherToJest(matchers_1.getToHaveDataSourceWithProperties(jestPassEvaluation)(received, dataSourceConstructor, {}));
        },
        toHaveDataSourceWithProperties(received, dataSourceConstructor, properties) {
            return matchers_2.returnMatcherToJest(matchers_1.getToHaveDataSourceWithProperties(jestPassEvaluation)(received, dataSourceConstructor, properties));
        },
        toBeValidTerraform(received) {
            return matchers_2.returnMatcherToJest(matchers_1.toBeValidTerraform(received));
        },
        toPlanSuccessfully(received) {
            return matchers_2.returnMatcherToJest(matchers_1.toPlanSuccessfully(received));
        },
    });
}
exports.setupJest = setupJest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImplc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMENBSXFCO0FBQ3JCLDBDQUtxQjtBQTZCckIsMEhBQTBIO0FBQzFILGlGQUFpRjtBQUNqRix1RkFBdUY7QUFDdkYsU0FBUyxrQkFBa0IsQ0FDekIsS0FBWSxFQUNaLGtCQUF1QztJQUV2QyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ25ELE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7S0FDekI7U0FBTTtRQUNMLElBQUssTUFBYyxDQUFDLE1BQU0sRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBSSxNQUFjLENBQUMsTUFBTSxDQUFDO1lBQ3RDLE9BQU8sTUFBTTtpQkFDVixlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO2lCQUM5RCxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQ2IsMERBQTBELENBQzNELENBQUM7U0FDSDtLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQWdCLFNBQVM7SUFDdkIsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztLQUM1RTtJQUVELE1BQU0sTUFBTSxHQUFJLE1BQWMsQ0FBQyxNQUFvQixDQUFDO0lBRXBELE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDWixjQUFjLENBQ1osUUFBZ0IsRUFDaEIsbUJBQXlDO1lBRXpDLE9BQU8sOEJBQW1CLENBQ3hCLDBDQUErQixDQUFDLGtCQUFrQixDQUFDLENBQ2pELFFBQVEsRUFDUixtQkFBbUIsRUFDbkIsRUFBRSxDQUNILENBQ0YsQ0FBQztRQUNKLENBQUM7UUFDRCw0QkFBNEIsQ0FDMUIsUUFBZ0IsRUFDaEIsbUJBQXlDLEVBQ3pDLFVBQStCO1lBRS9CLE9BQU8sOEJBQW1CLENBQ3hCLDBDQUErQixDQUFDLGtCQUFrQixDQUFDLENBQ2pELFFBQVEsRUFDUixtQkFBbUIsRUFDbkIsVUFBVSxDQUNYLENBQ0YsQ0FBQztRQUNKLENBQUM7UUFFRCxnQkFBZ0IsQ0FDZCxRQUFnQixFQUNoQixxQkFBMkM7WUFFM0MsT0FBTyw4QkFBbUIsQ0FDeEIsNENBQWlDLENBQUMsa0JBQWtCLENBQUMsQ0FDbkQsUUFBUSxFQUNSLHFCQUFxQixFQUNyQixFQUFFLENBQ0gsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUNELDhCQUE4QixDQUM1QixRQUFnQixFQUNoQixxQkFBMkMsRUFDM0MsVUFBK0I7WUFFL0IsT0FBTyw4QkFBbUIsQ0FDeEIsNENBQWlDLENBQUMsa0JBQWtCLENBQUMsQ0FDbkQsUUFBUSxFQUNSLHFCQUFxQixFQUNyQixVQUFVLENBQ1gsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUVELGtCQUFrQixDQUFDLFFBQWdCO1lBQ2pDLE9BQU8sOEJBQW1CLENBQUMsNkJBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBQ0Qsa0JBQWtCLENBQUMsUUFBZ0I7WUFDakMsT0FBTyw4QkFBbUIsQ0FBQyw2QkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzNELENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkVELDhCQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGdldFRvSGF2ZURhdGFTb3VyY2VXaXRoUHJvcGVydGllcyxcbiAgdG9CZVZhbGlkVGVycmFmb3JtLFxuICB0b1BsYW5TdWNjZXNzZnVsbHksXG59IGZyb20gXCIuLi9tYXRjaGVyc1wiO1xuaW1wb3J0IHtcbiAgZ2V0VG9IYXZlUmVzb3VyY2VXaXRoUHJvcGVydGllcyxcbiAgVGVycmFmb3JtQ29uc3RydWN0b3IsXG4gIE1hdGNoZXJSZXR1cm5KZXN0LFxuICByZXR1cm5NYXRjaGVyVG9KZXN0LFxufSBmcm9tIFwiLi4vbWF0Y2hlcnNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSPiB7XG4gICAgICB0b0hhdmVSZXNvdXJjZShyZXNvdXJjZUNvbnN0cnVjdG9yOiBUZXJyYWZvcm1Db25zdHJ1Y3Rvcik6IFI7XG4gICAgICB0b0hhdmVSZXNvdXJjZVdpdGhQcm9wZXJ0aWVzKFxuICAgICAgICByZXNvdXJjZUNvbnN0cnVjdG9yOiBUZXJyYWZvcm1Db25zdHJ1Y3RvcixcbiAgICAgICAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55PlxuICAgICAgKTogUjtcblxuICAgICAgdG9IYXZlRGF0YVNvdXJjZShkYXRhU291cmNlQ29uc3RydWN0b3I6IFRlcnJhZm9ybUNvbnN0cnVjdG9yKTogUjtcbiAgICAgIHRvSGF2ZURhdGFTb3VyY2VXaXRoUHJvcGVydGllcyhcbiAgICAgICAgZGF0YVNvdXJjZUNvbnN0cnVjdG9yOiBUZXJyYWZvcm1Db25zdHJ1Y3RvcixcbiAgICAgICAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55PlxuICAgICAgKTogUjtcbiAgICAgIHRvQmVWYWxpZFRlcnJhZm9ybSgpOiBSO1xuICAgICAgdG9QbGFuU3VjY2Vzc2Z1bGx5KCk6IFI7XG4gICAgfVxuICB9XG59XG5cbnR5cGUgSmVzdEV4cGVjdCA9IHtcbiAgZXh0ZW5kOiAoXG4gICAgbWF0Y2hlcnM6IFJlY29yZDxzdHJpbmcsICguLi5hcmdzOiBhbnlbXSkgPT4gTWF0Y2hlclJldHVybkplc3Q+XG4gICkgPT4gdm9pZDtcbn07XG5cbi8vIEplc3Qgc3VwcG9ydHMgYXN5bWV0cmljIG1hdGNoZXJzIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svamVzdC9ibG9iL21haW4vcGFja2FnZXMvZXhwZWN0L3NyYy9hc3ltbWV0cmljTWF0Y2hlcnMudHMpXG4vLyBUaGVzZSBtYXRjaGVycyBhcmUgZ3JlYXQgaW4gZXhwcmVzc2luZyBwYXJ0aWFsIGVxdWFsaXR5IGluIGEgZGVlcGx5IG5lc3RlZCB3YXlcbi8vIEFzIHdlIHdhbnQgdG8gc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRlc3RpbmcgZnJhbWV3b3JrIHdlIGNhbiBub3QgdXNlIHRoZW0gZXZlcnl3aGVyZVxuZnVuY3Rpb24gamVzdFBhc3NFdmFsdWF0aW9uKFxuICBpdGVtczogYW55W10sXG4gIGFzc2VydGVkUHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55PlxuKTogYm9vbGVhbiB7XG4gIGlmIChPYmplY3QuZW50cmllcyhhc3NlcnRlZFByb3BlcnRpZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwO1xuICB9IGVsc2Uge1xuICAgIGlmICgoZ2xvYmFsIGFzIGFueSkuZXhwZWN0KSB7XG4gICAgICBjb25zdCBleHBlY3QgPSAoZ2xvYmFsIGFzIGFueSkuZXhwZWN0O1xuICAgICAgcmV0dXJuIGV4cGVjdFxuICAgICAgICAuYXJyYXlDb250YWluaW5nKFtleHBlY3Qub2JqZWN0Q29udGFpbmluZyhhc3NlcnRlZFByb3BlcnRpZXMpXSlcbiAgICAgICAgLmFzeW1tZXRyaWNNYXRjaChpdGVtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJleHBlY3QgaXMgbm90IGRlZmluZWQsIGplc3Qgd2FzIG5vdCBwcm9wZWx5IGluc3RhbnRpYXRlZFwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBKZXN0KCkge1xuICBpZiAoIShcImV4cGVjdFwiIGluIGdsb2JhbCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR1cEplc3QgY2FsbGVkLCBidXQgZXhwZWN0IGlzIG5vdCBnbG9iYWxseSBhY2Nlc3NpYmxlXCIpO1xuICB9XG5cbiAgY29uc3QgZXhwZWN0ID0gKGdsb2JhbCBhcyBhbnkpLmV4cGVjdCBhcyBKZXN0RXhwZWN0O1xuXG4gIGV4cGVjdC5leHRlbmQoe1xuICAgIHRvSGF2ZVJlc291cmNlKFxuICAgICAgcmVjZWl2ZWQ6IHN0cmluZyxcbiAgICAgIHJlc291cmNlQ29uc3RydWN0b3I6IFRlcnJhZm9ybUNvbnN0cnVjdG9yXG4gICAgKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWF0Y2hlclRvSmVzdChcbiAgICAgICAgZ2V0VG9IYXZlUmVzb3VyY2VXaXRoUHJvcGVydGllcyhqZXN0UGFzc0V2YWx1YXRpb24pKFxuICAgICAgICAgIHJlY2VpdmVkLFxuICAgICAgICAgIHJlc291cmNlQ29uc3RydWN0b3IsXG4gICAgICAgICAge31cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9LFxuICAgIHRvSGF2ZVJlc291cmNlV2l0aFByb3BlcnRpZXMoXG4gICAgICByZWNlaXZlZDogc3RyaW5nLFxuICAgICAgcmVzb3VyY2VDb25zdHJ1Y3RvcjogVGVycmFmb3JtQ29uc3RydWN0b3IsXG4gICAgICBwcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICAgKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWF0Y2hlclRvSmVzdChcbiAgICAgICAgZ2V0VG9IYXZlUmVzb3VyY2VXaXRoUHJvcGVydGllcyhqZXN0UGFzc0V2YWx1YXRpb24pKFxuICAgICAgICAgIHJlY2VpdmVkLFxuICAgICAgICAgIHJlc291cmNlQ29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvcGVydGllc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG5cbiAgICB0b0hhdmVEYXRhU291cmNlKFxuICAgICAgcmVjZWl2ZWQ6IHN0cmluZyxcbiAgICAgIGRhdGFTb3VyY2VDb25zdHJ1Y3RvcjogVGVycmFmb3JtQ29uc3RydWN0b3JcbiAgICApIHtcbiAgICAgIHJldHVybiByZXR1cm5NYXRjaGVyVG9KZXN0KFxuICAgICAgICBnZXRUb0hhdmVEYXRhU291cmNlV2l0aFByb3BlcnRpZXMoamVzdFBhc3NFdmFsdWF0aW9uKShcbiAgICAgICAgICByZWNlaXZlZCxcbiAgICAgICAgICBkYXRhU291cmNlQ29uc3RydWN0b3IsXG4gICAgICAgICAge31cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9LFxuICAgIHRvSGF2ZURhdGFTb3VyY2VXaXRoUHJvcGVydGllcyhcbiAgICAgIHJlY2VpdmVkOiBzdHJpbmcsXG4gICAgICBkYXRhU291cmNlQ29uc3RydWN0b3I6IFRlcnJhZm9ybUNvbnN0cnVjdG9yLFxuICAgICAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55PlxuICAgICkge1xuICAgICAgcmV0dXJuIHJldHVybk1hdGNoZXJUb0plc3QoXG4gICAgICAgIGdldFRvSGF2ZURhdGFTb3VyY2VXaXRoUHJvcGVydGllcyhqZXN0UGFzc0V2YWx1YXRpb24pKFxuICAgICAgICAgIHJlY2VpdmVkLFxuICAgICAgICAgIGRhdGFTb3VyY2VDb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm9wZXJ0aWVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHRvQmVWYWxpZFRlcnJhZm9ybShyZWNlaXZlZDogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWF0Y2hlclRvSmVzdCh0b0JlVmFsaWRUZXJyYWZvcm0ocmVjZWl2ZWQpKTtcbiAgICB9LFxuICAgIHRvUGxhblN1Y2Nlc3NmdWxseShyZWNlaXZlZDogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gcmV0dXJuTWF0Y2hlclRvSmVzdCh0b1BsYW5TdWNjZXNzZnVsbHkocmVjZWl2ZWQpKTtcbiAgICB9LFxuICB9KTtcbn1cbiJdfQ==