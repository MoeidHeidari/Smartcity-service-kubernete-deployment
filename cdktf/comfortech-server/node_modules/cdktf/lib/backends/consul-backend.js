"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateConsul = exports.ConsulBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
class ConsulBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "consul");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateConsul(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.ConsulBackend = ConsulBackend;
_a = JSII_RTTI_SYMBOL_1;
ConsulBackend[_a] = { fqn: "cdktf.ConsulBackend", version: "0.12.0" };
class DataTerraformRemoteStateConsul extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "consul", config);
    }
}
exports.DataTerraformRemoteStateConsul = DataTerraformRemoteStateConsul;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateConsul[_b] = { fqn: "cdktf.DataTerraformRemoteStateConsul", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VsLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25zdWwtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLE1BQWEsYUFBYyxTQUFRLG9DQUFnQjtJQUNqRCxZQUFZLEtBQWdCLEVBQW1CLEtBQXlCO1FBQ3RFLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBb0I7SUFFeEUsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLHNCQUFlLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ3JELEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBbEJILHNDQW1CQzs7O0FBRUQsTUFBYSw4QkFBK0IsU0FBUSw2Q0FBb0I7SUFDdEUsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsTUFBNEM7UUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7O0FBUEgsd0VBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb25zdWxCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IENvbnN1bEJhY2tlbmRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJjb25zdWxcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uc3VsKHNjb3BlLCBuYW1lLCB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgd29ya3NwYWNlOiBcIiR7dGVycmFmb3JtLndvcmtzcGFjZX1cIixcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uc3VsIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25zdWxDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImNvbnN1bFwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgaW4gdGhlIENvbnN1bCBLViBzdG9yZSBhdCBhIGdpdmVuIHBhdGguXG4gKiBUaGlzIGJhY2tlbmQgc3VwcG9ydHMgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9sYW5ndWFnZS9zZXR0aW5ncy9iYWNrZW5kcy9jb25zdWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25zdWxCYWNrZW5kUHJvcHMge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBQYXRoIGluIHRoZSBDb25zdWwgS1Ygc3RvcmVcbiAgICovXG4gIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgQWNjZXNzIHRva2VuXG4gICAqL1xuICByZWFkb25seSBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBETlMgbmFtZSBhbmQgcG9ydCBvZiB5b3VyIENvbnN1bCBlbmRwb2ludCBzcGVjaWZpZWQgaW4gdGhlIGZvcm1hdCBkbnNuYW1lOnBvcnQuXG4gICAqICBEZWZhdWx0cyB0byB0aGUgbG9jYWwgYWdlbnQgSFRUUCBsaXN0ZW5lci5cbiAgICovXG4gIHJlYWRvbmx5IGFkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFNwZWNpZmllcyB3aGF0IHByb3RvY29sIHRvIHVzZSB3aGVuIHRhbGtpbmcgdG8gdGhlIGdpdmVuIGFkZHJlc3MsZWl0aGVyIGh0dHAgb3IgaHR0cHMuXG4gICAqIFNTTCBzdXBwb3J0IGNhbiBhbHNvIGJlIHRyaWdnZXJlZCBieSBzZXR0aW5nIHRoZW4gZW52aXJvbm1lbnQgdmFyaWFibGUgQ09OU1VMX0hUVFBfU1NMIHRvIHRydWUuXG4gICAqL1xuICByZWFkb25seSBzY2hlbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBkYXRhY2VudGVyIHRvIHVzZS4gRGVmYXVsdHMgdG8gdGhhdCBvZiB0aGUgYWdlbnQuXG4gICAqL1xuICByZWFkb25seSBkYXRhY2VudGVyPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBIVFRQIEJhc2ljIEF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggQ29uc3VsLFxuICAgKiBpbiB0aGUgZm9ybWF0IG9mIGVpdGhlciB1c2VyIG9yIHVzZXI6cGFzcy5cbiAgICovXG4gIHJlYWRvbmx5IGh0dHBBdXRoPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSB0cnVlIHRvIGNvbXByZXNzIHRoZSBzdGF0ZSBkYXRhIHVzaW5nIGd6aXAsXG4gICAqIG9yIGZhbHNlICh0aGUgZGVmYXVsdCkgdG8gbGVhdmUgaXQgdW5jb21wcmVzc2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgZ3ppcD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIGZhbHNlIHRvIGRpc2FibGUgbG9ja2luZy5cbiAgICogVGhpcyBkZWZhdWx0cyB0byB0cnVlLCBidXQgd2lsbCByZXF1aXJlIHNlc3Npb24gcGVybWlzc2lvbnMgd2l0aCBDb25zdWwgYW5kXG4gICAqIGF0IGxlYXN0IGt2IHdyaXRlIHBlcm1pc3Npb25zIG9uICRwYXRoLy5sb2NrIHRvIHBlcmZvcm0gbG9ja2luZy5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSBhdXRob3JpdHlcbiAgICogdXNlZCB0byB2ZXJpZnkgdGhlIHJlbW90ZSBhZ2VudCdzIGNlcnRpZmljYXRlLlxuICAgKi9cbiAgcmVhZG9ubHkgY2FGaWxlPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSBwcm92aWRlZCB0byB0aGUgcmVtb3RlIGFnZW50O1xuICAgKiByZXF1aXJlcyB1c2Ugb2Yga2V5X2ZpbGUuXG4gICAqL1xuICByZWFkb25seSBjZXJ0RmlsZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSBwYXRoIHRvIGEgUEVNLWVuY29kZWQgcHJpdmF0ZSBrZXksIHJlcXVpcmVkIGlmIGNlcnRfZmlsZSBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICByZWFkb25seSBrZXlGaWxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbnN1bENvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBDb25zdWxCYWNrZW5kUHJvcHMge31cbiJdfQ==