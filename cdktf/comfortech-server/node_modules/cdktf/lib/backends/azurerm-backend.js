"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateAzurerm = exports.AzurermBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
class AzurermBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "azurerm");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateAzurerm(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.AzurermBackend = AzurermBackend;
_a = JSII_RTTI_SYMBOL_1;
AzurermBackend[_a] = { fqn: "cdktf.AzurermBackend", version: "0.12.0" };
class DataTerraformRemoteStateAzurerm extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "azurerm", config);
    }
}
exports.DataTerraformRemoteStateAzurerm = DataTerraformRemoteStateAzurerm;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateAzurerm[_b] = { fqn: "cdktf.DataTerraformRemoteStateAzurerm", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmVybS1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXp1cmVybS1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsNERBQXdEO0FBQ3hELGtDQUEwQztBQUMxQyxzRUFHbUM7QUFFbkMsTUFBYSxjQUFlLFNBQVEsb0NBQWdCO0lBQ2xELFlBQVksS0FBZ0IsRUFBbUIsS0FBMEI7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFEVSxVQUFLLEdBQUwsS0FBSyxDQUFxQjtJQUV6RSxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sc0JBQWUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLCtCQUErQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDdEQsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFsQkgsd0NBbUJDOzs7QUFFRCxNQUFhLCtCQUFnQyxTQUFRLDZDQUFvQjtJQUN2RSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUE2QztRQUU3QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7QUFQSCwwRUFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuZXhwb3J0IGNsYXNzIEF6dXJlcm1CYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEF6dXJlcm1CYWNrZW5kUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiYXp1cmVybVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBenVyZXJtKHNjb3BlLCBuYW1lLCB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgd29ya3NwYWNlOiBcIiR7dGVycmFmb3JtLndvcmtzcGFjZX1cIixcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXp1cmVybSBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXp1cmVybUNvbmZpZ1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiYXp1cmVybVwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgYXMgYSBCbG9iIHdpdGggdGhlIGdpdmVuIEtleVxuICogd2l0aGluIHRoZSBCbG9iIENvbnRhaW5lciB3aXRoaW4gdGhlIEJsb2IgU3RvcmFnZSBBY2NvdW50LlxuICpcbiAqIFRoaXMgYmFja2VuZCBzdXBwb3J0cyBzdGF0ZSBsb2NraW5nIGFuZCBjb25zaXN0ZW5jeSBjaGVja2luZ1xuICogd2l0aCBBenVyZSBCbG9iIFN0b3JhZ2UgbmF0aXZlIGNhcGFiaWxpdGllcy5cbiAqXG4gKiBOb3RlOiBCeSBkZWZhdWx0IHRoZSBBenVyZSBCYWNrZW5kIHVzZXMgQURBTCBmb3IgYXV0aGVudGljYXRpb24gd2hpY2ggaXMgZGVwcmVjYXRlZFxuICogaW4gZmF2b3VyIG9mIE1TQUwgLSBNU0FMIGNhbiBiZSB1c2VkIGJ5IHNldHRpbmcgdXNlX21pY3Jvc29mdF9ncmFwaCB0byB0cnVlLlxuICogVGhlIGRlZmF1bHQgZm9yIHRoaXMgd2lsbCBjaGFuZ2UgaW4gVGVycmFmb3JtIDEuMixcbiAqIHNvIHRoYXQgTVNBTCBhdXRoZW50aWNhdGlvbiBpcyB1c2VkIGJ5IGRlZmF1bHQuXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHRoaXMgYmFja2VuZCBpbiB0aGUgVGVycmFmb3JtIGRvY3M6XG4gKiBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vbGFuZ3VhZ2Uvc2V0dGluZ3MvYmFja2VuZHMvYXp1cmVybVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlcm1CYWNrZW5kUHJvcHMge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBUaGUgTmFtZSBvZiB0aGUgU3RvcmFnZSBBY2NvdW50LlxuICAgKi9cbiAgcmVhZG9ubHkgc3RvcmFnZUFjY291bnROYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBOYW1lIG9mIHRoZSBTdG9yYWdlIENvbnRhaW5lciB3aXRoaW4gdGhlIFN0b3JhZ2UgQWNjb3VudC5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRhaW5lck5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgVGhlIG5hbWUgb2YgdGhlIEJsb2IgdXNlZCB0byByZXRyaWV2ZS9zdG9yZSBUZXJyYWZvcm0ncyBTdGF0ZSBmaWxlXG4gICAqIGluc2lkZSB0aGUgU3RvcmFnZSBDb250YWluZXIuXG4gICAqL1xuICByZWFkb25seSBrZXk6IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIEF6dXJlIEVudmlyb25tZW50IHdoaWNoIHNob3VsZCBiZSB1c2VkLlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX0VOVklST05NRU5UIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKiAgUG9zc2libGUgdmFsdWVzIGFyZSBwdWJsaWMsIGNoaW5hLCBnZXJtYW4sIHN0YWNrIGFuZCB1c2dvdmVybm1lbnQuIERlZmF1bHRzIHRvIHB1YmxpYy5cbiAgICovXG4gIHJlYWRvbmx5IGVudmlyb25tZW50Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgQ3VzdG9tIEVuZHBvaW50IGZvciBBenVyZSBSZXNvdXJjZSBNYW5hZ2VyLlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX0VORFBPSU5UIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKlxuICAgKiBOT1RFOiBBbiBlbmRwb2ludCBzaG91bGQgb25seSBiZSBjb25maWd1cmVkIHdoZW4gdXNpbmcgQXp1cmUgU3RhY2suXG4gICAqL1xuICByZWFkb25seSBlbmRwb2ludD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIFN1YnNjcmlwdGlvbiBJRCBpbiB3aGljaCB0aGUgU3RvcmFnZSBBY2NvdW50IGV4aXN0cy5cbiAgICogVGhpcyBjYW4gYWxzbyBiZSBzb3VyY2VkIGZyb20gdGhlIEFSTV9TVUJTQ1JJUFRJT05fSUQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSBzdWJzY3JpcHRpb25JZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIFRlbmFudCBJRCBpbiB3aGljaCB0aGUgU3Vic2NyaXB0aW9uIGV4aXN0cy5cbiAgICogVGhpcyBjYW4gYWxzbyBiZSBzb3VyY2VkIGZyb20gdGhlIEFSTV9URU5BTlRfSUQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSB0ZW5hbnRJZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggdG8gYSBjdXN0b20gTWFuYWdlZCBTZXJ2aWNlIElkZW50aXR5IGVuZHBvaW50IHdoaWNoIGlzIGF1dG9tYXRpY2FsbHlcbiAgICogZGV0ZXJtaW5lZCBpZiBub3Qgc3BlY2lmaWVkLlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX01TSV9FTkRQT0lOVCBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IG1zaUVuZHBvaW50Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBTaG91bGQgTWFuYWdlZCBTZXJ2aWNlIElkZW50aXR5IGF1dGhlbnRpY2F0aW9uIGJlIHVzZWQ/XG4gICAqIFRoaXMgY2FuIGFsc28gYmUgc291cmNlZCBmcm9tIHRoZSBBUk1fVVNFX01TSSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IHVzZU1zaT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBTQVMgVG9rZW4gdXNlZCB0byBhY2Nlc3MgdGhlIEJsb2IgU3RvcmFnZSBBY2NvdW50LlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX1NBU19UT0tFTiBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IHNhc1Rva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogYWNjZXNzX2tleSAtIChPcHRpb25hbCkgVGhlIEFjY2VzcyBLZXkgdXNlZCB0byBhY2Nlc3MgdGhlIEJsb2IgU3RvcmFnZSBBY2NvdW50LlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX0FDQ0VTU19LRVkgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSBhY2Nlc3NLZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBOYW1lIG9mIHRoZSBSZXNvdXJjZSBHcm91cCBpbiB3aGljaCB0aGUgU3RvcmFnZSBBY2NvdW50IGV4aXN0cy5cbiAgICovXG4gIHJlYWRvbmx5IHJlc291cmNlR3JvdXBOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgQ2xpZW50IElEIG9mIHRoZSBTZXJ2aWNlIFByaW5jaXBhbC5cbiAgICogVGhpcyBjYW4gYWxzbyBiZSBzb3VyY2VkIGZyb20gdGhlIEFSTV9DTElFTlRfSUQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSBjbGllbnRJZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIENsaWVudCBTZWNyZXQgb2YgdGhlIFNlcnZpY2UgUHJpbmNpcGFsLlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQVJNX0NMSUVOVF9TRUNSRVQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICByZWFkb25seSBjbGllbnRTZWNyZXQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXp1cmVybUNvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBBenVyZXJtQmFja2VuZFByb3BzIHt9XG4iXX0=