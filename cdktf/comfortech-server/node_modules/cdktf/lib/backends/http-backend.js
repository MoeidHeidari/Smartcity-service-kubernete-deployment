"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateHttp = exports.HttpBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
class HttpBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "http");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateHttp(scope, name, this.props);
    }
}
exports.HttpBackend = HttpBackend;
_a = JSII_RTTI_SYMBOL_1;
HttpBackend[_a] = { fqn: "cdktf.HttpBackend", version: "0.12.0" };
class DataTerraformRemoteStateHttp extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "http", config);
    }
}
exports.DataTerraformRemoteStateHttp = DataTerraformRemoteStateHttp;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateHttp[_b] = { fqn: "cdktf.DataTerraformRemoteStateHttp", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsNERBQXdEO0FBQ3hELGtDQUEwQztBQUMxQyxzRUFHbUM7QUFFbkMsTUFBYSxXQUFZLFNBQVEsb0NBQWdCO0lBQy9DLFlBQVksS0FBZ0IsRUFBbUIsS0FBdUI7UUFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFEYSxVQUFLLEdBQUwsS0FBSyxDQUFrQjtJQUV0RSxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sc0JBQWUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLDRCQUE0QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7O0FBZkgsa0NBZ0JDOzs7QUFFRCxNQUFhLDRCQUE2QixTQUFRLDZDQUFvQjtJQUNwRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUEwQztRQUUxQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7QUFQSCxvRUFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuZXhwb3J0IGNsYXNzIEh0dHBCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEh0dHBCYWNrZW5kUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiaHR0cFwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwKHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlSHR0cCBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlSHR0cENvbmZpZ1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIFwiaHR0cFwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgdXNpbmcgYSBzaW1wbGUgUkVTVCBjbGllbnQuXG4gKlxuICogU3RhdGUgd2lsbCBiZSBmZXRjaGVkIHZpYSBHRVQsIHVwZGF0ZWQgdmlhIFBPU1QsIGFuZCBwdXJnZWQgd2l0aCBERUxFVEUuXG4gKiBUaGUgbWV0aG9kIHVzZWQgZm9yIHVwZGF0aW5nIGlzIGNvbmZpZ3VyYWJsZS5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgb3B0aW9uYWxseSBzdXBwb3J0cyBzdGF0ZSBsb2NraW5nLlxuICogV2hlbiBsb2NraW5nIHN1cHBvcnQgaXMgZW5hYmxlZCBpdCB3aWxsIHVzZSBMT0NLIGFuZCBVTkxPQ0sgcmVxdWVzdHMgcHJvdmlkaW5nIHRoZSBsb2NrIGluZm8gaW4gdGhlIGJvZHkuXG4gKiBUaGUgZW5kcG9pbnQgc2hvdWxkIHJldHVybiBhIDQyMzogTG9ja2VkIG9yIDQwOTogQ29uZmxpY3Qgd2l0aCB0aGUgaG9sZGluZyBsb2NrIGluZm8gd2hlblxuICogaXQncyBhbHJlYWR5IHRha2VuLCAyMDA6IE9LIGZvciBzdWNjZXNzLiBBbnkgb3RoZXIgc3RhdHVzIHdpbGwgYmUgY29uc2lkZXJlZCBhbiBlcnJvci5cbiAqIFRoZSBJRCBvZiB0aGUgaG9sZGluZyBsb2NrIGluZm8gd2lsbCBiZSBhZGRlZCBhcyBhIHF1ZXJ5IHBhcmFtZXRlciB0byBzdGF0ZSB1cGRhdGVzIHJlcXVlc3RzLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2h0dHBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIdHRwQmFja2VuZFByb3BzIHtcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgVGhlIGFkZHJlc3Mgb2YgdGhlIFJFU1QgZW5kcG9pbnRcbiAgICovXG4gIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgSFRUUCBtZXRob2QgdG8gdXNlIHdoZW4gdXBkYXRpbmcgc3RhdGUuIERlZmF1bHRzIHRvIFBPU1QuXG4gICAqL1xuICByZWFkb25seSB1cGRhdGVNZXRob2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBhZGRyZXNzIG9mIHRoZSBsb2NrIFJFU1QgZW5kcG9pbnQuIERlZmF1bHRzIHRvIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9ja0FkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBIVFRQIG1ldGhvZCB0byB1c2Ugd2hlbiBsb2NraW5nLiBEZWZhdWx0cyB0byBMT0NLLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9ja01ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGFkZHJlc3Mgb2YgdGhlIHVubG9jayBSRVNUIGVuZHBvaW50LiBEZWZhdWx0cyB0byBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IHVubG9ja0FkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBIVFRQIG1ldGhvZCB0byB1c2Ugd2hlbiB1bmxvY2tpbmcuIERlZmF1bHRzIHRvIFVOTE9DSy5cbiAgICovXG4gIHJlYWRvbmx5IHVubG9ja01ldGhvZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHVzZXJuYW1lIGZvciBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAqL1xuICByZWFkb25seSB1c2VybmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhc3N3b3JkIGZvciBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAqL1xuICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgV2hldGhlciB0byBza2lwIFRMUyB2ZXJpZmljYXRpb24uIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgcmVhZG9ubHkgc2tpcENlcnRWZXJpZmljYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIEhUVFAgcmVxdWVzdCByZXRyaWVzLiBEZWZhdWx0cyB0byAyLlxuICAgKi9cbiAgcmVhZG9ubHkgcmV0cnlNYXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBtaW5pbXVtIHRpbWUgaW4gc2Vjb25kcyB0byB3YWl0IGJldHdlZW4gSFRUUCByZXF1ZXN0IGF0dGVtcHRzLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgcmVhZG9ubHkgcmV0cnlXYWl0TWluPzogbnVtYmVyO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbWF4aW11bSB0aW1lIGluIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIEhUVFAgcmVxdWVzdCBhdHRlbXB0cy4gRGVmYXVsdHMgdG8gMzAuXG4gICAqL1xuICByZWFkb25seSByZXRyeVdhaXRNYXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlSHR0cENvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBIdHRwQmFja2VuZFByb3BzIHt9XG4iXX0=