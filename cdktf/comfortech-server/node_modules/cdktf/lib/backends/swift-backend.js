"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateSwift = exports.SwiftBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
class SwiftBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "swift");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateSwift(scope, name, this.props);
    }
}
exports.SwiftBackend = SwiftBackend;
_a = JSII_RTTI_SYMBOL_1;
SwiftBackend[_a] = { fqn: "cdktf.SwiftBackend", version: "0.12.0" };
class DataTerraformRemoteStateSwift extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "swift", config);
    }
}
exports.DataTerraformRemoteStateSwift = DataTerraformRemoteStateSwift;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateSwift[_b] = { fqn: "cdktf.DataTerraformRemoteStateSwift", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpZnQtYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN3aWZ0LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQyxNQUFhLFlBQWEsU0FBUSxvQ0FBZ0I7SUFDaEQsWUFBWSxLQUFnQixFQUFtQixLQUF3QjtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQURZLFVBQUssR0FBTCxLQUFLLENBQW1CO0lBRXZFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksNkJBQTZCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7QUFmSCxvQ0FnQkM7OztBQUVELE1BQWEsNkJBQThCLFNBQVEsNkNBQW9CO0lBQ3JFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQTJDO1FBRTNDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDOztBQVBILHNFQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUJhY2tlbmQgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IGtleXNUb1NuYWtlQ2FzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1SZW1vdGVTdGF0ZSxcbiAgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxufSBmcm9tIFwiLi4vdGVycmFmb3JtLXJlbW90ZS1zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgU3dpZnRCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFN3aWZ0QmFja2VuZFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcInN3aWZ0XCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZVN3aWZ0KHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlU3dpZnQgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZVN3aWZ0Q29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJzd2lmdFwiLCBjb25maWcpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3dpZnRCYWNrZW5kUHJvcHMge1xuICByZWFkb25seSBhdXRoVXJsPzogc3RyaW5nO1xuICByZWFkb25seSBjbG91ZD86IHN0cmluZztcbiAgcmVhZG9ubHkgY29udGFpbmVyOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN0YXRlTmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgdXNlck5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHVzZXJJZD86IHN0cmluZztcbiAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFwcGxpY2F0aW9uQ3JlZGVudGlhbElkPzogc3RyaW5nO1xuICByZWFkb25seSBhcHBsaWNhdGlvbkNyZWRlbnRpYWxOYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBhcHBsaWNhdGlvbkNyZWRlbnRpYWxTZWNyZXQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRva2VuPzogc3RyaW5nO1xuICByZWFkb25seSByZWdpb25OYW1lPzogc3RyaW5nO1xuICByZWFkb25seSB0ZW5hbnRJZD86IHN0cmluZztcbiAgcmVhZG9ubHkgdGVuYW50TmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgZG9tYWluSWQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRvbWFpbk5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHVzZXJEb21haW5OYW1lPzogc3RyaW5nO1xuICByZWFkb25seSB1c2VyRG9tYWluSWQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb2plY3REb21haW5OYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBwcm9qZWN0RG9tYWluSWQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlZmF1bHREb21haW4/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGluc2VjdXJlPzogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FjZXJ0RmlsZT86IHN0cmluZztcbiAgcmVhZG9ubHkgY2VydD86IHN0cmluZztcbiAgcmVhZG9ubHkga2V5Pzogc3RyaW5nO1xuICByZWFkb25seSBhcmNoaXZlQ29udGFpbmVyPzogc3RyaW5nO1xuICByZWFkb25seSBleHBpcmVBZnRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVTd2lmdENvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBTd2lmdEJhY2tlbmRQcm9wcyB7fVxuIl19