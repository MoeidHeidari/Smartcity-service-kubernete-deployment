"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateArtifactory = exports.ArtifactoryBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
class ArtifactoryBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "artifactory");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateArtifactory(scope, name, this.props);
    }
}
exports.ArtifactoryBackend = ArtifactoryBackend;
_a = JSII_RTTI_SYMBOL_1;
ArtifactoryBackend[_a] = { fqn: "cdktf.ArtifactoryBackend", version: "0.12.0" };
class DataTerraformRemoteStateArtifactory extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "artifactory", config);
    }
}
exports.DataTerraformRemoteStateArtifactory = DataTerraformRemoteStateArtifactory;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateArtifactory[_b] = { fqn: "cdktf.DataTerraformRemoteStateArtifactory", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RvcnktYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFydGlmYWN0b3J5LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQyxNQUFhLGtCQUFtQixTQUFRLG9DQUFnQjtJQUN0RCxZQUNFLEtBQWdCLEVBQ0MsS0FBOEI7UUFFL0MsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFGdEIsVUFBSyxHQUFMLEtBQUssQ0FBeUI7SUFHakQsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLHNCQUFlLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSxtQ0FBbUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDOztBQWxCSCxnREFtQkM7OztBQUVELE1BQWEsbUNBQW9DLFNBQVEsNkNBQW9CO0lBQzNFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQWlEO1FBRWpELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDOztBQVBILGtGQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUJhY2tlbmQgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IGtleXNUb1NuYWtlQ2FzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1SZW1vdGVTdGF0ZSxcbiAgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxufSBmcm9tIFwiLi4vdGVycmFmb3JtLXJlbW90ZS1zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgQXJ0aWZhY3RvcnlCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQXJ0aWZhY3RvcnlCYWNrZW5kUHJvcHNcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcImFydGlmYWN0b3J5XCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUFydGlmYWN0b3J5KHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXJ0aWZhY3RvcnkgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUFydGlmYWN0b3J5Q29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJhcnRpZmFjdG9yeVwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgYXMgYW4gYXJ0aWZhY3QgaW4gYSBnaXZlbiByZXBvc2l0b3J5IGluIEFydGlmYWN0b3J5LlxuICogR2VuZXJpYyBIVFRQIHJlcG9zaXRvcmllcyBhcmUgc3VwcG9ydGVkLCBhbmQgc3RhdGUgZnJvbSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbnNcbiAqIG1heSBiZSBrZXB0IGF0IGRpZmZlcmVudCBzdWJwYXRocyB3aXRoaW4gdGhlIHJlcG9zaXRvcnkuXG4gKlxuICogTm90ZTogVGhlIFVSTCBtdXN0IGluY2x1ZGUgdGhlIHBhdGggdG8gdGhlIEFydGlmYWN0b3J5IGluc3RhbGxhdGlvbi5cbiAqIEl0IHdpbGwgbGlrZWx5IGVuZCBpbiAvYXJ0aWZhY3RvcnkuXG4gKlxuICogVGhpcyBiYWNrZW5kIGRvZXMgbm90IHN1cHBvcnQgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9sYW5ndWFnZS9zZXR0aW5ncy9iYWNrZW5kcy9hcnRpZmFjdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFydGlmYWN0b3J5QmFja2VuZFByb3BzIHtcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgLSBUaGUgdXNlcm5hbWVcbiAgICovXG4gIHJlYWRvbmx5IHVzZXJuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIHBhc3N3b3JkXG4gICAqL1xuICByZWFkb25seSBwYXNzd29yZDogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFRoZSBVUkwuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIGlzIHRoZSBiYXNlIHVybCB0byBhcnRpZmFjdG9yeSBub3QgdGhlIGZ1bGwgcmVwbyBhbmQgc3VicGF0aC5cbiAgICovXG4gIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFRoZSByZXBvc2l0b3J5IG5hbWVcbiAgICovXG4gIHJlYWRvbmx5IHJlcG86IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgLSBQYXRoIHdpdGhpbiB0aGUgcmVwb3NpdG9yeVxuICAgKi9cbiAgcmVhZG9ubHkgc3VicGF0aDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUFydGlmYWN0b3J5Q29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIEFydGlmYWN0b3J5QmFja2VuZFByb3BzIHt9XG4iXX0=