"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformDynamicBlock = void 0;
const tokens_1 = require("./tokens");
const stack_trace_1 = require("./tokens/private/stack-trace");
const DYNAMIC_BLOCK_SYMBOL = Symbol.for("cdktf/TerraformDynamicBlock");
class TerraformDynamicBlock {
    // labels: TODO: support labels, but they seem to be quite rare (issue: https://github.com/hashicorp/terraform-cdk/issues/1939)
    constructor(args) {
        this.iterator = "each"; // name of temporary variable used in iteration, needed in the future when allowing nesting iterators
        Object.defineProperty(this, DYNAMIC_BLOCK_SYMBOL, { value: true });
        this.creationStack = stack_trace_1.captureStackTrace();
        this.forEach = args.forEach;
        this.content = args.content;
    }
    static fromDynamicExpression(expr) {
        return new TerraformDynamicBlock({
            forEach: expr.iterator,
            content: expr.content,
        });
    }
    resolve() {
        throw new Error(`Tried to directly resolve a TerraformDynamicBlock which is not supported.
Dynamic blocks are only supported on block attributes of resources, data sources and providers.`);
    }
    toTerraformDynamicBlockJson() {
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                context.iteratorContext = "DYNAMIC_BLOCK"; // resolve nested Lazy values (within this.content) as dynamic block expressions
                return {
                    for_each: this.forEach._getForEachExpression(),
                    iterator: this.iterator,
                    content: context.resolve(this.content),
                };
            },
        });
    }
    toString() {
        return tokens_1.Token.asString(this);
    }
    /**
     * Turn this Dynamic Block into JSON
     *
     * Called automatically when JSON.stringify() is called on this.
     */
    toJSON() {
        return "<unresolved-terraform-dynamic-block>";
    }
    static isTerraformDynamicBlock(x) {
        return x !== null && typeof x === "object" && DYNAMIC_BLOCK_SYMBOL in x;
    }
}
exports.TerraformDynamicBlock = TerraformDynamicBlock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWR5bmFtaWMtYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXJyYWZvcm0tZHluYW1pYy1ibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxxQ0FBcUU7QUFDckUsOERBQWlFO0FBRWpFLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXZFLE1BQWEscUJBQXFCO0lBS2hDLCtIQUErSDtJQUUvSCxZQUFvQixJQUduQjtRQVBlLGFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxxR0FBcUc7UUFRdEksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsYUFBYSxHQUFHLCtCQUFpQixFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLHFCQUFxQixDQUNqQyxJQUFnQztRQUVoQyxPQUFPLElBQUkscUJBQXFCLENBQUM7WUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3RCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQ2I7Z0dBQzBGLENBQzNGLENBQUM7SUFDSixDQUFDO0lBRU0sMkJBQTJCO1FBQ2hDLE9BQU8sYUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNuQixPQUFPLEVBQUUsQ0FBQyxPQUF3QixFQUFFLEVBQUU7Z0JBQ3BDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLENBQUMsZ0ZBQWdGO2dCQUUzSCxPQUFPO29CQUNMLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFO29CQUM5QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3ZDLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNO1FBQ0osT0FBTyxzQ0FBc0MsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQU07UUFDMUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxvQkFBb0IsSUFBSSxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGO0FBL0RELHNEQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlcnJhZm9ybUR5bmFtaWNFeHByZXNzaW9uIH0gZnJvbSBcIi4vdGVycmFmb3JtLWR5bmFtaWMtZXhwcmVzc2lvblwiO1xuaW1wb3J0IHsgSVRlcnJhZm9ybUl0ZXJhdG9yIH0gZnJvbSBcIi4vdGVycmFmb3JtLWl0ZXJhdG9yXCI7XG5pbXBvcnQgeyBJUmVzb2x2YWJsZSwgSVJlc29sdmVDb250ZXh0LCBMYXp5LCBUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0IHsgY2FwdHVyZVN0YWNrVHJhY2UgfSBmcm9tIFwiLi90b2tlbnMvcHJpdmF0ZS9zdGFjay10cmFjZVwiO1xuXG5jb25zdCBEWU5BTUlDX0JMT0NLX1NZTUJPTCA9IFN5bWJvbC5mb3IoXCJjZGt0Zi9UZXJyYWZvcm1EeW5hbWljQmxvY2tcIik7XG5cbmV4cG9ydCBjbGFzcyBUZXJyYWZvcm1EeW5hbWljQmxvY2sgaW1wbGVtZW50cyBJUmVzb2x2YWJsZSB7XG4gIHB1YmxpYyByZWFkb25seSBjcmVhdGlvblN0YWNrOiBzdHJpbmdbXTtcbiAgcHVibGljIHJlYWRvbmx5IGZvckVhY2g6IElUZXJyYWZvcm1JdGVyYXRvcjtcbiAgcHVibGljIHJlYWRvbmx5IGl0ZXJhdG9yID0gXCJlYWNoXCI7IC8vIG5hbWUgb2YgdGVtcG9yYXJ5IHZhcmlhYmxlIHVzZWQgaW4gaXRlcmF0aW9uLCBuZWVkZWQgaW4gdGhlIGZ1dHVyZSB3aGVuIGFsbG93aW5nIG5lc3RpbmcgaXRlcmF0b3JzXG4gIHB1YmxpYyByZWFkb25seSBjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAvLyBsYWJlbHM6IFRPRE86IHN1cHBvcnQgbGFiZWxzLCBidXQgdGhleSBzZWVtIHRvIGJlIHF1aXRlIHJhcmUgKGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vaGFzaGljb3JwL3RlcnJhZm9ybS1jZGsvaXNzdWVzLzE5MzkpXG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhcmdzOiB7XG4gICAgZm9yRWFjaDogSVRlcnJhZm9ybUl0ZXJhdG9yO1xuICAgIGNvbnRlbnQ6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIH0pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgRFlOQU1JQ19CTE9DS19TWU1CT0wsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgdGhpcy5jcmVhdGlvblN0YWNrID0gY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLmZvckVhY2ggPSBhcmdzLmZvckVhY2g7XG4gICAgdGhpcy5jb250ZW50ID0gYXJncy5jb250ZW50O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tRHluYW1pY0V4cHJlc3Npb24oXG4gICAgZXhwcjogVGVycmFmb3JtRHluYW1pY0V4cHJlc3Npb25cbiAgKTogVGVycmFmb3JtRHluYW1pY0Jsb2NrIHtcbiAgICByZXR1cm4gbmV3IFRlcnJhZm9ybUR5bmFtaWNCbG9jayh7XG4gICAgICBmb3JFYWNoOiBleHByLml0ZXJhdG9yLFxuICAgICAgY29udGVudDogZXhwci5jb250ZW50LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlc29sdmUoKTogYW55IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVHJpZWQgdG8gZGlyZWN0bHkgcmVzb2x2ZSBhIFRlcnJhZm9ybUR5bmFtaWNCbG9jayB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLlxuRHluYW1pYyBibG9ja3MgYXJlIG9ubHkgc3VwcG9ydGVkIG9uIGJsb2NrIGF0dHJpYnV0ZXMgb2YgcmVzb3VyY2VzLCBkYXRhIHNvdXJjZXMgYW5kIHByb3ZpZGVycy5gXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1RlcnJhZm9ybUR5bmFtaWNCbG9ja0pzb24oKTogSVJlc29sdmFibGUge1xuICAgIHJldHVybiBMYXp5LmFueVZhbHVlKHtcbiAgICAgIHByb2R1Y2U6IChjb250ZXh0OiBJUmVzb2x2ZUNvbnRleHQpID0+IHtcbiAgICAgICAgY29udGV4dC5pdGVyYXRvckNvbnRleHQgPSBcIkRZTkFNSUNfQkxPQ0tcIjsgLy8gcmVzb2x2ZSBuZXN0ZWQgTGF6eSB2YWx1ZXMgKHdpdGhpbiB0aGlzLmNvbnRlbnQpIGFzIGR5bmFtaWMgYmxvY2sgZXhwcmVzc2lvbnNcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvcl9lYWNoOiB0aGlzLmZvckVhY2guX2dldEZvckVhY2hFeHByZXNzaW9uKCksXG4gICAgICAgICAgaXRlcmF0b3I6IHRoaXMuaXRlcmF0b3IsXG4gICAgICAgICAgY29udGVudDogY29udGV4dC5yZXNvbHZlKHRoaXMuY29udGVudCksXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVHVybiB0aGlzIER5bmFtaWMgQmxvY2sgaW50byBKU09OXG4gICAqXG4gICAqIENhbGxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gSlNPTi5zdHJpbmdpZnkoKSBpcyBjYWxsZWQgb24gdGhpcy5cbiAgICovXG4gIHRvSlNPTigpOiBhbnkge1xuICAgIHJldHVybiBcIjx1bnJlc29sdmVkLXRlcnJhZm9ybS1keW5hbWljLWJsb2NrPlwiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc1RlcnJhZm9ybUR5bmFtaWNCbG9jayh4OiBhbnkpOiB4IGlzIFRlcnJhZm9ybUR5bmFtaWNCbG9jayB7XG4gICAgcmV0dXJuIHggIT09IG51bGwgJiYgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgRFlOQU1JQ19CTE9DS19TWU1CT0wgaW4geDtcbiAgfVxufVxuIl19