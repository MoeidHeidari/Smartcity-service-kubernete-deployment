"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformAsset = exports.AssetType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const fs_1 = require("./private/fs");
const resource_1 = require("./resource");
const synthesizer_1 = require("./synthesize/synthesizer");
var AssetType;
(function (AssetType) {
    AssetType[AssetType["FILE"] = 0] = "FILE";
    AssetType[AssetType["DIRECTORY"] = 1] = "DIRECTORY";
    AssetType[AssetType["ARCHIVE"] = 2] = "ARCHIVE";
})(AssetType = exports.AssetType || (exports.AssetType = {}));
const ARCHIVE_NAME = "archive.zip";
const ASSETS_DIRECTORY = "assets";
class TerraformAsset extends resource_1.Resource {
    /**
     * A Terraform Asset takes a file or directory outside of the CDK for Terraform context and moves it into it.
     * Assets copy referenced files into the stacks context for further usage in other resources.
     * @param scope
     * @param id
     * @param config
     */
    constructor(scope, id, config) {
        super(scope, id);
        if (path.isAbsolute(config.path)) {
            this.sourcePath = config.path;
        }
        else {
            const cdktfJsonPath = scope.node.tryGetContext("cdktfJsonPath") ??
                fs_1.findFileAboveCwd("cdktf.json");
            if (cdktfJsonPath) {
                // Relative paths are always considered to be relative to cdktf.json, but operations are performed relative to process.cwd
                const absolutePath = path.resolve(path.dirname(cdktfJsonPath), config.path);
                this.sourcePath = path.relative(process.cwd(), absolutePath);
            }
            else {
                throw new Error(`TerraformAsset ${id} was created with a relative path '${config.path}', but no cdktf.json file was found to base it on.`);
            }
        }
        const stat = fs.statSync(this.sourcePath);
        const inferredType = stat.isFile() ? AssetType.FILE : AssetType.DIRECTORY;
        this.type = config.type ?? inferredType;
        this.assetHash = config.assetHash || fs_1.hashPath(this.sourcePath);
        if (stat.isFile() && this.type !== AssetType.FILE) {
            throw new Error(`TerraformAsset ${id} expects path to be a directory, a file was passed: '${config.path}'`);
        }
        if (!stat.isFile() && this.type === AssetType.FILE) {
            throw new Error(`TerraformAsset ${id} expects path to be a file, a directory was passed: '${config.path}'`);
        }
        synthesizer_1.addCustomSynthesis(this, {
            onSynthesize: this._onSynthesize.bind(this),
        });
    }
    get namedFolder() {
        return path.posix.join(ASSETS_DIRECTORY, this.stack.getLogicalId(this.node));
    }
    /**
     * The path relative to the root of the terraform directory in posix format
     * Use this property to reference the asset
     */
    get path() {
        return path.posix.join(this.namedFolder, // readable name
        this.assetHash, // hash depending on content so that path changes if content changes
        this.type === AssetType.DIRECTORY ? "" : this.fileName);
    }
    /**
     * Name of the asset
     */
    get fileName() {
        switch (this.type) {
            case AssetType.ARCHIVE:
                return ARCHIVE_NAME;
            default:
                return path.basename(this.sourcePath);
        }
    }
    _onSynthesize(session) {
        const stackManifest = session.manifest.forStack(this.stack);
        const basePath = path.join(session.manifest.outdir, stackManifest.synthesizedStackPath, "..");
        // Cleanup existing assets
        const previousVersionsFolder = path.join(basePath, this.namedFolder);
        if (fs.existsSync(previousVersionsFolder)) {
            fs.rmSync(previousVersionsFolder, { recursive: true });
        }
        const targetPath = path.join(basePath, this.path);
        if (this.type === AssetType.DIRECTORY) {
            fs.mkdirSync(targetPath, { recursive: true });
        }
        else {
            fs.mkdirSync(path.dirname(targetPath), { recursive: true });
        }
        switch (this.type) {
            case AssetType.FILE:
                fs.copyFileSync(this.sourcePath, targetPath);
                break;
            case AssetType.DIRECTORY:
                fs_1.copySync(this.sourcePath, targetPath);
                break;
            case AssetType.ARCHIVE:
                fs_1.archiveSync(this.sourcePath, targetPath);
                break;
            default:
                throw new Error(`Asset type ${this.type} is not implemented`);
        }
    }
}
exports.TerraformAsset = TerraformAsset;
_a = JSII_RTTI_SYMBOL_1;
TerraformAsset[_a] = { fqn: "cdktf.TerraformAsset", version: "0.12.0" };
//# sourceMappingURL=data:application/json;base64,