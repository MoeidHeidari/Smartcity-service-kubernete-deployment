"use strict";
// ----------------------------------------------------------------------
// PROPERTY MAPPERS
//
// These are used while converting generated classes/property bags to Terraform JSON objects
//
// We use identity mappers for the primitive types. These don't do anything but are there to make the code
// generation work out nicely (so the code generator doesn't need to emit different code for primitive
Object.defineProperty(exports, "__esModule", { value: true });
exports.isComplexElement = exports.canInspect = exports.hashMapper = exports.listMapper = exports.numberToTerraform = exports.anyToTerraform = exports.booleanToTerraform = exports.stringToTerraform = void 0;
const encoding_1 = require("./tokens/private/encoding");
Object.defineProperty(exports, "isComplexElement", { enumerable: true, get: function () { return encoding_1.isComplexElement; } });
const tokens_1 = require("./tokens");
const terraform_dynamic_block_1 = require("./terraform-dynamic-block");
const terraform_dynamic_expression_1 = require("./terraform-dynamic-expression");
function identity(x) {
    return x;
}
exports.stringToTerraform = identity;
exports.booleanToTerraform = identity;
exports.anyToTerraform = identity;
exports.numberToTerraform = identity;
/**
 * @param isBlockType blocks and lists of objects need to be handled different in Terraform
 *                    but are represented exactly the same in generated bindings
 *                    currently this is used to resolve TerraformDynamicBlocks if not within
 *                    a block type (will be resolved to a for expression for those instead of
 *                    a dynamic block)
 */
function listMapper(elementMapper, isBlockType) {
    return (x) => {
        if (!canInspect(x)) {
            return x;
        }
        // replace dynamic expressions for block types so they can be detected and replaced properly by processDynamicAttributes()
        // which also relocates them to dynamic.attributeName (something we can't do when resolving a value, put it somewhere else)
        // if isBlockType is false, the TerraformDynamicExpression that is present will be resolved (it implements IResolvable) to a
        // for expression directly (which can be used e.g. within Terraform functions or for attributes that are not of a block type)
        if (terraform_dynamic_expression_1.TerraformDynamicExpression.isTerraformDynamicExpression(x) &&
            isBlockType) {
            return terraform_dynamic_block_1.TerraformDynamicBlock.fromDynamicExpression(x);
        }
        if (!Array.isArray(x)) {
            return x;
        }
        return x.map(elementMapper);
    };
}
exports.listMapper = listMapper;
function hashMapper(elementMapper) {
    return (x) => {
        if (!canInspect(x)) {
            return x;
        }
        // Check if it's a token object
        if (encoding_1.containsComplexElement(x)) {
            return x;
        }
        if (tokens_1.Tokenization.isResolvable(x)) {
            return x;
        }
        // We can't treat strings as hashes (likely a token or a misconfiguration)
        if (typeof x === "string") {
            return x;
        }
        if (encoding_1.containsMapToken(x)) {
            return x;
        }
        const ret = {};
        Object.keys(x).forEach((key) => {
            ret[key] = elementMapper(x[key]);
        });
        return ret;
    };
}
exports.hashMapper = hashMapper;
/**
 * Return whether this object can be validated at all
 *
 * True unless it's undefined
 */
function canInspect(x) {
    // Note: using weak equality on purpose, we also want to catch undefined
    return x != null;
}
exports.canInspect = canInspect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJ1bnRpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlFQUF5RTtBQUN6RSxtQkFBbUI7QUFDbkIsRUFBRTtBQUNGLDRGQUE0RjtBQUM1RixFQUFFO0FBQ0YsMEdBQTBHO0FBQzFHLHNHQUFzRzs7O0FBRXRHLHdEQUltQztBQStGMUIsaUdBakdQLDJCQUFnQixPQWlHTztBQTlGekIscUNBQXdDO0FBQ3hDLHVFQUFrRTtBQUNsRSxpRkFBNEU7QUFLNUUsU0FBUyxRQUFRLENBQUMsQ0FBTTtJQUN0QixPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFWSxRQUFBLGlCQUFpQixHQUFXLFFBQVEsQ0FBQztBQUNyQyxRQUFBLGtCQUFrQixHQUFXLFFBQVEsQ0FBQztBQUN0QyxRQUFBLGNBQWMsR0FBVyxRQUFRLENBQUM7QUFDbEMsUUFBQSxpQkFBaUIsR0FBVyxRQUFRLENBQUM7QUFFbEQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsVUFBVSxDQUN4QixhQUFxQixFQUNyQixXQUFxQjtJQUVyQixPQUFPLENBQUMsQ0FBTSxFQUFFLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsMEhBQTBIO1FBQzFILDJIQUEySDtRQUMzSCw0SEFBNEg7UUFDNUgsNkhBQTZIO1FBQzdILElBQ0UseURBQTBCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1lBQzFELFdBQVcsRUFDWDtZQUNBLE9BQU8sK0NBQXFCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQztBQUNKLENBQUM7QUExQkQsZ0NBMEJDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLGFBQXFCO0lBQzlDLE9BQU8sQ0FBQyxDQUFNLEVBQUUsRUFBRTtRQUNoQixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFFRCwrQkFBK0I7UUFDL0IsSUFBSSxpQ0FBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsSUFBSSxxQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoQyxPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsMEVBQTBFO1FBQzFFLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFFRCxJQUFJLDJCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFFRCxNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFFcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUM7QUFDSixDQUFDO0FBaENELGdDQWdDQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixVQUFVLENBQUMsQ0FBTTtJQUMvQix3RUFBd0U7SUFDeEUsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUM7QUFIRCxnQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFBST1BFUlRZIE1BUFBFUlNcbi8vXG4vLyBUaGVzZSBhcmUgdXNlZCB3aGlsZSBjb252ZXJ0aW5nIGdlbmVyYXRlZCBjbGFzc2VzL3Byb3BlcnR5IGJhZ3MgdG8gVGVycmFmb3JtIEpTT04gb2JqZWN0c1xuLy9cbi8vIFdlIHVzZSBpZGVudGl0eSBtYXBwZXJzIGZvciB0aGUgcHJpbWl0aXZlIHR5cGVzLiBUaGVzZSBkb24ndCBkbyBhbnl0aGluZyBidXQgYXJlIHRoZXJlIHRvIG1ha2UgdGhlIGNvZGVcbi8vIGdlbmVyYXRpb24gd29yayBvdXQgbmljZWx5IChzbyB0aGUgY29kZSBnZW5lcmF0b3IgZG9lc24ndCBuZWVkIHRvIGVtaXQgZGlmZmVyZW50IGNvZGUgZm9yIHByaW1pdGl2ZVxuXG5pbXBvcnQge1xuICBjb250YWluc0NvbXBsZXhFbGVtZW50LFxuICBpc0NvbXBsZXhFbGVtZW50LFxuICBjb250YWluc01hcFRva2VuLFxufSBmcm9tIFwiLi90b2tlbnMvcHJpdmF0ZS9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgVG9rZW5pemF0aW9uIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1EeW5hbWljQmxvY2sgfSBmcm9tIFwiLi90ZXJyYWZvcm0tZHluYW1pYy1ibG9ja1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtRHluYW1pY0V4cHJlc3Npb24gfSBmcm9tIFwiLi90ZXJyYWZvcm0tZHluYW1pYy1leHByZXNzaW9uXCI7XG5cbi8vIHZzLiBjb21wbGV4IHR5cGVzKS5cbmV4cG9ydCB0eXBlIE1hcHBlciA9ICh4OiBhbnkpID0+IGFueTtcblxuZnVuY3Rpb24gaWRlbnRpdHkoeDogYW55KSB7XG4gIHJldHVybiB4O1xufVxuXG5leHBvcnQgY29uc3Qgc3RyaW5nVG9UZXJyYWZvcm06IE1hcHBlciA9IGlkZW50aXR5O1xuZXhwb3J0IGNvbnN0IGJvb2xlYW5Ub1RlcnJhZm9ybTogTWFwcGVyID0gaWRlbnRpdHk7XG5leHBvcnQgY29uc3QgYW55VG9UZXJyYWZvcm06IE1hcHBlciA9IGlkZW50aXR5O1xuZXhwb3J0IGNvbnN0IG51bWJlclRvVGVycmFmb3JtOiBNYXBwZXIgPSBpZGVudGl0eTtcblxuLyoqXG4gKiBAcGFyYW0gaXNCbG9ja1R5cGUgYmxvY2tzIGFuZCBsaXN0cyBvZiBvYmplY3RzIG5lZWQgdG8gYmUgaGFuZGxlZCBkaWZmZXJlbnQgaW4gVGVycmFmb3JtXG4gKiAgICAgICAgICAgICAgICAgICAgYnV0IGFyZSByZXByZXNlbnRlZCBleGFjdGx5IHRoZSBzYW1lIGluIGdlbmVyYXRlZCBiaW5kaW5nc1xuICogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseSB0aGlzIGlzIHVzZWQgdG8gcmVzb2x2ZSBUZXJyYWZvcm1EeW5hbWljQmxvY2tzIGlmIG5vdCB3aXRoaW5cbiAqICAgICAgICAgICAgICAgICAgICBhIGJsb2NrIHR5cGUgKHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSBmb3IgZXhwcmVzc2lvbiBmb3IgdGhvc2UgaW5zdGVhZCBvZlxuICogICAgICAgICAgICAgICAgICAgIGEgZHluYW1pYyBibG9jaylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RNYXBwZXIoXG4gIGVsZW1lbnRNYXBwZXI6IE1hcHBlcixcbiAgaXNCbG9ja1R5cGU/OiBib29sZWFuXG4pOiBNYXBwZXIge1xuICByZXR1cm4gKHg6IGFueSkgPT4ge1xuICAgIGlmICghY2FuSW5zcGVjdCh4KSkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgLy8gcmVwbGFjZSBkeW5hbWljIGV4cHJlc3Npb25zIGZvciBibG9jayB0eXBlcyBzbyB0aGV5IGNhbiBiZSBkZXRlY3RlZCBhbmQgcmVwbGFjZWQgcHJvcGVybHkgYnkgcHJvY2Vzc0R5bmFtaWNBdHRyaWJ1dGVzKClcbiAgICAvLyB3aGljaCBhbHNvIHJlbG9jYXRlcyB0aGVtIHRvIGR5bmFtaWMuYXR0cmlidXRlTmFtZSAoc29tZXRoaW5nIHdlIGNhbid0IGRvIHdoZW4gcmVzb2x2aW5nIGEgdmFsdWUsIHB1dCBpdCBzb21ld2hlcmUgZWxzZSlcbiAgICAvLyBpZiBpc0Jsb2NrVHlwZSBpcyBmYWxzZSwgdGhlIFRlcnJhZm9ybUR5bmFtaWNFeHByZXNzaW9uIHRoYXQgaXMgcHJlc2VudCB3aWxsIGJlIHJlc29sdmVkIChpdCBpbXBsZW1lbnRzIElSZXNvbHZhYmxlKSB0byBhXG4gICAgLy8gZm9yIGV4cHJlc3Npb24gZGlyZWN0bHkgKHdoaWNoIGNhbiBiZSB1c2VkIGUuZy4gd2l0aGluIFRlcnJhZm9ybSBmdW5jdGlvbnMgb3IgZm9yIGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm90IG9mIGEgYmxvY2sgdHlwZSlcbiAgICBpZiAoXG4gICAgICBUZXJyYWZvcm1EeW5hbWljRXhwcmVzc2lvbi5pc1RlcnJhZm9ybUR5bmFtaWNFeHByZXNzaW9uKHgpICYmXG4gICAgICBpc0Jsb2NrVHlwZVxuICAgICkge1xuICAgICAgcmV0dXJuIFRlcnJhZm9ybUR5bmFtaWNCbG9jay5mcm9tRHluYW1pY0V4cHJlc3Npb24oeCk7XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICByZXR1cm4geC5tYXAoZWxlbWVudE1hcHBlcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoTWFwcGVyKGVsZW1lbnRNYXBwZXI6IE1hcHBlcik6IE1hcHBlciB7XG4gIHJldHVybiAoeDogYW55KSA9PiB7XG4gICAgaWYgKCFjYW5JbnNwZWN0KHgpKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBpdCdzIGEgdG9rZW4gb2JqZWN0XG4gICAgaWYgKGNvbnRhaW5zQ29tcGxleEVsZW1lbnQoeCkpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIGlmIChUb2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHgpKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICAvLyBXZSBjYW4ndCB0cmVhdCBzdHJpbmdzIGFzIGhhc2hlcyAobGlrZWx5IGEgdG9rZW4gb3IgYSBtaXNjb25maWd1cmF0aW9uKVxuICAgIGlmICh0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zTWFwVG9rZW4oeCkpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIGNvbnN0IHJldDogYW55ID0ge307XG5cbiAgICBPYmplY3Qua2V5cyh4KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHJldFtrZXldID0gZWxlbWVudE1hcHBlcih4W2tleV0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciB0aGlzIG9iamVjdCBjYW4gYmUgdmFsaWRhdGVkIGF0IGFsbFxuICpcbiAqIFRydWUgdW5sZXNzIGl0J3MgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5JbnNwZWN0KHg6IGFueSkge1xuICAvLyBOb3RlOiB1c2luZyB3ZWFrIGVxdWFsaXR5IG9uIHB1cnBvc2UsIHdlIGFsc28gd2FudCB0byBjYXRjaCB1bmRlZmluZWRcbiAgcmV0dXJuIHggIT0gbnVsbDtcbn1cbmV4cG9ydCB7IGlzQ29tcGxleEVsZW1lbnQgfTtcbiJdfQ==